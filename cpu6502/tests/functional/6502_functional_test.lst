AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

6010 lines read, no errors in pass 1.
                        ;
                        ; 6 5 0 2   F U N C T I O N A L   T E S T
                        ;
                        ; Copyright (C) 2012-2015  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute it and/or modify
                        ; it under the terms of the GNU General Public License as published by
                        ; the Free Software Foundation, either version 3 of the License, or
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will be useful,
                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General Public License
                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                        
                        
                        ; This program is designed to test all opcodes of a 6502 emulator using all
                        ; addressing modes with focus on propper setting of the processor status
                        ; register bits.
                        ; 
                        ; version 21-oct-2015
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 from http://www.kingswood-consulting.co.uk/assemblers/
                        ; command line switches: -l -m -s2 -w -h0
                        ;                         |  |  |   |  no page headers in listing
                        ;                         |  |  |   wide listing (133 char/col)
                        ;                         |  |  write intel hex file instead of binary
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to registers.
                        ; To run load intel hex image with a load command, than alter PC to 400 hex
                        ; (code_segment) and enter a go command.
                        ; Loop on program counter determines error or successful completion of test.
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions will have to be used before
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
                        ; Tests documented behavior of the original NMOS 6502 only! No unofficial
                        ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
                        ; not be tested. Decimal ops will only be tested with valid BCD operands and
                        ; N V Z flags will be ignored.
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you hit a trap, check the
                        ;   immediately preceeding code for the instruction to be tested. Results are
                        ;   tested first, flags are checked second by pushing them onto the stack and
                        ;   pulling them to the accumulator after the result was checked. The "real"
                        ;   flags are no longer valid for the tested instruction at this time!
                        ;     If the tested instruction was indexed, the relevant index (X or Y) must
                        ;   also be checked. Opposed to the flags, X and Y registers are still valid.
                        ;
                        ; versions:
                        ;   28-jul-2012  1st version distributed for testing
                        ;   29-jul-2012  fixed references to location 0, now #0
                        ;                added license - GPLv3
                        ;   30-jul-2012  added configuration options
                        ;   01-aug-2012  added trap macro to allow user to change error handling
                        ;   01-dec-2012  fixed trap in branch field must be a branch
                        ;   02-mar-2013  fixed PLA flags not tested
                        ;   19-jul-2013  allowed ROM vectors to be loaded when load_data_direct = 0
                        ;                added test sequence check to detect if tests jump their fence
                        ;   23-jul-2013  added RAM integrity check option
                        ;   16-aug-2013  added error report to standard output option
                        ;   13-dec-2014  added binary/decimal opcode table switch test
                        ;   14-dec-2014  improved relative address test
                        ;   23-aug-2015  added option to disable self modifying tests
                        ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
                        ;                added small branch offset pretest
                        ;   21-oct-2015  added option to disable decimal mode ADC & SBC tests
                        
                        
                        ; C O N F I G U R A T I O N
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0001 =                  ROM_vectors = 1
                        
                        ;load_data_direct (0=move from code segment, 1=load directly)
                        ;loading directly is preferred but may not be supported by your platform
                        ;0 produces only consecutive object code, 1 is not suitable for a binary image
0000 =                  load_data_direct = 0
                        
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
                        ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
                        ;tested if you allow changing the interrupt status (I_flag = 3)
0003 =                  I_flag = 3
                        
                        ;configure memory - try to stay away from memory used by the system
                        ;zero_page memory start address, $50 (80) consecutive Bytes required
                        ;                                add 2 if I_flag = 2
000a =                  zero_page = $a  
                        
                        ;data_segment memory start address, $6A (106) consecutive Bytes required
0200 =                  data_segment = $200  
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUST be $00 !!
                            endif  
                        
                        ;code_segment memory start address, 13kB of consecutive space required
                        ;                                   add 2.5 kB if I_flag = 2
0400 =                  code_segment = $400  
                        
                        ;self modifying code may be disabled to allow running in ROM
                        ;0=part of the code is self modifying and must reside in RAM
                        ;1=tests disabled: branch range
0000 =                  disable_selfmod = 0
                        
                        ;report errors through I/O channel (0=use standard self trap loops, 1=include
                        ;report.i65 as I/O channel, add 3.5 kB)
0000 =                  report = 0
                        
                        ;RAM integrity test option. Checks for undesired RAM writes.
                        ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
                        ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
ffff =                  ram_top = -1
                        
                        ;disable test decimal mode ADC & SBC, 0=enable, 1=disable,
                        ;2=disable including decimal flag in processor status
0002 =                  disable_decimal = 2
                        
                                noopt       ;do not take shortcuts
                        
                        ;macros for error & success traps to allow user modification
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        ;
                        ; my_error_handler should pop the calling address from the stack and report it.
                        ; putting larger portions of code (more than 3 bytes) inside the trap macro
                        ; may lead to branch range problems for some tests.
                            if report = 0
                        trap    macro
                                jmp *           ;failed anyway
                                endm
                        trap_eq macro
                                beq *           ;failed equal (zero)
                                endm
                        trap_ne macro
                                bne *           ;failed not equal (non zero)
                                endm
                        trap_cs macro
                                bcs *           ;failed carry set
                                endm
                        trap_cc macro
                                bcc *           ;failed carry clear
                                endm
                        trap_mi macro
                                bmi *           ;failed minus (bit 7 set)
                                endm
                        trap_pl macro
                                bpl *           ;failed plus (bit 7 clear)
                                endm
                        trap_vs macro
                                bvs *           ;failed overflow set
                                endm
                        trap_vc macro
                                bvc *           ;failed overflow clear
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jmp *           ;test passed, no errors
                                endm
                            endif
                            if report = 1
                        trap    macro
                                jsr report_error
                                endm
                        trap_eq macro
                                bne skip\?
                                trap           ;failed equal (zero)
                        skip\?
                                endm
                        trap_ne macro
                                beq skip\?
                                trap            ;failed not equal (non zero)
                        skip\?
                                endm
                        trap_cs macro
                                bcc skip\?
                                trap            ;failed carry set
                        skip\?
                                endm
                        trap_cc macro
                                bcs skip\?
                                trap            ;failed carry clear
                        skip\?
                                endm
                        trap_mi macro
                                bpl skip\?
                                trap            ;failed minus (bit 7 set)
                        skip\?
                                endm
                        trap_pl macro
                                bmi skip\?
                                trap            ;failed plus (bit 7 clear)
                        skip\?
                                endm
                        trap_vs macro
                                bvc skip\?
                                trap            ;failed overflow set
                        skip\?
                                endm
                        trap_vc macro
                                bvs skip\?
                                trap            ;failed overflow clear
                        skip\?
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jsr report_success
                                endm
                            endif
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
0030 =                  fao     equ break+reserv    ;bits always on after PHP, BRK
0034 =                  fai     equ fao+intdis      ;+ forced interrupt disable
0038 =                  faod    equ fao+decmode     ;+ ignore decimal
003c =                  faid    equ fai+decmode     ;+ ignore decimal
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
                        
                        ;macros to allow masking of status bits.
                        ;masking test of decimal bit
                        ;masking of interrupt enable/disable on load and compare
                        ;masking of always on bits after PHP or BRK (unused & break) on compare
                            if disable_decimal < 2
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    cmp #(\1|fao)&m8i   ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags + always on bits
                                    endm
                                endif
                            else
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faid)&m8   ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1|faid)      ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8   ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #\1|faod        ;invert expected flags + always on bits
                                    endm
                                endif
                            endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processor status register
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & (mask)
                        tst_stat    macro       ;testing flags in the processor status register
                                    php         ;save status
                                    pla         ;use stack to retrieve status
                                    pha
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                                    
                        tst_a       macro       ;testing result in accu & flags
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_x       macro       ;testing result in x index & flags
                                    php         ;save flags
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & flags
                                    php         ;save flags
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_ax      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
                                
                        tst_z       macro       ;indexed testing result in zp & flags
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flags
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in memory & flags
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & flags
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                                    
                        ; RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                        ;   uses zpt word as indirect pointer, zpt+2 word as checksum
                                if ram_top > -1
                        check_ram   macro 
                                    cld
                                    lda #0
                                    sta zpt         ;set low byte of indirect pointer
                                    sta zpt+3       ;checksum high byte
                                  if disable_selfmod = 0
                                    sta range_adr   ;reset self modifying code
                                  endif
                                    clc
                                    ldx #zp_bss-zero_page ;zeropage - write test area
                        ccs3\?      adc zero_page,x
                                    bcc ccs2\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs2\?      inx
                                    bne ccs3\?
                                    ldx #hi(abs1)   ;set high byte of indirect pointer
                                    stx zpt+1
                                    ldy #lo(abs1)   ;data after write & execute test area
                        ccs5\?      adc (zpt),y
                                    bcc ccs4\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs4\?      iny
                                    bne ccs5\?
                                    inx             ;advance RAM high address
                                    stx zpt+1
                                    cpx #ram_top
                                    bne ccs5\?
                                    sta zpt+2       ;checksum low is
                                    cmp ram_chksm   ;checksum low expected
                                    trap_ne         ;checksum mismatch
                                    lda zpt+3       ;checksum high is
                                    cmp ram_chksm+1 ;checksum high expected
                                    trap_ne         ;checksum mismatch
                                    endm            
                                else
                        check_ram   macro
                                    ;RAM check disabled - RAM size not set
                                    endm
                                endif
                        
                        next_test   macro           ;make sure, tests don't jump the fence
                                    lda test_case   ;previous test
                                    cmp #test_num
                                    trap_ne         ;test is out of sequence
                        test_num = test_num + 1
                                    lda #test_num   ;*** next tests' number
                                    sta test_case
                                    ;check_ram       ;uncomment to find altered RAM after each test
                                    endm
                        
                            if load_data_direct = 1
                                data
                            else
                                bss                 ;uninitialized segment, copy of data at end of code!
                            endif
000a =                          org zero_page
                        ;break test interrupt save
000a =                  irq_a   ds  1               ;a register
000b =                  irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags   
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
000c =                  zpt                         ;5 bytes store/modify test area
                        ;add/subtract operand generation and result/flag prediction
000c =                  adfc    ds  1               ;carry flag before op
000d =                  ad1     ds  1               ;operand 1 - accumulator
000e =                  ad2     ds  1               ;operand 2 - memory / immediate
000f =                  adrl    ds  1               ;expected result bits 0-7
0010 =                  adrh    ds  1               ;expected result bit 8 (carry)
0011 =                  adrf    ds  1               ;expected flags NV0000ZC (only binary mode)
0012 =                  sb2     ds  1               ;operand 2 complemented for subtract
0013 =                  zp_bss
0013 =                  zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
0017 =                  zp7f    db  $7f             ;test pattern for compare  
                        ;logical zeropage operands
0018 =                  zpOR    db  0,$1f,$71,$80   ;test pattern for OR
001c =                  zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
0020 =                  zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
0024 =                  ind1    dw  abs1            ;indirect pointer to pattern in absolute memory
0026 =                          dw  abs1+1
0028 =                          dw  abs1+2
002a =                          dw  abs1+3
002c =                          dw  abs7f
002e =                  inw1    dw  abs1-$f8        ;indirect pointer for wrap-test pattern
0030 =                  indt    dw  abst            ;indirect pointer to store area in absolute memory
0032 =                          dw  abst+1
0034 =                          dw  abst+2
0036 =                          dw  abst+3
0038 =                  inwt    dw  abst-$f8        ;indirect pointer for wrap-test store
003a =                  indAN   dw  absAN           ;indirect pointer to AND pattern in absolute memory
003c =                          dw  absAN+1
003e =                          dw  absAN+2
0040 =                          dw  absAN+3
0042 =                  indEO   dw  absEO           ;indirect pointer to EOR pattern in absolute memory
0044 =                          dw  absEO+1
0046 =                          dw  absEO+2
0048 =                          dw  absEO+3
004a =                  indOR   dw  absOR           ;indirect pointer to OR pattern in absolute memory
004c =                          dw  absOR+1
004e =                          dw  absOR+2
0050 =                          dw  absOR+3
                        ;add/subtract indirect pointers
0052 =                  adi2    dw  ada2            ;indirect pointer to operand 2 in absolute memory
0054 =                  sbi2    dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
0056 =                  adiy2   dw  ada2-$ff        ;with offset for indirect indexed
0058 =                  sbiy2   dw  sba2-$ff
005a =                  zp_bss_end
                           
0200 =                          org data_segment
0200 =                  test_case   ds  1           ;current test number
0201 =                  ram_chksm   ds  2           ;checksum for RAM integrity test
                        ;add/subtract operand copy - abs tests write area
0203 =                  abst                        ;5 bytes store/modify test area
0203 =                  ada2    ds  1               ;operand 2
0204 =                  sba2    ds  1               ;operand 2 complemented for subtract
0205 =                          ds  3               ;fill remaining bytes
0208 =                  data_bss
                            if load_data_direct = 1
                        ex_andi and #0              ;execute immediate opcodes
                                rts
                        ex_eori eor #0              ;execute immediate opcodes
                                rts
                        ex_orai ora #0              ;execute immediate opcodes
                                rts
                        ex_adci adc #0              ;execute immediate opcodes
                                rts
                        ex_sbci sbc #0              ;execute immediate opcodes
                                rts
                            else
0208 =                  ex_andi ds  3
020b =                  ex_eori ds  3
020e =                  ex_orai ds  3
0211 =                  ex_adci ds  3
0214 =                  ex_sbci ds  3
                            endif
0217 =                  abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
021b =                  abs7f   db  $7f             ;test pattern for compare
                        ;loads
021c =                  fLDx    db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
0220 =                  rASL                        ;expected result ASL & ROL -carry  
0220 =                  rROL    db  $86,$04,$82,0   ; "
0224 =                  rROLc   db  $87,$05,$83,1   ;expected result ROL +carry
0228 =                  rLSR                        ;expected result LSR & ROR -carry
0228 =                  rROR    db  $61,$41,$20,0   ; "
022c =                  rRORc   db  $e1,$c1,$a0,$80 ;expected result ROR +carry
0230 =                  fASL                        ;expected flags for shifts
0230 =                  fROL    db  fnc,fc,fn,fz    ;no carry in
0234 =                  fROLc   db  fnc,fc,fn,0     ;carry in
0238 =                  fLSR
0238 =                  fROR    db  fc,0,fc,fz      ;no carry in
023c =                  fRORc   db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
0240 =                  rINC    db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
0245 =                  fINC    db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        ;logical memory operand
024a =                  absOR   db  0,$1f,$71,$80   ;test pattern for OR
024e =                  absAN   db  $0f,$ff,$7f,$80 ;test pattern for AND
0252 =                  absEO   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
0256 =                  absORa  db  0,$f1,$1f,0     ;test pattern for OR
025a =                  absANa  db  $f0,$ff,$ff,$ff ;test pattern for AND
025e =                  absEOa  db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
0262 =                  absrlo  db  0,$ff,$7f,$80
0266 =                  absflo  db  fz,fn,0,fn
026a =                  data_bss_end
                        
                        
                                code
0400 =                          org code_segment
0400 : d8               start   cld
0401 : a2ff                     ldx #$ff
0403 : 9a                       txs
0404 : a900                     lda #0          ;*** test 0 = initialize
0406 : 8d0002                   sta test_case
0000 =                  test_num = 0
                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                            
                        ;initialize I/O for report channel
                            if report = 1
                                jsr report_init
                            endif
                            
                        ;pretest small branch offset
0409 : a205                     ldx #5
040b : 4c3304                   jmp psb_test
040e :                  psb_bwok
040e : a005                     ldy #5
0410 : d008                     bne psb_forw
                                trap        ;branch should be taken
0412 : 4c1204          >        jmp *           ;failed anyway
                        
0415 : 88                       dey         ;forward landing zone
0416 : 88                       dey
0417 : 88                       dey
0418 : 88                       dey
0419 : 88                       dey
041a :                  psb_forw
041a : 88                       dey
041b : 88                       dey
041c : 88                       dey
041d : 88                       dey
041e : 88                       dey
041f : f017                     beq psb_fwok
                                trap        ;forward offset
0421 : 4c2104          >        jmp *           ;failed anyway
                        
                        
0424 : ca                       dex         ;backward landing zone
0425 : ca                       dex
0426 : ca                       dex
0427 : ca                       dex
0428 : ca                       dex
0429 :                  psb_back
0429 : ca                       dex
042a : ca                       dex
042b : ca                       dex
042c : ca                       dex
042d : ca                       dex
042e : f0de                     beq psb_bwok
                                trap        ;backward offset
0430 : 4c3004          >        jmp *           ;failed anyway
                        
0433 :                  psb_test
0433 : d0f4                     bne psb_back
                                trap        ;branch should be taken
0435 : 4c3504          >        jmp *           ;failed anyway
                        
0438 :                  psb_fwok
                                
                        ;initialize BSS segment
                            if load_data_direct != 1
0438 : a246                     ldx #zp_end-zp_init-1
043a : bdd838           ld_zp   lda zp_init,x
043d : 9513                     sta zp_bss,x
043f : ca                       dex
0440 : 10f8                     bpl ld_zp
0442 : a261                     ldx #data_end-data_init-1
0444 : bd1f39           ld_data lda data_init,x
0447 : 9d0802                   sta data_bss,x
044a : ca                       dex
044b : 10f7                     bpl ld_data
                              if ROM_vectors = 1
044d : a205                     ldx #5
044f : bd8139           ld_vect lda vec_init,x
0452 : 9dfaff                   sta vec_bss,x
0455 : ca                       dex
0456 : 10f7                     bpl ld_vect
                              endif
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                                
                        ;generate checksum for RAM integrity test
                            if ram_top > -1
                                lda #0 
                                sta zpt         ;set low byte of indirect pointer
                                sta ram_chksm+1 ;checksum high byte
                              if disable_selfmod = 0
                                sta range_adr   ;reset self modifying code
                              endif
                                clc
                                ldx #zp_bss-zero_page ;zeropage - write test area
                        gcs3    adc zero_page,x
                                bcc gcs2
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs2    inx
                                bne gcs3
                                ldx #hi(abs1)   ;set high byte of indirect pointer
                                stx zpt+1
                                ldy #lo(abs1)   ;data after write & execute test area
                        gcs5    adc (zpt),y
                                bcc gcs4
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs4    iny
                                bne gcs5
                                inx             ;advance RAM high address
                                stx zpt+1
                                cpx #ram_top
                                bne gcs5
                                sta ram_chksm   ;checksum complete
                            endif
                                next_test            
0458 : ad0002          >            lda test_case   ;previous test
045b : c900            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
045d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0001 =                 >test_num = test_num + 1
045f : a901            >            lda #test_num   ;*** next tests' number
0461 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                            if disable_selfmod = 0
                        ;testing relative addressing with BEQ
0464 : a0fe                     ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
0466 :                  range_loop
0466 : 88                       dey             ;next relative address
0467 : 98                       tya
0468 : aa                       tax             ;precharge count to end of loop
0469 : 1008                     bpl range_fw    ;calculate relative address
046b : 18                       clc             ;avoid branch self or to relative address of branch
046c : 6902                     adc #2
046e : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
046f : ea                       nop
0470 : ea                       nop
0471 : ea                       nop
0472 : ea                       nop
0473 :                  range_fw
0473 : ea                       nop
0474 : ea                       nop
0475 : ea                       nop
0476 : ea                       nop
0477 : ea                       nop
0478 : 497f                     eor #$7f        ;complement except sign
047a : 8d0605                   sta range_adr   ;load into test target
047d : a900                     lda #0          ;should set zero flag in status register
047f : 4c0505                   jmp range_op
                                
0482 : ca                       dex             ; offset landing zone - backward branch too far
0483 : ca                       dex
0484 : ca                       dex
0485 : ca                       dex
0486 : ca                       dex
                                ;relative address target field with branch under test in the middle
0487 : ca                       dex             ;-128 - max backward
0488 : ca                       dex
0489 : ca                       dex
048a : ca                       dex
048b : ca                       dex
048c : ca                       dex
048d : ca                       dex
048e : ca                       dex
048f : ca                       dex             ;-120
0490 : ca                       dex
0491 : ca                       dex
0492 : ca                       dex
0493 : ca                       dex
0494 : ca                       dex
0495 : ca                       dex
0496 : ca                       dex
0497 : ca                       dex
0498 : ca                       dex
0499 : ca                       dex             ;-110
049a : ca                       dex
049b : ca                       dex
049c : ca                       dex
049d : ca                       dex
049e : ca                       dex
049f : ca                       dex
04a0 : ca                       dex
04a1 : ca                       dex
04a2 : ca                       dex
04a3 : ca                       dex             ;-100
04a4 : ca                       dex
04a5 : ca                       dex
04a6 : ca                       dex
04a7 : ca                       dex
04a8 : ca                       dex
04a9 : ca                       dex
04aa : ca                       dex
04ab : ca                       dex
04ac : ca                       dex
04ad : ca                       dex             ;-90
04ae : ca                       dex
04af : ca                       dex
04b0 : ca                       dex
04b1 : ca                       dex
04b2 : ca                       dex
04b3 : ca                       dex
04b4 : ca                       dex
04b5 : ca                       dex
04b6 : ca                       dex
04b7 : ca                       dex             ;-80
04b8 : ca                       dex
04b9 : ca                       dex
04ba : ca                       dex
04bb : ca                       dex
04bc : ca                       dex
04bd : ca                       dex
04be : ca                       dex
04bf : ca                       dex
04c0 : ca                       dex
04c1 : ca                       dex             ;-70
04c2 : ca                       dex
04c3 : ca                       dex
04c4 : ca                       dex
04c5 : ca                       dex
04c6 : ca                       dex
04c7 : ca                       dex
04c8 : ca                       dex
04c9 : ca                       dex
04ca : ca                       dex
04cb : ca                       dex             ;-60
04cc : ca                       dex
04cd : ca                       dex
04ce : ca                       dex
04cf : ca                       dex
04d0 : ca                       dex
04d1 : ca                       dex
04d2 : ca                       dex
04d3 : ca                       dex
04d4 : ca                       dex
04d5 : ca                       dex             ;-50
04d6 : ca                       dex
04d7 : ca                       dex
04d8 : ca                       dex
04d9 : ca                       dex
04da : ca                       dex
04db : ca                       dex
04dc : ca                       dex
04dd : ca                       dex
04de : ca                       dex
04df : ca                       dex             ;-40
04e0 : ca                       dex
04e1 : ca                       dex
04e2 : ca                       dex
04e3 : ca                       dex
04e4 : ca                       dex
04e5 : ca                       dex
04e6 : ca                       dex
04e7 : ca                       dex
04e8 : ca                       dex
04e9 : ca                       dex             ;-30
04ea : ca                       dex
04eb : ca                       dex
04ec : ca                       dex
04ed : ca                       dex
04ee : ca                       dex
04ef : ca                       dex
04f0 : ca                       dex
04f1 : ca                       dex
04f2 : ca                       dex
04f3 : ca                       dex             ;-20
04f4 : ca                       dex
04f5 : ca                       dex
04f6 : ca                       dex
04f7 : ca                       dex
04f8 : ca                       dex
04f9 : ca                       dex
04fa : ca                       dex
04fb : ca                       dex
04fc : ca                       dex
04fd : ca                       dex             ;-10
04fe : ca                       dex
04ff : ca                       dex
0500 : ca                       dex
0501 : ca                       dex
0502 : ca                       dex
0503 : ca                       dex
0504 : ca                       dex             ;-3
0505 :                  range_op                ;test target with zero flag=0, z=1 if previous dex
0506 =                  range_adr   = *+1       ;modifiable relative address
0505 : f03e                     beq *+64        ;+64 if called without modification
0507 : ca                       dex             ;+0
0508 : ca                       dex
0509 : ca                       dex
050a : ca                       dex
050b : ca                       dex
050c : ca                       dex
050d : ca                       dex
050e : ca                       dex
050f : ca                       dex
0510 : ca                       dex
0511 : ca                       dex             ;+10
0512 : ca                       dex
0513 : ca                       dex
0514 : ca                       dex
0515 : ca                       dex
0516 : ca                       dex
0517 : ca                       dex
0518 : ca                       dex
0519 : ca                       dex
051a : ca                       dex
051b : ca                       dex             ;+20
051c : ca                       dex
051d : ca                       dex
051e : ca                       dex
051f : ca                       dex
0520 : ca                       dex
0521 : ca                       dex
0522 : ca                       dex
0523 : ca                       dex
0524 : ca                       dex
0525 : ca                       dex             ;+30
0526 : ca                       dex
0527 : ca                       dex
0528 : ca                       dex
0529 : ca                       dex
052a : ca                       dex
052b : ca                       dex
052c : ca                       dex
052d : ca                       dex
052e : ca                       dex
052f : ca                       dex             ;+40
0530 : ca                       dex
0531 : ca                       dex
0532 : ca                       dex
0533 : ca                       dex
0534 : ca                       dex
0535 : ca                       dex
0536 : ca                       dex
0537 : ca                       dex
0538 : ca                       dex
0539 : ca                       dex             ;+50
053a : ca                       dex
053b : ca                       dex
053c : ca                       dex
053d : ca                       dex
053e : ca                       dex
053f : ca                       dex
0540 : ca                       dex
0541 : ca                       dex
0542 : ca                       dex
0543 : ca                       dex             ;+60
0544 : ca                       dex
0545 : ca                       dex
0546 : ca                       dex
0547 : ca                       dex
0548 : ca                       dex
0549 : ca                       dex
054a : ca                       dex
054b : ca                       dex
054c : ca                       dex
054d : ca                       dex             ;+70
054e : ca                       dex
054f : ca                       dex
0550 : ca                       dex
0551 : ca                       dex
0552 : ca                       dex
0553 : ca                       dex
0554 : ca                       dex
0555 : ca                       dex
0556 : ca                       dex
0557 : ca                       dex             ;+80
0558 : ca                       dex
0559 : ca                       dex
055a : ca                       dex
055b : ca                       dex
055c : ca                       dex
055d : ca                       dex
055e : ca                       dex
055f : ca                       dex
0560 : ca                       dex
0561 : ca                       dex             ;+90
0562 : ca                       dex
0563 : ca                       dex
0564 : ca                       dex
0565 : ca                       dex
0566 : ca                       dex
0567 : ca                       dex
0568 : ca                       dex
0569 : ca                       dex
056a : ca                       dex
056b : ca                       dex             ;+100
056c : ca                       dex
056d : ca                       dex
056e : ca                       dex
056f : ca                       dex
0570 : ca                       dex
0571 : ca                       dex
0572 : ca                       dex
0573 : ca                       dex
0574 : ca                       dex
0575 : ca                       dex             ;+110
0576 : ca                       dex
0577 : ca                       dex
0578 : ca                       dex
0579 : ca                       dex
057a : ca                       dex
057b : ca                       dex
057c : ca                       dex
057d : ca                       dex
057e : ca                       dex
057f : ca                       dex             ;+120
0580 : ca                       dex
0581 : ca                       dex
0582 : ca                       dex
0583 : ca                       dex
0584 : ca                       dex
0585 : ca                       dex
0586 : ea                       nop             ;offset landing zone - forward branch too far
0587 : ea                       nop
0588 : ea                       nop
0589 : ea                       nop
058a : ea                       nop
058b : f008                     beq range_ok    ;+127 - max forward
                                trap            ; bad range
058d : 4c8d05          >        jmp *           ;failed anyway
                        
0590 : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
0591 : ea                       nop
0592 : ea                       nop
0593 : ea                       nop
0594 : ea                       nop
0595 :                  range_ok
0595 : ea                       nop
0596 : ea                       nop
0597 : ea                       nop
0598 : ea                       nop
0599 : ea                       nop
059a : c000                     cpy #0
059c : f003                     beq range_end   
059e : 4c6604                   jmp range_loop
05a1 :                  range_end               ;range test successful
                            endif
                                next_test
05a1 : ad0002          >            lda test_case   ;previous test
05a4 : c901            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
05a6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0002 =                 >test_num = test_num + 1
05a8 : a902            >            lda #test_num   ;*** next tests' number
05aa : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;partial test BNE & CMP, CPX, CPY immediate
05ad : c001                     cpy #1          ;testing BNE true
05af : d003                     bne test_bne
                                trap 
05b1 : 4cb105          >        jmp *           ;failed anyway
                        
05b4 :                  test_bne
05b4 : a900                     lda #0 
05b6 : c900                     cmp #0          ;test compare immediate 
                                trap_ne
05b8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
05ba : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
05bc : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
05be : c901                     cmp #1
                                trap_eq 
05c0 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
05c2 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
05c4 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
05c6 : aa                       tax 
05c7 : e000                     cpx #0          ;test compare x immediate
                                trap_ne
05c9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
05cb : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
05cd : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
05cf : e001                     cpx #1
                                trap_eq 
05d1 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
05d3 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
05d5 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
05d7 : a8                       tay 
05d8 : c000                     cpy #0          ;test compare y immediate
                                trap_ne
05da : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
05dc : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
05de : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
05e0 : c001                     cpy #1
                                trap_eq 
05e2 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
05e4 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
05e6 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                next_test
05e8 : ad0002          >            lda test_case   ;previous test
05eb : c902            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
05ed : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0003 =                 >test_num = test_num + 1
05ef : a903            >            lda #test_num   ;*** next tests' number
05f1 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        ;testing stack operations PHA PHP PLA PLP
                                    
05f4 : a2ff                     ldx #$ff        ;initialize stack
05f6 : 9a                       txs
05f7 : a955                     lda #$55
05f9 : 48                       pha
05fa : a9aa                     lda #$aa
05fc : 48                       pha
05fd : cdfe01                   cmp $1fe        ;on stack ?
                                trap_ne
0600 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0602 : ba                       tsx
0603 : 8a                       txa             ;overwrite accu
0604 : c9fd                     cmp #$fd        ;sp decremented?
                                trap_ne
0606 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0608 : 68                       pla
0609 : c9aa                     cmp #$aa        ;successful retreived from stack?
                                trap_ne
060b : d0fe            >        bne *           ;failed not equal (non zero)
                        
060d : 68                       pla
060e : c955                     cmp #$55
                                trap_ne
0610 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0612 : cdff01                   cmp $1ff        ;remains on stack?
                                trap_ne
0615 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0617 : ba                       tsx
0618 : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
061a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
061c : ad0002          >            lda test_case   ;previous test
061f : c903            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0621 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0004 =                 >test_num = test_num + 1
0623 : a904            >            lda #test_num   ;*** next tests' number
0625 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ
                                set_stat $ff    ;all on
                       >            load_flag $ff    
0628 : a9ff            >            lda #$ff                 ;allow test to change I-flag (no mask)
                       >
062a : 48              >            pha         ;use stack to load status
062b : 28              >            plp
                        
062c : 101a                     bpl nbr1        ;branches should not be taken
062e : 501b                     bvc nbr2
0630 : 901c                     bcc nbr3
0632 : d01d                     bne nbr4
0634 : 3003                     bmi br1         ;branches should be taken
                                trap 
0636 : 4c3606          >        jmp *           ;failed anyway
                        
0639 : 7003             br1     bvs br2
                                trap 
063b : 4c3b06          >        jmp *           ;failed anyway
                        
063e : b003             br2     bcs br3
                                trap 
0640 : 4c4006          >        jmp *           ;failed anyway
                        
0643 : f00f             br3     beq br4
                                trap 
0645 : 4c4506          >        jmp *           ;failed anyway
                        
0648 :                  nbr1
                                trap            ;previous bpl taken 
0648 : 4c4806          >        jmp *           ;failed anyway
                        
064b :                  nbr2
                                trap            ;previous bvc taken
064b : 4c4b06          >        jmp *           ;failed anyway
                        
064e :                  nbr3
                                trap            ;previous bcc taken
064e : 4c4e06          >        jmp *           ;failed anyway
                        
0651 :                  nbr4
                                trap            ;previous bne taken
0651 : 4c5106          >        jmp *           ;failed anyway
                        
0654 : 08               br4     php
0655 : ba                       tsx
0656 : e0fe                     cpx #$fe        ;sp after php?
                                trap_ne
0658 : d0fe            >        bne *           ;failed not equal (non zero)
                        
065a : 68                       pla
                                cmp_flag $ff    ;returned all flags on?
065b : 0908            >            ora #decmode        ;ignore decimal mode bit
065d : c9ff            >            cmp #($ff    |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
065f : d0fe            >        bne *           ;failed not equal (non zero)
                        
0661 : ba                       tsx
0662 : e0ff                     cpx #$ff        ;sp after php?
                                trap_ne
0664 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0      ;all off
                       >            load_flag 0      
0666 : a900            >            lda #0                   ;allow test to change I-flag (no mask)
                       >
0668 : 48              >            pha         ;use stack to load status
0669 : 28              >            plp
                        
066a : 301a                     bmi nbr11       ;branches should not be taken
066c : 701b                     bvs nbr12
066e : b01c                     bcs nbr13
0670 : f01d                     beq nbr14
0672 : 1003                     bpl br11        ;branches should be taken
                                trap 
0674 : 4c7406          >        jmp *           ;failed anyway
                        
0677 : 5003             br11    bvc br12
                                trap 
0679 : 4c7906          >        jmp *           ;failed anyway
                        
067c : 9003             br12    bcc br13
                                trap 
067e : 4c7e06          >        jmp *           ;failed anyway
                        
0681 : d00f             br13    bne br14
                                trap 
0683 : 4c8306          >        jmp *           ;failed anyway
                        
0686 :                  nbr11
                                trap            ;previous bmi taken 
0686 : 4c8606          >        jmp *           ;failed anyway
                        
0689 :                  nbr12
                                trap            ;previous bvs taken 
0689 : 4c8906          >        jmp *           ;failed anyway
                        
068c :                  nbr13
                                trap            ;previous bcs taken 
068c : 4c8c06          >        jmp *           ;failed anyway
                        
068f :                  nbr14
                                trap            ;previous beq taken 
068f : 4c8f06          >        jmp *           ;failed anyway
                        
0692 : 08               br14    php
0693 : 68                       pla
                                cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
0694 : 0908            >            ora #decmode        ;ignore decimal mode bit
0696 : c938            >            cmp #(0      |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0698 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                ;crosscheck flags
                                set_stat zero
                       >            load_flag zero
069a : a902            >            lda #zero             ;allow test to change I-flag (no mask)
                       >
069c : 48              >            pha         ;use stack to load status
069d : 28              >            plp
                        
069e : d002                     bne brzs1
06a0 : f003                     beq brzs2
06a2 :                  brzs1
                                trap            ;branch zero/non zero
06a2 : 4ca206          >        jmp *           ;failed anyway
                        
06a5 : b002             brzs2   bcs brzs3
06a7 : 9003                     bcc brzs4
06a9 :                  brzs3
                                trap            ;branch carry/no carry
06a9 : 4ca906          >        jmp *           ;failed anyway
                        
06ac : 3002             brzs4   bmi brzs5
06ae : 1003                     bpl brzs6
06b0 :                  brzs5
                                trap            ;branch minus/plus
06b0 : 4cb006          >        jmp *           ;failed anyway
                        
06b3 : 7002             brzs6   bvs brzs7
06b5 : 5003                     bvc brzs8
06b7 :                  brzs7
                                trap            ;branch overflow/no overflow
06b7 : 4cb706          >        jmp *           ;failed anyway
                        
06ba :                  brzs8
                                set_stat carry
                       >            load_flag carry
06ba : a901            >            lda #carry             ;allow test to change I-flag (no mask)
                       >
06bc : 48              >            pha         ;use stack to load status
06bd : 28              >            plp
                        
06be : f002                     beq brcs1
06c0 : d003                     bne brcs2
06c2 :                  brcs1
                                trap            ;branch zero/non zero
06c2 : 4cc206          >        jmp *           ;failed anyway
                        
06c5 : 9002             brcs2   bcc brcs3
06c7 : b003                     bcs brcs4
06c9 :                  brcs3
                                trap            ;branch carry/no carry
06c9 : 4cc906          >        jmp *           ;failed anyway
                        
06cc : 3002             brcs4   bmi brcs5
06ce : 1003                     bpl brcs6
06d0 :                  brcs5
                                trap            ;branch minus/plus
06d0 : 4cd006          >        jmp *           ;failed anyway
                        
06d3 : 7002             brcs6   bvs brcs7
06d5 : 5003                     bvc brcs8
06d7 :                  brcs7
                                trap            ;branch overflow/no overflow
06d7 : 4cd706          >        jmp *           ;failed anyway
                        
                        
06da :                  brcs8
                                set_stat minus
                       >            load_flag minus
06da : a980            >            lda #minus             ;allow test to change I-flag (no mask)
                       >
06dc : 48              >            pha         ;use stack to load status
06dd : 28              >            plp
                        
06de : f002                     beq brmi1
06e0 : d003                     bne brmi2
06e2 :                  brmi1
                                trap            ;branch zero/non zero
06e2 : 4ce206          >        jmp *           ;failed anyway
                        
06e5 : b002             brmi2   bcs brmi3
06e7 : 9003                     bcc brmi4
06e9 :                  brmi3
                                trap            ;branch carry/no carry
06e9 : 4ce906          >        jmp *           ;failed anyway
                        
06ec : 1002             brmi4   bpl brmi5
06ee : 3003                     bmi brmi6
06f0 :                  brmi5
                                trap            ;branch minus/plus
06f0 : 4cf006          >        jmp *           ;failed anyway
                        
06f3 : 7002             brmi6   bvs brmi7
06f5 : 5003                     bvc brmi8
06f7 :                  brmi7
                                trap            ;branch overflow/no overflow
06f7 : 4cf706          >        jmp *           ;failed anyway
                        
06fa :                  brmi8
                                set_stat overfl
                       >            load_flag overfl
06fa : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
06fc : 48              >            pha         ;use stack to load status
06fd : 28              >            plp
                        
06fe : f002                     beq brvs1
0700 : d003                     bne brvs2
0702 :                  brvs1
                                trap            ;branch zero/non zero
0702 : 4c0207          >        jmp *           ;failed anyway
                        
0705 : b002             brvs2   bcs brvs3
0707 : 9003                     bcc brvs4
0709 :                  brvs3
                                trap            ;branch carry/no carry
0709 : 4c0907          >        jmp *           ;failed anyway
                        
070c : 3002             brvs4   bmi brvs5
070e : 1003                     bpl brvs6
0710 :                  brvs5
                                trap            ;branch minus/plus
0710 : 4c1007          >        jmp *           ;failed anyway
                        
0713 : 5002             brvs6   bvc brvs7
0715 : 7003                     bvs brvs8
0717 :                  brvs7
                                trap            ;branch overflow/no overflow
0717 : 4c1707          >        jmp *           ;failed anyway
                        
071a :                  brvs8
                                set_stat $ff-zero
                       >            load_flag $ff-zero
071a : a9fd            >            lda #$ff-zero             ;allow test to change I-flag (no mask)
                       >
071c : 48              >            pha         ;use stack to load status
071d : 28              >            plp
                        
071e : f002                     beq brzc1
0720 : d003                     bne brzc2
0722 :                  brzc1
                                trap            ;branch zero/non zero
0722 : 4c2207          >        jmp *           ;failed anyway
                        
0725 : 9002             brzc2   bcc brzc3
0727 : b003                     bcs brzc4
0729 :                  brzc3
                                trap            ;branch carry/no carry
0729 : 4c2907          >        jmp *           ;failed anyway
                        
072c : 1002             brzc4   bpl brzc5
072e : 3003                     bmi brzc6
0730 :                  brzc5
                                trap            ;branch minus/plus
0730 : 4c3007          >        jmp *           ;failed anyway
                        
0733 : 5002             brzc6   bvc brzc7
0735 : 7003                     bvs brzc8
0737 :                  brzc7
                                trap            ;branch overflow/no overflow
0737 : 4c3707          >        jmp *           ;failed anyway
                        
073a :                  brzc8
                                set_stat $ff-carry
                       >            load_flag $ff-carry
073a : a9fe            >            lda #$ff-carry             ;allow test to change I-flag (no mask)
                       >
073c : 48              >            pha         ;use stack to load status
073d : 28              >            plp
                        
073e : d002                     bne brcc1
0740 : f003                     beq brcc2
0742 :                  brcc1
                                trap            ;branch zero/non zero
0742 : 4c4207          >        jmp *           ;failed anyway
                        
0745 : b002             brcc2   bcs brcc3
0747 : 9003                     bcc brcc4
0749 :                  brcc3
                                trap            ;branch carry/no carry
0749 : 4c4907          >        jmp *           ;failed anyway
                        
074c : 1002             brcc4   bpl brcc5
074e : 3003                     bmi brcc6
0750 :                  brcc5
                                trap            ;branch minus/plus
0750 : 4c5007          >        jmp *           ;failed anyway
                        
0753 : 5002             brcc6   bvc brcc7
0755 : 7003                     bvs brcc8
0757 :                  brcc7
                                trap            ;branch overflow/no overflow
0757 : 4c5707          >        jmp *           ;failed anyway
                        
075a :                  brcc8
                                set_stat $ff-minus
                       >            load_flag $ff-minus
075a : a97f            >            lda #$ff-minus             ;allow test to change I-flag (no mask)
                       >
075c : 48              >            pha         ;use stack to load status
075d : 28              >            plp
                        
075e : d002                     bne brpl1
0760 : f003                     beq brpl2
0762 :                  brpl1
                                trap            ;branch zero/non zero
0762 : 4c6207          >        jmp *           ;failed anyway
                        
0765 : 9002             brpl2   bcc brpl3
0767 : b003                     bcs brpl4
0769 :                  brpl3
                                trap            ;branch carry/no carry
0769 : 4c6907          >        jmp *           ;failed anyway
                        
076c : 3002             brpl4   bmi brpl5
076e : 1003                     bpl brpl6
0770 :                  brpl5
                                trap            ;branch minus/plus
0770 : 4c7007          >        jmp *           ;failed anyway
                        
0773 : 5002             brpl6   bvc brpl7
0775 : 7003                     bvs brpl8
0777 :                  brpl7
                                trap            ;branch overflow/no overflow
0777 : 4c7707          >        jmp *           ;failed anyway
                        
077a :                  brpl8
                                set_stat $ff-overfl
                       >            load_flag $ff-overfl
077a : a9bf            >            lda #$ff-overfl             ;allow test to change I-flag (no mask)
                       >
077c : 48              >            pha         ;use stack to load status
077d : 28              >            plp
                        
077e : d002                     bne brvc1
0780 : f003                     beq brvc2
0782 :                  brvc1
                                trap            ;branch zero/non zero
0782 : 4c8207          >        jmp *           ;failed anyway
                        
0785 : 9002             brvc2   bcc brvc3
0787 : b003                     bcs brvc4
0789 :                  brvc3
                                trap            ;branch carry/no carry
0789 : 4c8907          >        jmp *           ;failed anyway
                        
078c : 1002             brvc4   bpl brvc5
078e : 3003                     bmi brvc6
0790 :                  brvc5
                                trap            ;branch minus/plus
0790 : 4c9007          >        jmp *           ;failed anyway
                        
0793 : 7002             brvc6   bvs brvc7
0795 : 5003                     bvc brvc8
0797 :                  brvc7
                                trap            ;branch overflow/no overflow
0797 : 4c9707          >        jmp *           ;failed anyway
                        
079a :                  brvc8
                                next_test
079a : ad0002          >            lda test_case   ;previous test
079d : c904            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
079f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0005 =                 >test_num = test_num + 1
07a1 : a905            >            lda #test_num   ;*** next tests' number
07a3 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; test PHA does not alter flags or accumulator but PLA does
07a6 : a255                     ldx #$55        ;x & y protected
07a8 : a0aa                     ldy #$aa
                                set_a 1,$ff     ;push
                       >            load_flag $ff     
07aa : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
07ac : 48              >            pha         ;use stack to load status
07ad : a901            >            lda #1     ;precharge accu
07af : 28              >            plp
                        
07b0 : 48                       pha
                                tst_a 1,$ff
07b1 : 08              >            php         ;save flags
07b2 : c901            >            cmp #1     ;test result
                       >            trap_ne
07b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07b6 : 68              >            pla         ;load status
07b7 : 48              >            pha
                       >            cmp_flag $ff
07b8 : 0908            >            ora #decmode        ;ignore decimal mode bit
07ba : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
07bc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07be : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
07bf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
07c1 : 48              >            pha         ;use stack to load status
07c2 : a900            >            lda #0     ;precharge accu
07c4 : 28              >            plp
                        
07c5 : 48                       pha
                                tst_a 0,0
07c6 : 08              >            php         ;save flags
07c7 : c900            >            cmp #0     ;test result
                       >            trap_ne
07c9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07cb : 68              >            pla         ;load status
07cc : 48              >            pha
                       >            cmp_flag 0
07cd : 0908            >            ora #decmode        ;ignore decimal mode bit
07cf : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
07d1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07d3 : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
07d4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
07d6 : 48              >            pha         ;use stack to load status
07d7 : a9ff            >            lda #$ff     ;precharge accu
07d9 : 28              >            plp
                        
07da : 48                       pha
                                tst_a $ff,$ff
07db : 08              >            php         ;save flags
07dc : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
07de : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07e0 : 68              >            pla         ;load status
07e1 : 48              >            pha
                       >            cmp_flag $ff
07e2 : 0908            >            ora #decmode        ;ignore decimal mode bit
07e4 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
07e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07e8 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
07e9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
07eb : 48              >            pha         ;use stack to load status
07ec : a901            >            lda #1     ;precharge accu
07ee : 28              >            plp
                        
07ef : 48                       pha
                                tst_a 1,0
07f0 : 08              >            php         ;save flags
07f1 : c901            >            cmp #1     ;test result
                       >            trap_ne
07f3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07f5 : 68              >            pla         ;load status
07f6 : 48              >            pha
                       >            cmp_flag 0
07f7 : 0908            >            ora #decmode        ;ignore decimal mode bit
07f9 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
07fb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07fd : 28              >            plp         ;restore status
                        
                                set_a 0,$ff
                       >            load_flag $ff
07fe : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0800 : 48              >            pha         ;use stack to load status
0801 : a900            >            lda #0     ;precharge accu
0803 : 28              >            plp
                        
0804 : 48                       pha
                                tst_a 0,$ff
0805 : 08              >            php         ;save flags
0806 : c900            >            cmp #0     ;test result
                       >            trap_ne
0808 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
080a : 68              >            pla         ;load status
080b : 48              >            pha
                       >            cmp_flag $ff
080c : 0908            >            ora #decmode        ;ignore decimal mode bit
080e : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0810 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0812 : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
0813 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0815 : 48              >            pha         ;use stack to load status
0816 : a9ff            >            lda #$ff     ;precharge accu
0818 : 28              >            plp
                        
0819 : 48                       pha
                                tst_a $ff,0
081a : 08              >            php         ;save flags
081b : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
081d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
081f : 68              >            pla         ;load status
0820 : 48              >            pha
                       >            cmp_flag 0
0821 : 0908            >            ora #decmode        ;ignore decimal mode bit
0823 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0825 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0827 : 28              >            plp         ;restore status
                        
                                set_a 0,$ff     ;pull
                       >            load_flag $ff     
0828 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
082a : 48              >            pha         ;use stack to load status
082b : a900            >            lda #0     ;precharge accu
082d : 28              >            plp
                        
082e : 68                       pla
                                tst_a $ff,$ff-zero
082f : 08              >            php         ;save flags
0830 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0832 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0834 : 68              >            pla         ;load status
0835 : 48              >            pha
                       >            cmp_flag $ff-zero
0836 : 0908            >            ora #decmode        ;ignore decimal mode bit
0838 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
083a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
083c : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
083d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
083f : 48              >            pha         ;use stack to load status
0840 : a9ff            >            lda #$ff     ;precharge accu
0842 : 28              >            plp
                        
0843 : 68                       pla
                                tst_a 0,zero
0844 : 08              >            php         ;save flags
0845 : c900            >            cmp #0     ;test result
                       >            trap_ne
0847 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0849 : 68              >            pla         ;load status
084a : 48              >            pha
                       >            cmp_flag zero
084b : 0908            >            ora #decmode        ;ignore decimal mode bit
084d : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
084f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0851 : 28              >            plp         ;restore status
                        
                                set_a $fe,$ff
                       >            load_flag $ff
0852 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0854 : 48              >            pha         ;use stack to load status
0855 : a9fe            >            lda #$fe     ;precharge accu
0857 : 28              >            plp
                        
0858 : 68                       pla
                                tst_a 1,$ff-zero-minus
0859 : 08              >            php         ;save flags
085a : c901            >            cmp #1     ;test result
                       >            trap_ne
085c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
085e : 68              >            pla         ;load status
085f : 48              >            pha
                       >            cmp_flag $ff-zero-minus
0860 : 0908            >            ora #decmode        ;ignore decimal mode bit
0862 : c97d            >            cmp #($ff-zero-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0864 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0866 : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
0867 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0869 : 48              >            pha         ;use stack to load status
086a : a900            >            lda #0     ;precharge accu
086c : 28              >            plp
                        
086d : 68                       pla
                                tst_a $ff,minus
086e : 08              >            php         ;save flags
086f : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0871 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0873 : 68              >            pla         ;load status
0874 : 48              >            pha
                       >            cmp_flag minus
0875 : 0908            >            ora #decmode        ;ignore decimal mode bit
0877 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0879 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
087b : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
087c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
087e : 48              >            pha         ;use stack to load status
087f : a9ff            >            lda #$ff     ;precharge accu
0881 : 28              >            plp
                        
0882 : 68                       pla
                                tst_a 0,$ff-minus
0883 : 08              >            php         ;save flags
0884 : c900            >            cmp #0     ;test result
                       >            trap_ne
0886 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0888 : 68              >            pla         ;load status
0889 : 48              >            pha
                       >            cmp_flag $ff-minus
088a : 0908            >            ora #decmode        ;ignore decimal mode bit
088c : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
088e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0890 : 28              >            plp         ;restore status
                        
                                set_a $fe,0
                       >            load_flag 0
0891 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0893 : 48              >            pha         ;use stack to load status
0894 : a9fe            >            lda #$fe     ;precharge accu
0896 : 28              >            plp
                        
0897 : 68                       pla
                                tst_a 1,0
0898 : 08              >            php         ;save flags
0899 : c901            >            cmp #1     ;test result
                       >            trap_ne
089b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
089d : 68              >            pla         ;load status
089e : 48              >            pha
                       >            cmp_flag 0
089f : 0908            >            ora #decmode        ;ignore decimal mode bit
08a1 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
08a3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08a5 : 28              >            plp         ;restore status
                        
08a6 : e055                     cpx #$55        ;x & y unchanged?
                                trap_ne
08a8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
08aa : c0aa                     cpy #$aa
                                trap_ne
08ac : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
08ae : ad0002          >            lda test_case   ;previous test
08b1 : c905            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
08b3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0006 =                 >test_num = test_num + 1
08b5 : a906            >            lda #test_num   ;*** next tests' number
08b7 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; partial pretest EOR #
                                set_a $3c,0
                       >            load_flag 0
08ba : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
08bc : 48              >            pha         ;use stack to load status
08bd : a93c            >            lda #$3c     ;precharge accu
08bf : 28              >            plp
                        
08c0 : 49c3                     eor #$c3
                                tst_a $ff,fn
08c2 : 08              >            php         ;save flags
08c3 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
08c5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08c7 : 68              >            pla         ;load status
08c8 : 48              >            pha
                       >            cmp_flag fn
08c9 : 0908            >            ora #decmode        ;ignore decimal mode bit
08cb : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
08cd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08cf : 28              >            plp         ;restore status
                        
                                set_a $c3,0
                       >            load_flag 0
08d0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
08d2 : 48              >            pha         ;use stack to load status
08d3 : a9c3            >            lda #$c3     ;precharge accu
08d5 : 28              >            plp
                        
08d6 : 49c3                     eor #$c3
                                tst_a 0,fz
08d8 : 08              >            php         ;save flags
08d9 : c900            >            cmp #0     ;test result
                       >            trap_ne
08db : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08dd : 68              >            pla         ;load status
08de : 48              >            pha
                       >            cmp_flag fz
08df : 0908            >            ora #decmode        ;ignore decimal mode bit
08e1 : c93a            >            cmp #(fz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
08e3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08e5 : 28              >            plp         ;restore status
                        
                                next_test
08e6 : ad0002          >            lda test_case   ;previous test
08e9 : c906            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
08eb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0007 =                 >test_num = test_num + 1
08ed : a907            >            lda #test_num   ;*** next tests' number
08ef : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)
                        ; testing NOP
08f2 : a224                     ldx #$24
08f4 : a042                     ldy #$42
                                set_a $18,0
                       >            load_flag 0
08f6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
08f8 : 48              >            pha         ;use stack to load status
08f9 : a918            >            lda #$18     ;precharge accu
08fb : 28              >            plp
                        
08fc : ea                       nop
                                tst_a $18,0
08fd : 08              >            php         ;save flags
08fe : c918            >            cmp #$18     ;test result
                       >            trap_ne
0900 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0902 : 68              >            pla         ;load status
0903 : 48              >            pha
                       >            cmp_flag 0
0904 : 0908            >            ora #decmode        ;ignore decimal mode bit
0906 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0908 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
090a : 28              >            plp         ;restore status
                        
090b : e024                     cpx #$24
                                trap_ne
090d : d0fe            >        bne *           ;failed not equal (non zero)
                        
090f : c042                     cpy #$42
                                trap_ne
0911 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0913 : a2db                     ldx #$db
0915 : a0bd                     ldy #$bd
                                set_a $e7,$ff
                       >            load_flag $ff
0917 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0919 : 48              >            pha         ;use stack to load status
091a : a9e7            >            lda #$e7     ;precharge accu
091c : 28              >            plp
                        
091d : ea                       nop
                                tst_a $e7,$ff
091e : 08              >            php         ;save flags
091f : c9e7            >            cmp #$e7     ;test result
                       >            trap_ne
0921 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0923 : 68              >            pla         ;load status
0924 : 48              >            pha
                       >            cmp_flag $ff
0925 : 0908            >            ora #decmode        ;ignore decimal mode bit
0927 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0929 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
092b : 28              >            plp         ;restore status
                        
092c : e0db                     cpx #$db
                                trap_ne
092e : d0fe            >        bne *           ;failed not equal (non zero)
                        
0930 : c0bd                     cpy #$bd
                                trap_ne
0932 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
0934 : ad0002          >            lda test_case   ;previous test
0937 : c907            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0939 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0008 =                 >test_num = test_num + 1
093b : a908            >            lda #test_num   ;*** next tests' number
093d : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; jump absolute
                                set_stat $0
                       >            load_flag $0
0940 : a900            >            lda #$0             ;allow test to change I-flag (no mask)
                       >
0942 : 48              >            pha         ;use stack to load status
0943 : 28              >            plp
                        
0944 : a946                     lda #'F'
0946 : a241                     ldx #'A'
0948 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
094a : 4ce437                   jmp test_far
094d : ea                       nop
094e : ea                       nop
                                trap_ne         ;runover protection
094f : d0fe            >        bne *           ;failed not equal (non zero)
                        
0951 : e8                       inx
0952 : e8                       inx
0953 :                  far_ret 
                                trap_eq         ;returned flags OK?
0953 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
0955 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
0957 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
0959 : 50fe            >        bvc *           ;failed overflow clear
                        
095b : c9ec                     cmp #('F'^$aa)  ;returned registers OK?
                                trap_ne
095d : d0fe            >        bne *           ;failed not equal (non zero)
                        
095f : e042                     cpx #('A'+1)
                                trap_ne
0961 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0963 : c04f                     cpy #('R'-3)
                                trap_ne
0965 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0967 : ca                       dex
0968 : c8                       iny
0969 : c8                       iny
096a : c8                       iny
096b : 49aa                     eor #$aa        ;N=0, V=1, Z=0, C=1
096d : 4c7609                   jmp test_near
0970 : ea                       nop
0971 : ea                       nop
                                trap_ne         ;runover protection
0972 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0974 : e8                       inx
0975 : e8                       inx
0976 :                  test_near
                                trap_eq         ;passed flags OK?
0976 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_mi
0978 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_cc
097a : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
097c : 50fe            >        bvc *           ;failed overflow clear
                        
097e : c946                     cmp #'F'        ;passed registers OK?
                                trap_ne
0980 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0982 : e041                     cpx #'A'
                                trap_ne
0984 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0986 : c052                     cpy #'R'
                                trap_ne
0988 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
098a : ad0002          >            lda test_case   ;previous test
098d : c908            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
098f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0009 =                 >test_num = test_num + 1
0991 : a909            >            lda #test_num   ;*** next tests' number
0993 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; jump indirect
                                set_stat 0
                       >            load_flag 0
0996 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0998 : 48              >            pha         ;use stack to load status
0999 : 28              >            plp
                        
099a : a949                     lda #'I'
099c : a24e                     ldx #'N'
099e : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
09a0 : 6c1238                   jmp (ptr_tst_ind)
09a3 : ea                       nop
                                trap_ne         ;runover protection
09a4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
09a6 : 88                       dey
09a7 : 88                       dey
09a8 :                  ind_ret 
09a8 : 08                       php             ;either SP or Y count will fail, if we do not hit
09a9 : 88                       dey
09aa : 88                       dey
09ab : 88                       dey
09ac : 28                       plp
                                trap_eq         ;returned flags OK?
09ad : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
09af : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
09b1 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
09b3 : 50fe            >        bvc *           ;failed overflow clear
                        
09b5 : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
09b7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
09b9 : e04f                     cpx #('N'+1)
                                trap_ne
09bb : d0fe            >        bne *           ;failed not equal (non zero)
                        
09bd : c03e                     cpy #('D'-6)
                                trap_ne
09bf : d0fe            >        bne *           ;failed not equal (non zero)
                        
09c1 : ba                       tsx             ;SP check
09c2 : e0ff                     cpx #$ff
                                trap_ne
09c4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
09c6 : ad0002          >            lda test_case   ;previous test
09c9 : c909            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
09cb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000a =                 >test_num = test_num + 1
09cd : a90a            >            lda #test_num   ;*** next tests' number
09cf : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; jump subroutine & return from subroutine
                                set_stat 0
                       >            load_flag 0
09d2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
09d4 : 48              >            pha         ;use stack to load status
09d5 : 28              >            plp
                        
09d6 : a94a                     lda #'J'
09d8 : a253                     ldx #'S'
09da : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
09dc : 204e38                   jsr test_jsr
09de =                  jsr_ret = *-1           ;last address of jsr = return address
09df : 08                       php             ;either SP or Y count will fail, if we do not hit
09e0 : 88                       dey
09e1 : 88                       dey
09e2 : 88                       dey
09e3 : 28                       plp
                                trap_eq         ;returned flags OK?
09e4 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
09e6 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
09e8 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
09ea : 50fe            >        bvc *           ;failed overflow clear
                        
09ec : c9e0                     cmp #('J'^$aa)  ;returned registers OK?
                                trap_ne
09ee : d0fe            >        bne *           ;failed not equal (non zero)
                        
09f0 : e054                     cpx #('S'+1)
                                trap_ne
09f2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
09f4 : c04c                     cpy #('R'-6)
                                trap_ne
09f6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
09f8 : ba                       tsx             ;sp?
09f9 : e0ff                     cpx #$ff
                                trap_ne
09fb : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
09fd : ad0002          >            lda test_case   ;previous test
0a00 : c90a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0a02 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000b =                 >test_num = test_num + 1
0a04 : a90b            >            lda #test_num   ;*** next tests' number
0a06 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; break & return from interrupt
                            if ROM_vectors = 1
                                set_stat 0
                       >            load_flag 0
0a09 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0a0b : 48              >            pha         ;use stack to load status
0a0c : 28              >            plp
                        
0a0d : a942                     lda #'B'
0a0f : a252                     ldx #'R'
0a11 : a04b                     ldy #'K'        ;N=0, V=0, Z=0, C=0
0a13 : 00                       brk
                            else
                                lda #hi brk_ret ;emulated break
                                pha
                                lda #lo brk_ret
                                pha
                                lda #fao        ;set break & unused on stack
                                pha
                                set_stat intdis
                                lda #'B'
                                ldx #'R'
                                ldy #'K'        ;N=0, V=0, Z=0, C=0
                                jmp irq_trap
                            endif
0a14 : 88                       dey             ;should not be executed
0a15 :                  brk_ret                 ;address of break return
0a15 : 08                       php             ;either SP or Y count will fail, if we do not hit
0a16 : 88                       dey
0a17 : 88                       dey
0a18 : 88                       dey
0a19 : c9e8                     cmp #('B'^$aa)  ;returned registers OK?
                                trap_ne
0a1b : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a1d : e053                     cpx #('R'+1)
                                trap_ne
0a1f : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a21 : c045                     cpy #('K'-6)
                                trap_ne
0a23 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a25 : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag 0
0a26 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a28 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0a2a : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a2c : ba                       tsx             ;sp?
0a2d : e0ff                     cpx #$ff
                                trap_ne
0a2f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
0a31 : ad0002          >            lda test_case   ;previous test
0a34 : c90b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0a36 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000c =                 >test_num = test_num + 1
0a38 : a90c            >            lda #test_num   ;*** next tests' number
0a3a : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
                                set_stat $ff
                       >            load_flag $ff
0a3d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0a3f : 48              >            pha         ;use stack to load status
0a40 : 28              >            plp
                        
0a41 : 18                       clc
                                tst_stat $ff-carry
0a42 : 08              >            php         ;save status
0a43 : 68              >            pla         ;use stack to retrieve status
0a44 : 48              >            pha
                       >            cmp_flag $ff-carry
0a45 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a47 : c9fe            >            cmp #($ff-carry|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a49 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a4b : 28              >            plp         ;restore status
                        
0a4c : 38                       sec
                                tst_stat $ff
0a4d : 08              >            php         ;save status
0a4e : 68              >            pla         ;use stack to retrieve status
0a4f : 48              >            pha
                       >            cmp_flag $ff
0a50 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a52 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a54 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a56 : 28              >            plp         ;restore status
                        
                            if I_flag = 3
0a57 : 58                       cli
                                tst_stat $ff-intdis
0a58 : 08              >            php         ;save status
0a59 : 68              >            pla         ;use stack to retrieve status
0a5a : 48              >            pha
                       >            cmp_flag $ff-intdis
0a5b : 0908            >            ora #decmode        ;ignore decimal mode bit
0a5d : c9fb            >            cmp #($ff-intdis|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a5f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a61 : 28              >            plp         ;restore status
                        
0a62 : 78                       sei
                                tst_stat $ff
0a63 : 08              >            php         ;save status
0a64 : 68              >            pla         ;use stack to retrieve status
0a65 : 48              >            pha
                       >            cmp_flag $ff
0a66 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a68 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a6a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a6c : 28              >            plp         ;restore status
                        
                            endif
0a6d : d8                       cld
                                tst_stat $ff-decmode
0a6e : 08              >            php         ;save status
0a6f : 68              >            pla         ;use stack to retrieve status
0a70 : 48              >            pha
                       >            cmp_flag $ff-decmode
0a71 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a73 : c9ff            >            cmp #($ff-decmode|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a75 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a77 : 28              >            plp         ;restore status
                        
0a78 : f8                       sed
                                tst_stat $ff
0a79 : 08              >            php         ;save status
0a7a : 68              >            pla         ;use stack to retrieve status
0a7b : 48              >            pha
                       >            cmp_flag $ff
0a7c : 0908            >            ora #decmode        ;ignore decimal mode bit
0a7e : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a80 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a82 : 28              >            plp         ;restore status
                        
0a83 : b8                       clv
                                tst_stat $ff-overfl
0a84 : 08              >            php         ;save status
0a85 : 68              >            pla         ;use stack to retrieve status
0a86 : 48              >            pha
                       >            cmp_flag $ff-overfl
0a87 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a89 : c9bf            >            cmp #($ff-overfl|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a8b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a8d : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
0a8e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0a90 : 48              >            pha         ;use stack to load status
0a91 : 28              >            plp
                        
                                tst_stat 0
0a92 : 08              >            php         ;save status
0a93 : 68              >            pla         ;use stack to retrieve status
0a94 : 48              >            pha
                       >            cmp_flag 0
0a95 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a97 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a99 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a9b : 28              >            plp         ;restore status
                        
0a9c : 38                       sec
                                tst_stat carry
0a9d : 08              >            php         ;save status
0a9e : 68              >            pla         ;use stack to retrieve status
0a9f : 48              >            pha
                       >            cmp_flag carry
0aa0 : 0908            >            ora #decmode        ;ignore decimal mode bit
0aa2 : c939            >            cmp #(carry|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0aa4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0aa6 : 28              >            plp         ;restore status
                        
0aa7 : 18                       clc
                                tst_stat 0  
0aa8 : 08              >            php         ;save status
0aa9 : 68              >            pla         ;use stack to retrieve status
0aaa : 48              >            pha
                       >            cmp_flag 0  
0aab : 0908            >            ora #decmode        ;ignore decimal mode bit
0aad : c938            >            cmp #(0  |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0aaf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ab1 : 28              >            plp         ;restore status
                        
                            if I_flag = 3
0ab2 : 78                       sei
                                tst_stat intdis
0ab3 : 08              >            php         ;save status
0ab4 : 68              >            pla         ;use stack to retrieve status
0ab5 : 48              >            pha
                       >            cmp_flag intdis
0ab6 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ab8 : c93c            >            cmp #(intdis|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0aba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0abc : 28              >            plp         ;restore status
                        
0abd : 58                       cli
                                tst_stat 0
0abe : 08              >            php         ;save status
0abf : 68              >            pla         ;use stack to retrieve status
0ac0 : 48              >            pha
                       >            cmp_flag 0
0ac1 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ac3 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ac5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ac7 : 28              >            plp         ;restore status
                        
                            endif  
0ac8 : f8                       sed
                                tst_stat decmode
0ac9 : 08              >            php         ;save status
0aca : 68              >            pla         ;use stack to retrieve status
0acb : 48              >            pha
                       >            cmp_flag decmode
0acc : 0908            >            ora #decmode        ;ignore decimal mode bit
0ace : c938            >            cmp #(decmode|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ad0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ad2 : 28              >            plp         ;restore status
                        
0ad3 : d8                       cld
                                tst_stat 0  
0ad4 : 08              >            php         ;save status
0ad5 : 68              >            pla         ;use stack to retrieve status
0ad6 : 48              >            pha
                       >            cmp_flag 0  
0ad7 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ad9 : c938            >            cmp #(0  |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0adb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0add : 28              >            plp         ;restore status
                        
                                set_stat overfl
                       >            load_flag overfl
0ade : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
0ae0 : 48              >            pha         ;use stack to load status
0ae1 : 28              >            plp
                        
                                tst_stat overfl
0ae2 : 08              >            php         ;save status
0ae3 : 68              >            pla         ;use stack to retrieve status
0ae4 : 48              >            pha
                       >            cmp_flag overfl
0ae5 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ae7 : c978            >            cmp #(overfl|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ae9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0aeb : 28              >            plp         ;restore status
                        
0aec : b8                       clv
                                tst_stat 0
0aed : 08              >            php         ;save status
0aee : 68              >            pla         ;use stack to retrieve status
0aef : 48              >            pha
                       >            cmp_flag 0
0af0 : 0908            >            ora #decmode        ;ignore decimal mode bit
0af2 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0af4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0af6 : 28              >            plp         ;restore status
                        
                                next_test
0af7 : ad0002          >            lda test_case   ;previous test
0afa : c90c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0afc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000d =                 >test_num = test_num + 1
0afe : a90d            >            lda #test_num   ;*** next tests' number
0b00 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        ; testing index register increment/decrement and transfer
                        ; INX INY DEX DEY TAX TXA TAY TYA 
0b03 : a2fe                     ldx #$fe
                                set_stat $ff
                       >            load_flag $ff
0b05 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0b07 : 48              >            pha         ;use stack to load status
0b08 : 28              >            plp
                        
0b09 : e8                       inx             ;ff
                                tst_x $ff,$ff-zero
0b0a : 08              >            php         ;save flags
0b0b : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0b0d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b0f : 68              >            pla         ;load status
0b10 : 48              >            pha
                       >            cmp_flag $ff-zero
0b11 : 0908            >            ora #decmode        ;ignore decimal mode bit
0b13 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b15 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b17 : 28              >            plp         ;restore status
                        
0b18 : e8                       inx             ;00
                                tst_x 0,$ff-minus
0b19 : 08              >            php         ;save flags
0b1a : e000            >            cpx #0     ;test result
                       >            trap_ne
0b1c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b1e : 68              >            pla         ;load status
0b1f : 48              >            pha
                       >            cmp_flag $ff-minus
0b20 : 0908            >            ora #decmode        ;ignore decimal mode bit
0b22 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b24 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b26 : 28              >            plp         ;restore status
                        
0b27 : e8                       inx             ;01
                                tst_x 1,$ff-minus-zero
0b28 : 08              >            php         ;save flags
0b29 : e001            >            cpx #1     ;test result
                       >            trap_ne
0b2b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b2d : 68              >            pla         ;load status
0b2e : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0b2f : 0908            >            ora #decmode        ;ignore decimal mode bit
0b31 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b33 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b35 : 28              >            plp         ;restore status
                        
0b36 : ca                       dex             ;00
                                tst_x 0,$ff-minus
0b37 : 08              >            php         ;save flags
0b38 : e000            >            cpx #0     ;test result
                       >            trap_ne
0b3a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b3c : 68              >            pla         ;load status
0b3d : 48              >            pha
                       >            cmp_flag $ff-minus
0b3e : 0908            >            ora #decmode        ;ignore decimal mode bit
0b40 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b42 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b44 : 28              >            plp         ;restore status
                        
0b45 : ca                       dex             ;ff
                                tst_x $ff,$ff-zero
0b46 : 08              >            php         ;save flags
0b47 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0b49 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b4b : 68              >            pla         ;load status
0b4c : 48              >            pha
                       >            cmp_flag $ff-zero
0b4d : 0908            >            ora #decmode        ;ignore decimal mode bit
0b4f : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b51 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b53 : 28              >            plp         ;restore status
                        
0b54 : ca                       dex             ;fe
                                set_stat 0
                       >            load_flag 0
0b55 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0b57 : 48              >            pha         ;use stack to load status
0b58 : 28              >            plp
                        
0b59 : e8                       inx             ;ff
                                tst_x $ff,minus
0b5a : 08              >            php         ;save flags
0b5b : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0b5d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b5f : 68              >            pla         ;load status
0b60 : 48              >            pha
                       >            cmp_flag minus
0b61 : 0908            >            ora #decmode        ;ignore decimal mode bit
0b63 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b65 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b67 : 28              >            plp         ;restore status
                        
0b68 : e8                       inx             ;00
                                tst_x 0,zero
0b69 : 08              >            php         ;save flags
0b6a : e000            >            cpx #0     ;test result
                       >            trap_ne
0b6c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b6e : 68              >            pla         ;load status
0b6f : 48              >            pha
                       >            cmp_flag zero
0b70 : 0908            >            ora #decmode        ;ignore decimal mode bit
0b72 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b74 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b76 : 28              >            plp         ;restore status
                        
0b77 : e8                       inx             ;01
                                tst_x 1,0
0b78 : 08              >            php         ;save flags
0b79 : e001            >            cpx #1     ;test result
                       >            trap_ne
0b7b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b7d : 68              >            pla         ;load status
0b7e : 48              >            pha
                       >            cmp_flag 0
0b7f : 0908            >            ora #decmode        ;ignore decimal mode bit
0b81 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b83 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b85 : 28              >            plp         ;restore status
                        
0b86 : ca                       dex             ;00
                                tst_x 0,zero
0b87 : 08              >            php         ;save flags
0b88 : e000            >            cpx #0     ;test result
                       >            trap_ne
0b8a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b8c : 68              >            pla         ;load status
0b8d : 48              >            pha
                       >            cmp_flag zero
0b8e : 0908            >            ora #decmode        ;ignore decimal mode bit
0b90 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b92 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b94 : 28              >            plp         ;restore status
                        
0b95 : ca                       dex             ;ff
                                tst_x $ff,minus
0b96 : 08              >            php         ;save flags
0b97 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0b99 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b9b : 68              >            pla         ;load status
0b9c : 48              >            pha
                       >            cmp_flag minus
0b9d : 0908            >            ora #decmode        ;ignore decimal mode bit
0b9f : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ba1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ba3 : 28              >            plp         ;restore status
                        
                        
0ba4 : a0fe                     ldy #$fe
                                set_stat $ff
                       >            load_flag $ff
0ba6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0ba8 : 48              >            pha         ;use stack to load status
0ba9 : 28              >            plp
                        
0baa : c8                       iny             ;ff
                                tst_y $ff,$ff-zero
0bab : 08              >            php         ;save flags
0bac : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0bae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bb0 : 68              >            pla         ;load status
0bb1 : 48              >            pha
                       >            cmp_flag $ff-zero
0bb2 : 0908            >            ora #decmode        ;ignore decimal mode bit
0bb4 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0bb6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bb8 : 28              >            plp         ;restore status
                        
0bb9 : c8                       iny             ;00
                                tst_y 0,$ff-minus
0bba : 08              >            php         ;save flags
0bbb : c000            >            cpy #0     ;test result
                       >            trap_ne
0bbd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bbf : 68              >            pla         ;load status
0bc0 : 48              >            pha
                       >            cmp_flag $ff-minus
0bc1 : 0908            >            ora #decmode        ;ignore decimal mode bit
0bc3 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0bc5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bc7 : 28              >            plp         ;restore status
                        
0bc8 : c8                       iny             ;01
                                tst_y 1,$ff-minus-zero
0bc9 : 08              >            php         ;save flags
0bca : c001            >            cpy #1     ;test result
                       >            trap_ne
0bcc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bce : 68              >            pla         ;load status
0bcf : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0bd0 : 0908            >            ora #decmode        ;ignore decimal mode bit
0bd2 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0bd4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bd6 : 28              >            plp         ;restore status
                        
0bd7 : 88                       dey             ;00
                                tst_y 0,$ff-minus
0bd8 : 08              >            php         ;save flags
0bd9 : c000            >            cpy #0     ;test result
                       >            trap_ne
0bdb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bdd : 68              >            pla         ;load status
0bde : 48              >            pha
                       >            cmp_flag $ff-minus
0bdf : 0908            >            ora #decmode        ;ignore decimal mode bit
0be1 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0be3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0be5 : 28              >            plp         ;restore status
                        
0be6 : 88                       dey             ;ff
                                tst_y $ff,$ff-zero
0be7 : 08              >            php         ;save flags
0be8 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0bea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bec : 68              >            pla         ;load status
0bed : 48              >            pha
                       >            cmp_flag $ff-zero
0bee : 0908            >            ora #decmode        ;ignore decimal mode bit
0bf0 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0bf2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bf4 : 28              >            plp         ;restore status
                        
0bf5 : 88                       dey             ;fe
                                set_stat 0
                       >            load_flag 0
0bf6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0bf8 : 48              >            pha         ;use stack to load status
0bf9 : 28              >            plp
                        
0bfa : c8                       iny             ;ff
                                tst_y $ff,0+minus
0bfb : 08              >            php         ;save flags
0bfc : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0bfe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c00 : 68              >            pla         ;load status
0c01 : 48              >            pha
                       >            cmp_flag 0+minus
0c02 : 0908            >            ora #decmode        ;ignore decimal mode bit
0c04 : c9b8            >            cmp #(0+minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c06 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c08 : 28              >            plp         ;restore status
                        
0c09 : c8                       iny             ;00
                                tst_y 0,zero
0c0a : 08              >            php         ;save flags
0c0b : c000            >            cpy #0     ;test result
                       >            trap_ne
0c0d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c0f : 68              >            pla         ;load status
0c10 : 48              >            pha
                       >            cmp_flag zero
0c11 : 0908            >            ora #decmode        ;ignore decimal mode bit
0c13 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c15 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c17 : 28              >            plp         ;restore status
                        
0c18 : c8                       iny             ;01
                                tst_y 1,0
0c19 : 08              >            php         ;save flags
0c1a : c001            >            cpy #1     ;test result
                       >            trap_ne
0c1c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c1e : 68              >            pla         ;load status
0c1f : 48              >            pha
                       >            cmp_flag 0
0c20 : 0908            >            ora #decmode        ;ignore decimal mode bit
0c22 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c24 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c26 : 28              >            plp         ;restore status
                        
0c27 : 88                       dey             ;00
                                tst_y 0,zero
0c28 : 08              >            php         ;save flags
0c29 : c000            >            cpy #0     ;test result
                       >            trap_ne
0c2b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c2d : 68              >            pla         ;load status
0c2e : 48              >            pha
                       >            cmp_flag zero
0c2f : 0908            >            ora #decmode        ;ignore decimal mode bit
0c31 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c33 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c35 : 28              >            plp         ;restore status
                        
0c36 : 88                       dey             ;ff
                                tst_y $ff,minus
0c37 : 08              >            php         ;save flags
0c38 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0c3a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c3c : 68              >            pla         ;load status
0c3d : 48              >            pha
                       >            cmp_flag minus
0c3e : 0908            >            ora #decmode        ;ignore decimal mode bit
0c40 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c42 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c44 : 28              >            plp         ;restore status
                        
                                        
0c45 : a2ff                     ldx #$ff
                                set_stat $ff
                       >            load_flag $ff
0c47 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0c49 : 48              >            pha         ;use stack to load status
0c4a : 28              >            plp
                        
0c4b : 8a                       txa
                                tst_a $ff,$ff-zero
0c4c : 08              >            php         ;save flags
0c4d : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0c4f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c51 : 68              >            pla         ;load status
0c52 : 48              >            pha
                       >            cmp_flag $ff-zero
0c53 : 0908            >            ora #decmode        ;ignore decimal mode bit
0c55 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c57 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c59 : 28              >            plp         ;restore status
                        
0c5a : 08                       php
0c5b : e8                       inx             ;00
0c5c : 28                       plp
0c5d : 8a                       txa
                                tst_a 0,$ff-minus
0c5e : 08              >            php         ;save flags
0c5f : c900            >            cmp #0     ;test result
                       >            trap_ne
0c61 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c63 : 68              >            pla         ;load status
0c64 : 48              >            pha
                       >            cmp_flag $ff-minus
0c65 : 0908            >            ora #decmode        ;ignore decimal mode bit
0c67 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c69 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c6b : 28              >            plp         ;restore status
                        
0c6c : 08                       php
0c6d : e8                       inx             ;01
0c6e : 28                       plp
0c6f : 8a                       txa
                                tst_a 1,$ff-minus-zero
0c70 : 08              >            php         ;save flags
0c71 : c901            >            cmp #1     ;test result
                       >            trap_ne
0c73 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c75 : 68              >            pla         ;load status
0c76 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0c77 : 0908            >            ora #decmode        ;ignore decimal mode bit
0c79 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c7b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c7d : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
0c7e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0c80 : 48              >            pha         ;use stack to load status
0c81 : 28              >            plp
                        
0c82 : 8a                       txa
                                tst_a 1,0
0c83 : 08              >            php         ;save flags
0c84 : c901            >            cmp #1     ;test result
                       >            trap_ne
0c86 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c88 : 68              >            pla         ;load status
0c89 : 48              >            pha
                       >            cmp_flag 0
0c8a : 0908            >            ora #decmode        ;ignore decimal mode bit
0c8c : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c8e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c90 : 28              >            plp         ;restore status
                        
0c91 : 08                       php
0c92 : ca                       dex             ;00
0c93 : 28                       plp
0c94 : 8a                       txa
                                tst_a 0,zero
0c95 : 08              >            php         ;save flags
0c96 : c900            >            cmp #0     ;test result
                       >            trap_ne
0c98 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c9a : 68              >            pla         ;load status
0c9b : 48              >            pha
                       >            cmp_flag zero
0c9c : 0908            >            ora #decmode        ;ignore decimal mode bit
0c9e : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ca0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ca2 : 28              >            plp         ;restore status
                        
0ca3 : 08                       php
0ca4 : ca                       dex             ;ff
0ca5 : 28                       plp
0ca6 : 8a                       txa
                                tst_a $ff,minus
0ca7 : 08              >            php         ;save flags
0ca8 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0caa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cac : 68              >            pla         ;load status
0cad : 48              >            pha
                       >            cmp_flag minus
0cae : 0908            >            ora #decmode        ;ignore decimal mode bit
0cb0 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0cb2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cb4 : 28              >            plp         ;restore status
                        
                                                
0cb5 : a0ff                     ldy #$ff
                                set_stat $ff
                       >            load_flag $ff
0cb7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0cb9 : 48              >            pha         ;use stack to load status
0cba : 28              >            plp
                        
0cbb : 98                       tya
                                tst_a $ff,$ff-zero
0cbc : 08              >            php         ;save flags
0cbd : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0cbf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cc1 : 68              >            pla         ;load status
0cc2 : 48              >            pha
                       >            cmp_flag $ff-zero
0cc3 : 0908            >            ora #decmode        ;ignore decimal mode bit
0cc5 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0cc7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cc9 : 28              >            plp         ;restore status
                        
0cca : 08                       php
0ccb : c8                       iny             ;00
0ccc : 28                       plp
0ccd : 98                       tya
                                tst_a 0,$ff-minus
0cce : 08              >            php         ;save flags
0ccf : c900            >            cmp #0     ;test result
                       >            trap_ne
0cd1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cd3 : 68              >            pla         ;load status
0cd4 : 48              >            pha
                       >            cmp_flag $ff-minus
0cd5 : 0908            >            ora #decmode        ;ignore decimal mode bit
0cd7 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0cd9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cdb : 28              >            plp         ;restore status
                        
0cdc : 08                       php
0cdd : c8                       iny             ;01
0cde : 28                       plp
0cdf : 98                       tya
                                tst_a 1,$ff-minus-zero
0ce0 : 08              >            php         ;save flags
0ce1 : c901            >            cmp #1     ;test result
                       >            trap_ne
0ce3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ce5 : 68              >            pla         ;load status
0ce6 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0ce7 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ce9 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ceb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ced : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
0cee : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0cf0 : 48              >            pha         ;use stack to load status
0cf1 : 28              >            plp
                        
0cf2 : 98                       tya
                                tst_a 1,0
0cf3 : 08              >            php         ;save flags
0cf4 : c901            >            cmp #1     ;test result
                       >            trap_ne
0cf6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cf8 : 68              >            pla         ;load status
0cf9 : 48              >            pha
                       >            cmp_flag 0
0cfa : 0908            >            ora #decmode        ;ignore decimal mode bit
0cfc : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0cfe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d00 : 28              >            plp         ;restore status
                        
0d01 : 08                       php
0d02 : 88                       dey             ;00
0d03 : 28                       plp
0d04 : 98                       tya
                                tst_a 0,zero
0d05 : 08              >            php         ;save flags
0d06 : c900            >            cmp #0     ;test result
                       >            trap_ne
0d08 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d0a : 68              >            pla         ;load status
0d0b : 48              >            pha
                       >            cmp_flag zero
0d0c : 0908            >            ora #decmode        ;ignore decimal mode bit
0d0e : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d10 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d12 : 28              >            plp         ;restore status
                        
0d13 : 08                       php
0d14 : 88                       dey             ;ff
0d15 : 28                       plp
0d16 : 98                       tya
                                tst_a $ff,minus
0d17 : 08              >            php         ;save flags
0d18 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0d1a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d1c : 68              >            pla         ;load status
0d1d : 48              >            pha
                       >            cmp_flag minus
0d1e : 0908            >            ora #decmode        ;ignore decimal mode bit
0d20 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d22 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d24 : 28              >            plp         ;restore status
                        
                        
                                load_flag $ff
0d25 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
0d27 : 48                       pha
0d28 : a2ff                     ldx #$ff        ;ff
0d2a : 8a                       txa
0d2b : 28                       plp             
0d2c : a8                       tay
                                tst_y $ff,$ff-zero
0d2d : 08              >            php         ;save flags
0d2e : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0d30 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d32 : 68              >            pla         ;load status
0d33 : 48              >            pha
                       >            cmp_flag $ff-zero
0d34 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d36 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d38 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d3a : 28              >            plp         ;restore status
                        
0d3b : 08                       php
0d3c : e8                       inx             ;00
0d3d : 8a                       txa
0d3e : 28                       plp
0d3f : a8                       tay
                                tst_y 0,$ff-minus
0d40 : 08              >            php         ;save flags
0d41 : c000            >            cpy #0     ;test result
                       >            trap_ne
0d43 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d45 : 68              >            pla         ;load status
0d46 : 48              >            pha
                       >            cmp_flag $ff-minus
0d47 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d49 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d4b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d4d : 28              >            plp         ;restore status
                        
0d4e : 08                       php
0d4f : e8                       inx             ;01
0d50 : 8a                       txa
0d51 : 28                       plp
0d52 : a8                       tay
                                tst_y 1,$ff-minus-zero
0d53 : 08              >            php         ;save flags
0d54 : c001            >            cpy #1     ;test result
                       >            trap_ne
0d56 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d58 : 68              >            pla         ;load status
0d59 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0d5a : 0908            >            ora #decmode        ;ignore decimal mode bit
0d5c : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d5e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d60 : 28              >            plp         ;restore status
                        
                                load_flag 0
0d61 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
0d63 : 48                       pha
0d64 : a900                     lda #0
0d66 : 8a                       txa
0d67 : 28                       plp
0d68 : a8                       tay
                                tst_y 1,0
0d69 : 08              >            php         ;save flags
0d6a : c001            >            cpy #1     ;test result
                       >            trap_ne
0d6c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d6e : 68              >            pla         ;load status
0d6f : 48              >            pha
                       >            cmp_flag 0
0d70 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d72 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d74 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d76 : 28              >            plp         ;restore status
                        
0d77 : 08                       php
0d78 : ca                       dex             ;00
0d79 : 8a                       txa
0d7a : 28                       plp
0d7b : a8                       tay
                                tst_y 0,zero
0d7c : 08              >            php         ;save flags
0d7d : c000            >            cpy #0     ;test result
                       >            trap_ne
0d7f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d81 : 68              >            pla         ;load status
0d82 : 48              >            pha
                       >            cmp_flag zero
0d83 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d85 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d87 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d89 : 28              >            plp         ;restore status
                        
0d8a : 08                       php
0d8b : ca                       dex             ;ff
0d8c : 8a                       txa
0d8d : 28                       plp
0d8e : a8                       tay
                                tst_y $ff,minus
0d8f : 08              >            php         ;save flags
0d90 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0d92 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d94 : 68              >            pla         ;load status
0d95 : 48              >            pha
                       >            cmp_flag minus
0d96 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d98 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d9a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d9c : 28              >            plp         ;restore status
                        
                        
                        
                                load_flag $ff
0d9d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
0d9f : 48                       pha
0da0 : a0ff                     ldy #$ff        ;ff
0da2 : 98                       tya
0da3 : 28                       plp
0da4 : aa                       tax
                                tst_x $ff,$ff-zero
0da5 : 08              >            php         ;save flags
0da6 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0da8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0daa : 68              >            pla         ;load status
0dab : 48              >            pha
                       >            cmp_flag $ff-zero
0dac : 0908            >            ora #decmode        ;ignore decimal mode bit
0dae : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0db0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0db2 : 28              >            plp         ;restore status
                        
0db3 : 08                       php
0db4 : c8                       iny             ;00
0db5 : 98                       tya
0db6 : 28                       plp
0db7 : aa                       tax
                                tst_x 0,$ff-minus
0db8 : 08              >            php         ;save flags
0db9 : e000            >            cpx #0     ;test result
                       >            trap_ne
0dbb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0dbd : 68              >            pla         ;load status
0dbe : 48              >            pha
                       >            cmp_flag $ff-minus
0dbf : 0908            >            ora #decmode        ;ignore decimal mode bit
0dc1 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0dc3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0dc5 : 28              >            plp         ;restore status
                        
0dc6 : 08                       php
0dc7 : c8                       iny             ;01
0dc8 : 98                       tya
0dc9 : 28                       plp
0dca : aa                       tax
                                tst_x 1,$ff-minus-zero
0dcb : 08              >            php         ;save flags
0dcc : e001            >            cpx #1     ;test result
                       >            trap_ne
0dce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0dd0 : 68              >            pla         ;load status
0dd1 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0dd2 : 0908            >            ora #decmode        ;ignore decimal mode bit
0dd4 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0dd6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0dd8 : 28              >            plp         ;restore status
                        
                                load_flag 0
0dd9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
0ddb : 48                       pha
0ddc : a900                     lda #0          ;preset status
0dde : 98                       tya
0ddf : 28                       plp
0de0 : aa                       tax
                                tst_x 1,0
0de1 : 08              >            php         ;save flags
0de2 : e001            >            cpx #1     ;test result
                       >            trap_ne
0de4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0de6 : 68              >            pla         ;load status
0de7 : 48              >            pha
                       >            cmp_flag 0
0de8 : 0908            >            ora #decmode        ;ignore decimal mode bit
0dea : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0dec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0dee : 28              >            plp         ;restore status
                        
0def : 08                       php
0df0 : 88                       dey             ;00
0df1 : 98                       tya
0df2 : 28                       plp
0df3 : aa                       tax
                                tst_x 0,zero
0df4 : 08              >            php         ;save flags
0df5 : e000            >            cpx #0     ;test result
                       >            trap_ne
0df7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0df9 : 68              >            pla         ;load status
0dfa : 48              >            pha
                       >            cmp_flag zero
0dfb : 0908            >            ora #decmode        ;ignore decimal mode bit
0dfd : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0dff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0e01 : 28              >            plp         ;restore status
                        
0e02 : 08                       php
0e03 : 88                       dey             ;ff
0e04 : 98                       tya
0e05 : 28                       plp
0e06 : aa                       tax
                                tst_x $ff,minus
0e07 : 08              >            php         ;save flags
0e08 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0e0a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0e0c : 68              >            pla         ;load status
0e0d : 48              >            pha
                       >            cmp_flag minus
0e0e : 0908            >            ora #decmode        ;ignore decimal mode bit
0e10 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0e12 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0e14 : 28              >            plp         ;restore status
                        
                                next_test
0e15 : ad0002          >            lda test_case   ;previous test
0e18 : c90d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0e1a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000e =                 >test_num = test_num + 1
0e1c : a90e            >            lda #test_num   ;*** next tests' number
0e1e : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                             
                        ;TSX sets NZ - TXS does not
                        ;  This section also tests for proper stack wrap around.
0e21 : a201                     ldx #1          ;01
                                set_stat $ff
                       >            load_flag $ff
0e23 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e25 : 48              >            pha         ;use stack to load status
0e26 : 28              >            plp
                        
0e27 : 9a                       txs
0e28 : 08                       php
0e29 : ad0101                   lda $101
                                cmp_flag $ff
0e2c : 0908            >            ora #decmode        ;ignore decimal mode bit
0e2e : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e30 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0e32 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0e34 : 48              >            pha         ;use stack to load status
0e35 : 28              >            plp
                        
0e36 : 9a                       txs
0e37 : 08                       php
0e38 : ad0101                   lda $101
                                cmp_flag 0
0e3b : 0908            >            ora #decmode        ;ignore decimal mode bit
0e3d : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e3f : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e41 : ca                       dex             ;00
                                set_stat $ff
                       >            load_flag $ff
0e42 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e44 : 48              >            pha         ;use stack to load status
0e45 : 28              >            plp
                        
0e46 : 9a                       txs
0e47 : 08                       php
0e48 : ad0001                   lda $100
                                cmp_flag $ff
0e4b : 0908            >            ora #decmode        ;ignore decimal mode bit
0e4d : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e4f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0e51 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0e53 : 48              >            pha         ;use stack to load status
0e54 : 28              >            plp
                        
0e55 : 9a                       txs
0e56 : 08                       php
0e57 : ad0001                   lda $100
                                cmp_flag 0
0e5a : 0908            >            ora #decmode        ;ignore decimal mode bit
0e5c : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e5e : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e60 : ca                       dex             ;ff
                                set_stat $ff
                       >            load_flag $ff
0e61 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e63 : 48              >            pha         ;use stack to load status
0e64 : 28              >            plp
                        
0e65 : 9a                       txs
0e66 : 08                       php
0e67 : adff01                   lda $1ff
                                cmp_flag $ff
0e6a : 0908            >            ora #decmode        ;ignore decimal mode bit
0e6c : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e6e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0e70 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0e72 : 48              >            pha         ;use stack to load status
0e73 : 28              >            plp
                        
0e74 : 9a                       txs
0e75 : 08                       php
0e76 : adff01                   lda $1ff
                                cmp_flag 0
0e79 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e7b : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                
0e7d : a201                     ldx #1
0e7f : 9a                       txs             ;sp=01
                                set_stat $ff
                       >            load_flag $ff
0e80 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e82 : 48              >            pha         ;use stack to load status
0e83 : 28              >            plp
                        
0e84 : ba                       tsx             ;clears Z, N
0e85 : 08                       php             ;sp=00
0e86 : e001                     cpx #1
                                trap_ne
0e88 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e8a : ad0101                   lda $101
                                cmp_flag $ff-minus-zero
0e8d : 0908            >            ora #decmode        ;ignore decimal mode bit
0e8f : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e91 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
0e93 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e95 : 48              >            pha         ;use stack to load status
0e96 : 28              >            plp
                        
0e97 : ba                       tsx             ;clears N, sets Z
0e98 : 08                       php             ;sp=ff
0e99 : e000                     cpx #0
                                trap_ne
0e9b : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e9d : ad0001                   lda $100
                                cmp_flag $ff-minus
0ea0 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ea2 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0ea4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
0ea6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0ea8 : 48              >            pha         ;use stack to load status
0ea9 : 28              >            plp
                        
0eaa : ba                       tsx             ;clears N, sets Z
0eab : 08                       php             ;sp=fe
0eac : e0ff                     cpx #$ff
                                trap_ne
0eae : d0fe            >        bne *           ;failed not equal (non zero)
                        
0eb0 : adff01                   lda $1ff
                                cmp_flag $ff-zero
0eb3 : 0908            >            ora #decmode        ;ignore decimal mode bit
0eb5 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0eb7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
0eb9 : a201                     ldx #1
0ebb : 9a                       txs             ;sp=01
                                set_stat 0
                       >            load_flag 0
0ebc : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0ebe : 48              >            pha         ;use stack to load status
0ebf : 28              >            plp
                        
0ec0 : ba                       tsx             ;clears Z, N
0ec1 : 08                       php             ;sp=00
0ec2 : e001                     cpx #1
                                trap_ne
0ec4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ec6 : ad0101                   lda $101
                                cmp_flag 0
0ec9 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ecb : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0ecd : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0ecf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0ed1 : 48              >            pha         ;use stack to load status
0ed2 : 28              >            plp
                        
0ed3 : ba                       tsx             ;clears N, sets Z
0ed4 : 08                       php             ;sp=ff
0ed5 : e000                     cpx #0
                                trap_ne
0ed7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ed9 : ad0001                   lda $100
                                cmp_flag zero
0edc : 0908            >            ora #decmode        ;ignore decimal mode bit
0ede : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0ee0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0ee2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0ee4 : 48              >            pha         ;use stack to load status
0ee5 : 28              >            plp
                        
0ee6 : ba                       tsx             ;clears N, sets Z
0ee7 : 08                       php             ;sp=fe
0ee8 : e0ff                     cpx #$ff
                                trap_ne
0eea : d0fe            >        bne *           ;failed not equal (non zero)
                        
0eec : adff01                   lda $1ff
                                cmp_flag minus
0eef : 0908            >            ora #decmode        ;ignore decimal mode bit
0ef1 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0ef3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ef5 : 68                       pla             ;sp=ff
                                next_test
0ef6 : ad0002          >            lda test_case   ;previous test
0ef9 : c90e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0efb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000f =                 >test_num = test_num + 1
0efd : a90f            >            lda #test_num   ;*** next tests' number
0eff : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; testing index register load & store LDY LDX STY STX all addressing modes
                        ; LDX / STX - zp,y / abs,y
0f02 : a003                     ldy #3
0f04 :                  tldx    
                                set_stat 0
                       >            load_flag 0
0f04 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0f06 : 48              >            pha         ;use stack to load status
0f07 : 28              >            plp
                        
0f08 : b613                     ldx zp1,y
0f0a : 08                       php         ;test stores do not alter flags
0f0b : 8a                       txa
0f0c : 49c3                     eor #$c3
0f0e : 28                       plp
0f0f : 990302                   sta abst,y
0f12 : 08                       php         ;flags after load/store sequence
0f13 : 49c3                     eor #$c3
0f15 : d91702                   cmp abs1,y  ;test result
                                trap_ne
0f18 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f1a : 68                       pla         ;load status
                                eor_flag 0
0f1b : 0908            >            ora #decmode        ;ignore decimal mode bit
0f1d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
0f1f : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
0f22 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f24 : 88                       dey
0f25 : 10dd                     bpl tldx                  
                        
0f27 : a003                     ldy #3
0f29 :                  tldx1   
                                set_stat $ff
                       >            load_flag $ff
0f29 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0f2b : 48              >            pha         ;use stack to load status
0f2c : 28              >            plp
                        
0f2d : b613                     ldx zp1,y
0f2f : 08                       php         ;test stores do not alter flags
0f30 : 8a                       txa
0f31 : 49c3                     eor #$c3
0f33 : 28                       plp
0f34 : 990302                   sta abst,y
0f37 : 08                       php         ;flags after load/store sequence
0f38 : 49c3                     eor #$c3
0f3a : d91702                   cmp abs1,y  ;test result
                                trap_ne
0f3d : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f3f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
0f40 : 0908            >            ora #decmode        ;ignore decimal mode bit
0f42 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
0f44 : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
0f47 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f49 : 88                       dey
0f4a : 10dd                     bpl tldx1                  
                        
0f4c : a003                     ldy #3
0f4e :                  tldx2   
                                set_stat 0
                       >            load_flag 0
0f4e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0f50 : 48              >            pha         ;use stack to load status
0f51 : 28              >            plp
                        
0f52 : be1702                   ldx abs1,y
0f55 : 08                       php         ;test stores do not alter flags
0f56 : 8a                       txa
0f57 : 49c3                     eor #$c3
0f59 : aa                       tax
0f5a : 28                       plp
0f5b : 960c                     stx zpt,y
0f5d : 08                       php         ;flags after load/store sequence
0f5e : 49c3                     eor #$c3
0f60 : d91300                   cmp zp1,y   ;test result
                                trap_ne
0f63 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f65 : 68                       pla         ;load status
                                eor_flag 0
0f66 : 0908            >            ora #decmode        ;ignore decimal mode bit
0f68 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
0f6a : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
0f6d : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f6f : 88                       dey
0f70 : 10dc                     bpl tldx2                  
                        
0f72 : a003                     ldy #3
0f74 :                  tldx3   
                                set_stat $ff
                       >            load_flag $ff
0f74 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0f76 : 48              >            pha         ;use stack to load status
0f77 : 28              >            plp
                        
0f78 : be1702                   ldx abs1,y
0f7b : 08                       php         ;test stores do not alter flags
0f7c : 8a                       txa
0f7d : 49c3                     eor #$c3
0f7f : aa                       tax
0f80 : 28                       plp
0f81 : 960c                     stx zpt,y
0f83 : 08                       php         ;flags after load/store sequence
0f84 : 49c3                     eor #$c3
0f86 : d91300                   cmp zp1,y   ;test result
                                trap_ne
0f89 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f8b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
0f8c : 0908            >            ora #decmode        ;ignore decimal mode bit
0f8e : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
0f90 : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
0f93 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f95 : 88                       dey
0f96 : 10dc                     bpl tldx3
                                
0f98 : a003                     ldy #3      ;testing store result
0f9a : a200                     ldx #0
0f9c : b90c00           tstx    lda zpt,y
0f9f : 49c3                     eor #$c3
0fa1 : d91300                   cmp zp1,y
                                trap_ne     ;store to zp data
0fa4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0fa6 : 960c                     stx zpt,y   ;clear                
0fa8 : b90302                   lda abst,y
0fab : 49c3                     eor #$c3
0fad : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
0fb0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0fb2 : 8a                       txa
0fb3 : 990302                   sta abst,y  ;clear                
0fb6 : 88                       dey
0fb7 : 10e3                     bpl tstx
                                next_test
0fb9 : ad0002          >            lda test_case   ;previous test
0fbc : c90f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0fbe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0010 =                 >test_num = test_num + 1
0fc0 : a910            >            lda #test_num   ;*** next tests' number
0fc2 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; indexed wraparound test (only zp should wrap)
0fc5 : a0fd                     ldy #3+$fa
0fc7 : b619             tldx4   ldx zp1-$fa&$ff,y   ;wrap on indexed zp
0fc9 : 8a                       txa
0fca : 990901                   sta abst-$fa,y      ;no STX abs,y!
0fcd : 88                       dey
0fce : c0fa                     cpy #$fa
0fd0 : b0f5                     bcs tldx4                  
0fd2 : a0fd                     ldy #3+$fa
0fd4 : be1d01           tldx5   ldx abs1-$fa,y      ;no wrap on indexed abs
0fd7 : 9612                     stx zpt-$fa&$ff,y
0fd9 : 88                       dey
0fda : c0fa                     cpy #$fa
0fdc : b0f6                     bcs tldx5                  
0fde : a003                     ldy #3      ;testing wraparound result
0fe0 : a200                     ldx #0
0fe2 : b90c00           tstx1   lda zpt,y
0fe5 : d91300                   cmp zp1,y
                                trap_ne     ;store to zp data
0fe8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0fea : 960c                     stx zpt,y   ;clear                
0fec : b90302                   lda abst,y
0fef : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
0ff2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ff4 : 8a                       txa
0ff5 : 990302                   sta abst,y  ;clear                
0ff8 : 88                       dey
0ff9 : 10e7                     bpl tstx1
                                next_test
0ffb : ad0002          >            lda test_case   ;previous test
0ffe : c910            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1000 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0011 =                 >test_num = test_num + 1
1002 : a911            >            lda #test_num   ;*** next tests' number
1004 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; LDY / STY - zp,x / abs,x
1007 : a203                     ldx #3
1009 :                  tldy    
                                set_stat 0
                       >            load_flag 0
1009 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
100b : 48              >            pha         ;use stack to load status
100c : 28              >            plp
                        
100d : b413                     ldy zp1,x
100f : 08                       php         ;test stores do not alter flags
1010 : 98                       tya
1011 : 49c3                     eor #$c3
1013 : 28                       plp
1014 : 9d0302                   sta abst,x
1017 : 08                       php         ;flags after load/store sequence
1018 : 49c3                     eor #$c3
101a : dd1702                   cmp abs1,x  ;test result
                                trap_ne
101d : d0fe            >        bne *           ;failed not equal (non zero)
                        
101f : 68                       pla         ;load status
                                eor_flag 0
1020 : 0908            >            ora #decmode        ;ignore decimal mode bit
1022 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1024 : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
1027 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1029 : ca                       dex
102a : 10dd                     bpl tldy                  
                        
102c : a203                     ldx #3
102e :                  tldy1   
                                set_stat $ff
                       >            load_flag $ff
102e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1030 : 48              >            pha         ;use stack to load status
1031 : 28              >            plp
                        
1032 : b413                     ldy zp1,x
1034 : 08                       php         ;test stores do not alter flags
1035 : 98                       tya
1036 : 49c3                     eor #$c3
1038 : 28                       plp
1039 : 9d0302                   sta abst,x
103c : 08                       php         ;flags after load/store sequence
103d : 49c3                     eor #$c3
103f : dd1702                   cmp abs1,x  ;test result
                                trap_ne
1042 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1044 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1045 : 0908            >            ora #decmode        ;ignore decimal mode bit
1047 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1049 : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
104c : d0fe            >        bne *           ;failed not equal (non zero)
                        
104e : ca                       dex
104f : 10dd                     bpl tldy1                  
                        
1051 : a203                     ldx #3
1053 :                  tldy2   
                                set_stat 0
                       >            load_flag 0
1053 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1055 : 48              >            pha         ;use stack to load status
1056 : 28              >            plp
                        
1057 : bc1702                   ldy abs1,x
105a : 08                       php         ;test stores do not alter flags
105b : 98                       tya
105c : 49c3                     eor #$c3
105e : a8                       tay
105f : 28                       plp
1060 : 940c                     sty zpt,x
1062 : 08                       php         ;flags after load/store sequence
1063 : 49c3                     eor #$c3
1065 : d513                     cmp zp1,x   ;test result
                                trap_ne
1067 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1069 : 68                       pla         ;load status
                                eor_flag 0
106a : 0908            >            ora #decmode        ;ignore decimal mode bit
106c : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
106e : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
1071 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1073 : ca                       dex
1074 : 10dd                     bpl tldy2                  
                        
1076 : a203                     ldx #3
1078 :                  tldy3
                                set_stat $ff
                       >            load_flag $ff
1078 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
107a : 48              >            pha         ;use stack to load status
107b : 28              >            plp
                        
107c : bc1702                   ldy abs1,x
107f : 08                       php         ;test stores do not alter flags
1080 : 98                       tya
1081 : 49c3                     eor #$c3
1083 : a8                       tay
1084 : 28                       plp
1085 : 940c                     sty zpt,x
1087 : 08                       php         ;flags after load/store sequence
1088 : 49c3                     eor #$c3
108a : d513                     cmp zp1,x   ;test result
                                trap_ne
108c : d0fe            >        bne *           ;failed not equal (non zero)
                        
108e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
108f : 0908            >            ora #decmode        ;ignore decimal mode bit
1091 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1093 : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
1096 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1098 : ca                       dex
1099 : 10dd                     bpl tldy3
                        
109b : a203                     ldx #3      ;testing store result
109d : a000                     ldy #0
109f : b50c             tsty    lda zpt,x
10a1 : 49c3                     eor #$c3
10a3 : d513                     cmp zp1,x
                                trap_ne     ;store to zp,x data
10a5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
10a7 : 940c                     sty zpt,x   ;clear                
10a9 : bd0302                   lda abst,x
10ac : 49c3                     eor #$c3
10ae : dd1702                   cmp abs1,x
                                trap_ne     ;store to abs,x data
10b1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
10b3 : 8a                       txa
10b4 : 9d0302                   sta abst,x  ;clear                
10b7 : ca                       dex
10b8 : 10e5                     bpl tsty
                                next_test
10ba : ad0002          >            lda test_case   ;previous test
10bd : c911            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
10bf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0012 =                 >test_num = test_num + 1
10c1 : a912            >            lda #test_num   ;*** next tests' number
10c3 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
10c6 : a2fd                     ldx #3+$fa
10c8 : b419             tldy4   ldy zp1-$fa&$ff,x   ;wrap on indexed zp
10ca : 98                       tya
10cb : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
10ce : ca                       dex
10cf : e0fa                     cpx #$fa
10d1 : b0f5                     bcs tldy4                  
10d3 : a2fd                     ldx #3+$fa
10d5 : bc1d01           tldy5   ldy abs1-$fa,x      ;no wrap on indexed abs
10d8 : 9412                     sty zpt-$fa&$ff,x
10da : ca                       dex
10db : e0fa                     cpx #$fa
10dd : b0f6                     bcs tldy5                  
10df : a203                     ldx #3      ;testing wraparound result
10e1 : a000                     ldy #0
10e3 : b50c             tsty1   lda zpt,x
10e5 : d513                     cmp zp1,x
                                trap_ne     ;store to zp,x data
10e7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
10e9 : 940c                     sty zpt,x   ;clear                
10eb : bd0302                   lda abst,x
10ee : dd1702                   cmp abs1,x
                                trap_ne     ;store to abs,x data
10f1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
10f3 : 8a                       txa
10f4 : 9d0302                   sta abst,x  ;clear                
10f7 : ca                       dex
10f8 : 10e9                     bpl tsty1
                                next_test
10fa : ad0002          >            lda test_case   ;previous test
10fd : c912            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
10ff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0013 =                 >test_num = test_num + 1
1101 : a913            >            lda #test_num   ;*** next tests' number
1103 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDX / STX - zp / abs / #
                                set_stat 0  
                       >            load_flag 0  
1106 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
1108 : 48              >            pha         ;use stack to load status
1109 : 28              >            plp
                        
110a : a613                     ldx zp1
110c : 08                       php         ;test stores do not alter flags
110d : 8a                       txa
110e : 49c3                     eor #$c3
1110 : aa                       tax
1111 : 28                       plp
1112 : 8e0302                   stx abst
1115 : 08                       php         ;flags after load/store sequence
1116 : 49c3                     eor #$c3
1118 : aa                       tax
1119 : e0c3                     cpx #$c3    ;test result
                                trap_ne
111b : d0fe            >        bne *           ;failed not equal (non zero)
                        
111d : 68                       pla         ;load status
                                eor_flag 0
111e : 0908            >            ora #decmode        ;ignore decimal mode bit
1120 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1122 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
1125 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1127 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1129 : 48              >            pha         ;use stack to load status
112a : 28              >            plp
                        
112b : a614                     ldx zp1+1
112d : 08                       php         ;test stores do not alter flags
112e : 8a                       txa
112f : 49c3                     eor #$c3
1131 : aa                       tax
1132 : 28                       plp
1133 : 8e0402                   stx abst+1
1136 : 08                       php         ;flags after load/store sequence
1137 : 49c3                     eor #$c3
1139 : aa                       tax
113a : e082                     cpx #$82    ;test result
                                trap_ne
113c : d0fe            >        bne *           ;failed not equal (non zero)
                        
113e : 68                       pla         ;load status
                                eor_flag 0
113f : 0908            >            ora #decmode        ;ignore decimal mode bit
1141 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1143 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
1146 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1148 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
114a : 48              >            pha         ;use stack to load status
114b : 28              >            plp
                        
114c : a615                     ldx zp1+2
114e : 08                       php         ;test stores do not alter flags
114f : 8a                       txa
1150 : 49c3                     eor #$c3
1152 : aa                       tax
1153 : 28                       plp
1154 : 8e0502                   stx abst+2
1157 : 08                       php         ;flags after load/store sequence
1158 : 49c3                     eor #$c3
115a : aa                       tax
115b : e041                     cpx #$41    ;test result
                                trap_ne
115d : d0fe            >        bne *           ;failed not equal (non zero)
                        
115f : 68                       pla         ;load status
                                eor_flag 0
1160 : 0908            >            ora #decmode        ;ignore decimal mode bit
1162 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1164 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
1167 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1169 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
116b : 48              >            pha         ;use stack to load status
116c : 28              >            plp
                        
116d : a616                     ldx zp1+3
116f : 08                       php         ;test stores do not alter flags
1170 : 8a                       txa
1171 : 49c3                     eor #$c3
1173 : aa                       tax
1174 : 28                       plp
1175 : 8e0602                   stx abst+3
1178 : 08                       php         ;flags after load/store sequence
1179 : 49c3                     eor #$c3
117b : aa                       tax
117c : e000                     cpx #0      ;test result
                                trap_ne
117e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1180 : 68                       pla         ;load status
                                eor_flag 0
1181 : 0908            >            ora #decmode        ;ignore decimal mode bit
1183 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1185 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
1188 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
118a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
118c : 48              >            pha         ;use stack to load status
118d : 28              >            plp
                        
118e : a613                     ldx zp1  
1190 : 08                       php         ;test stores do not alter flags
1191 : 8a                       txa
1192 : 49c3                     eor #$c3
1194 : aa                       tax
1195 : 28                       plp
1196 : 8e0302                   stx abst  
1199 : 08                       php         ;flags after load/store sequence
119a : 49c3                     eor #$c3
119c : aa                       tax
119d : e0c3                     cpx #$c3    ;test result
                                trap_ne     ;
119f : d0fe            >        bne *           ;failed not equal (non zero)
                        
11a1 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
11a2 : 0908            >            ora #decmode        ;ignore decimal mode bit
11a4 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
11a6 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
11a9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
11ab : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
11ad : 48              >            pha         ;use stack to load status
11ae : 28              >            plp
                        
11af : a614                     ldx zp1+1
11b1 : 08                       php         ;test stores do not alter flags
11b2 : 8a                       txa
11b3 : 49c3                     eor #$c3
11b5 : aa                       tax
11b6 : 28                       plp
11b7 : 8e0402                   stx abst+1
11ba : 08                       php         ;flags after load/store sequence
11bb : 49c3                     eor #$c3
11bd : aa                       tax
11be : e082                     cpx #$82    ;test result
                                trap_ne
11c0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
11c2 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
11c3 : 0908            >            ora #decmode        ;ignore decimal mode bit
11c5 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
11c7 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
11ca : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
11cc : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
11ce : 48              >            pha         ;use stack to load status
11cf : 28              >            plp
                        
11d0 : a615                     ldx zp1+2
11d2 : 08                       php         ;test stores do not alter flags
11d3 : 8a                       txa
11d4 : 49c3                     eor #$c3
11d6 : aa                       tax
11d7 : 28                       plp
11d8 : 8e0502                   stx abst+2
11db : 08                       php         ;flags after load/store sequence
11dc : 49c3                     eor #$c3
11de : aa                       tax
11df : e041                     cpx #$41    ;test result
                                trap_ne     ;
11e1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
11e3 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
11e4 : 0908            >            ora #decmode        ;ignore decimal mode bit
11e6 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
11e8 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
11eb : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
11ed : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
11ef : 48              >            pha         ;use stack to load status
11f0 : 28              >            plp
                        
11f1 : a616                     ldx zp1+3
11f3 : 08                       php         ;test stores do not alter flags
11f4 : 8a                       txa
11f5 : 49c3                     eor #$c3
11f7 : aa                       tax
11f8 : 28                       plp
11f9 : 8e0602                   stx abst+3
11fc : 08                       php         ;flags after load/store sequence
11fd : 49c3                     eor #$c3
11ff : aa                       tax
1200 : e000                     cpx #0      ;test result
                                trap_ne
1202 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1204 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1205 : 0908            >            ora #decmode        ;ignore decimal mode bit
1207 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1209 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
120c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat 0
                       >            load_flag 0
120e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1210 : 48              >            pha         ;use stack to load status
1211 : 28              >            plp
                        
1212 : ae1702                   ldx abs1  
1215 : 08                       php         ;test stores do not alter flags
1216 : 8a                       txa
1217 : 49c3                     eor #$c3
1219 : aa                       tax
121a : 28                       plp
121b : 860c                     stx zpt  
121d : 08                       php         ;flags after load/store sequence
121e : 49c3                     eor #$c3
1220 : c513                     cmp zp1     ;test result
                                trap_ne
1222 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1224 : 68                       pla         ;load status
                                eor_flag 0
1225 : 0908            >            ora #decmode        ;ignore decimal mode bit
1227 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1229 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
122c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
122e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1230 : 48              >            pha         ;use stack to load status
1231 : 28              >            plp
                        
1232 : ae1802                   ldx abs1+1
1235 : 08                       php         ;test stores do not alter flags
1236 : 8a                       txa
1237 : 49c3                     eor #$c3
1239 : aa                       tax
123a : 28                       plp
123b : 860d                     stx zpt+1
123d : 08                       php         ;flags after load/store sequence
123e : 49c3                     eor #$c3
1240 : c514                     cmp zp1+1   ;test result
                                trap_ne
1242 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1244 : 68                       pla         ;load status
                                eor_flag 0
1245 : 0908            >            ora #decmode        ;ignore decimal mode bit
1247 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1249 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
124c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
124e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1250 : 48              >            pha         ;use stack to load status
1251 : 28              >            plp
                        
1252 : ae1902                   ldx abs1+2
1255 : 08                       php         ;test stores do not alter flags
1256 : 8a                       txa
1257 : 49c3                     eor #$c3
1259 : aa                       tax
125a : 28                       plp
125b : 860e                     stx zpt+2
125d : 08                       php         ;flags after load/store sequence
125e : 49c3                     eor #$c3
1260 : c515                     cmp zp1+2   ;test result
                                trap_ne
1262 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1264 : 68                       pla         ;load status
                                eor_flag 0
1265 : 0908            >            ora #decmode        ;ignore decimal mode bit
1267 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1269 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
126c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
126e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1270 : 48              >            pha         ;use stack to load status
1271 : 28              >            plp
                        
1272 : ae1a02                   ldx abs1+3
1275 : 08                       php         ;test stores do not alter flags
1276 : 8a                       txa
1277 : 49c3                     eor #$c3
1279 : aa                       tax
127a : 28                       plp
127b : 860f                     stx zpt+3
127d : 08                       php         ;flags after load/store sequence
127e : 49c3                     eor #$c3
1280 : c516                     cmp zp1+3   ;test result
                                trap_ne
1282 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1284 : 68                       pla         ;load status
                                eor_flag 0
1285 : 0908            >            ora #decmode        ;ignore decimal mode bit
1287 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1289 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
128c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
128e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1290 : 48              >            pha         ;use stack to load status
1291 : 28              >            plp
                        
1292 : ae1702                   ldx abs1  
1295 : 08                       php         ;test stores do not alter flags
1296 : 8a                       txa
1297 : 49c3                     eor #$c3
1299 : aa                       tax
129a : 28                       plp
129b : 860c                     stx zpt  
129d : 08                       php         ;flags after load/store sequence
129e : 49c3                     eor #$c3
12a0 : aa                       tax
12a1 : e413                     cpx zp1     ;test result
                                trap_ne
12a3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
12a5 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
12a6 : 0908            >            ora #decmode        ;ignore decimal mode bit
12a8 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
12aa : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
12ad : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
12af : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
12b1 : 48              >            pha         ;use stack to load status
12b2 : 28              >            plp
                        
12b3 : ae1802                   ldx abs1+1
12b6 : 08                       php         ;test stores do not alter flags
12b7 : 8a                       txa
12b8 : 49c3                     eor #$c3
12ba : aa                       tax
12bb : 28                       plp
12bc : 860d                     stx zpt+1
12be : 08                       php         ;flags after load/store sequence
12bf : 49c3                     eor #$c3
12c1 : aa                       tax
12c2 : e414                     cpx zp1+1   ;test result
                                trap_ne
12c4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
12c6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
12c7 : 0908            >            ora #decmode        ;ignore decimal mode bit
12c9 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
12cb : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
12ce : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
12d0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
12d2 : 48              >            pha         ;use stack to load status
12d3 : 28              >            plp
                        
12d4 : ae1902                   ldx abs1+2
12d7 : 08                       php         ;test stores do not alter flags
12d8 : 8a                       txa
12d9 : 49c3                     eor #$c3
12db : aa                       tax
12dc : 28                       plp
12dd : 860e                     stx zpt+2
12df : 08                       php         ;flags after load/store sequence
12e0 : 49c3                     eor #$c3
12e2 : aa                       tax
12e3 : e415                     cpx zp1+2   ;test result
                                trap_ne
12e5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
12e7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
12e8 : 0908            >            ora #decmode        ;ignore decimal mode bit
12ea : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
12ec : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
12ef : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
12f1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
12f3 : 48              >            pha         ;use stack to load status
12f4 : 28              >            plp
                        
12f5 : ae1a02                   ldx abs1+3
12f8 : 08                       php         ;test stores do not alter flags
12f9 : 8a                       txa
12fa : 49c3                     eor #$c3
12fc : aa                       tax
12fd : 28                       plp
12fe : 860f                     stx zpt+3
1300 : 08                       php         ;flags after load/store sequence
1301 : 49c3                     eor #$c3
1303 : aa                       tax
1304 : e416                     cpx zp1+3   ;test result
                                trap_ne
1306 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1308 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1309 : 0908            >            ora #decmode        ;ignore decimal mode bit
130b : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
130d : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
1310 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat 0  
                       >            load_flag 0  
1312 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
1314 : 48              >            pha         ;use stack to load status
1315 : 28              >            plp
                        
1316 : a2c3                     ldx #$c3
1318 : 08                       php
1319 : ec1702                   cpx abs1    ;test result
                                trap_ne
131c : d0fe            >        bne *           ;failed not equal (non zero)
                        
131e : 68                       pla         ;load status
                                eor_flag 0
131f : 0908            >            ora #decmode        ;ignore decimal mode bit
1321 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1323 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
1326 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1328 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
132a : 48              >            pha         ;use stack to load status
132b : 28              >            plp
                        
132c : a282                     ldx #$82
132e : 08                       php
132f : ec1802                   cpx abs1+1  ;test result
                                trap_ne
1332 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1334 : 68                       pla         ;load status
                                eor_flag 0
1335 : 0908            >            ora #decmode        ;ignore decimal mode bit
1337 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1339 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
133c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
133e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1340 : 48              >            pha         ;use stack to load status
1341 : 28              >            plp
                        
1342 : a241                     ldx #$41
1344 : 08                       php
1345 : ec1902                   cpx abs1+2  ;test result
                                trap_ne
1348 : d0fe            >        bne *           ;failed not equal (non zero)
                        
134a : 68                       pla         ;load status
                                eor_flag 0
134b : 0908            >            ora #decmode        ;ignore decimal mode bit
134d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
134f : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
1352 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1354 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1356 : 48              >            pha         ;use stack to load status
1357 : 28              >            plp
                        
1358 : a200                     ldx #0
135a : 08                       php
135b : ec1a02                   cpx abs1+3  ;test result
                                trap_ne
135e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1360 : 68                       pla         ;load status
                                eor_flag 0
1361 : 0908            >            ora #decmode        ;ignore decimal mode bit
1363 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1365 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
1368 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
136a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
136c : 48              >            pha         ;use stack to load status
136d : 28              >            plp
                        
136e : a2c3                     ldx #$c3  
1370 : 08                       php
1371 : ec1702                   cpx abs1    ;test result
                                trap_ne
1374 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1376 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1377 : 0908            >            ora #decmode        ;ignore decimal mode bit
1379 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
137b : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
137e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1380 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1382 : 48              >            pha         ;use stack to load status
1383 : 28              >            plp
                        
1384 : a282                     ldx #$82
1386 : 08                       php
1387 : ec1802                   cpx abs1+1  ;test result
                                trap_ne
138a : d0fe            >        bne *           ;failed not equal (non zero)
                        
138c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
138d : 0908            >            ora #decmode        ;ignore decimal mode bit
138f : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1391 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
1394 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1396 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1398 : 48              >            pha         ;use stack to load status
1399 : 28              >            plp
                        
139a : a241                     ldx #$41
139c : 08                       php
139d : ec1902                   cpx abs1+2  ;test result
                                trap_ne
13a0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13a2 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
13a3 : 0908            >            ora #decmode        ;ignore decimal mode bit
13a5 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
13a7 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
13aa : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
13ac : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
13ae : 48              >            pha         ;use stack to load status
13af : 28              >            plp
                        
13b0 : a200                     ldx #0
13b2 : 08                       php
13b3 : ec1a02                   cpx abs1+3  ;test result
                                trap_ne
13b6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13b8 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
13b9 : 0908            >            ora #decmode        ;ignore decimal mode bit
13bb : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
13bd : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
13c0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
13c2 : a200                     ldx #0
13c4 : a50c                     lda zpt  
13c6 : 49c3                     eor #$c3
13c8 : c513                     cmp zp1  
                                trap_ne     ;store to zp data
13ca : d0fe            >        bne *           ;failed not equal (non zero)
                        
13cc : 860c                     stx zpt     ;clear                
13ce : ad0302                   lda abst  
13d1 : 49c3                     eor #$c3
13d3 : cd1702                   cmp abs1  
                                trap_ne     ;store to abs data
13d6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13d8 : 8e0302                   stx abst    ;clear                
13db : a50d                     lda zpt+1
13dd : 49c3                     eor #$c3
13df : c514                     cmp zp1+1
                                trap_ne     ;store to zp data
13e1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13e3 : 860d                     stx zpt+1   ;clear                
13e5 : ad0402                   lda abst+1
13e8 : 49c3                     eor #$c3
13ea : cd1802                   cmp abs1+1
                                trap_ne     ;store to abs data
13ed : d0fe            >        bne *           ;failed not equal (non zero)
                        
13ef : 8e0402                   stx abst+1  ;clear                
13f2 : a50e                     lda zpt+2
13f4 : 49c3                     eor #$c3
13f6 : c515                     cmp zp1+2
                                trap_ne     ;store to zp data
13f8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13fa : 860e                     stx zpt+2   ;clear                
13fc : ad0502                   lda abst+2
13ff : 49c3                     eor #$c3
1401 : cd1902                   cmp abs1+2
                                trap_ne     ;store to abs data
1404 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1406 : 8e0502                   stx abst+2  ;clear                
1409 : a50f                     lda zpt+3
140b : 49c3                     eor #$c3
140d : c516                     cmp zp1+3
                                trap_ne     ;store to zp data
140f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1411 : 860f                     stx zpt+3   ;clear                
1413 : ad0602                   lda abst+3
1416 : 49c3                     eor #$c3
1418 : cd1a02                   cmp abs1+3
                                trap_ne     ;store to abs data
141b : d0fe            >        bne *           ;failed not equal (non zero)
                        
141d : 8e0602                   stx abst+3  ;clear                
                                next_test
1420 : ad0002          >            lda test_case   ;previous test
1423 : c913            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1425 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0014 =                 >test_num = test_num + 1
1427 : a914            >            lda #test_num   ;*** next tests' number
1429 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDY / STY - zp / abs / #
                                set_stat 0
                       >            load_flag 0
142c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
142e : 48              >            pha         ;use stack to load status
142f : 28              >            plp
                        
1430 : a413                     ldy zp1  
1432 : 08                       php         ;test stores do not alter flags
1433 : 98                       tya
1434 : 49c3                     eor #$c3
1436 : a8                       tay
1437 : 28                       plp
1438 : 8c0302                   sty abst  
143b : 08                       php         ;flags after load/store sequence
143c : 49c3                     eor #$c3
143e : a8                       tay
143f : c0c3                     cpy #$c3    ;test result
                                trap_ne
1441 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1443 : 68                       pla         ;load status
                                eor_flag 0
1444 : 0908            >            ora #decmode        ;ignore decimal mode bit
1446 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1448 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
144b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
144d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
144f : 48              >            pha         ;use stack to load status
1450 : 28              >            plp
                        
1451 : a414                     ldy zp1+1
1453 : 08                       php         ;test stores do not alter flags
1454 : 98                       tya
1455 : 49c3                     eor #$c3
1457 : a8                       tay
1458 : 28                       plp
1459 : 8c0402                   sty abst+1
145c : 08                       php         ;flags after load/store sequence
145d : 49c3                     eor #$c3
145f : a8                       tay
1460 : c082                     cpy #$82    ;test result
                                trap_ne
1462 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1464 : 68                       pla         ;load status
                                eor_flag 0
1465 : 0908            >            ora #decmode        ;ignore decimal mode bit
1467 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1469 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
146c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
146e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1470 : 48              >            pha         ;use stack to load status
1471 : 28              >            plp
                        
1472 : a415                     ldy zp1+2
1474 : 08                       php         ;test stores do not alter flags
1475 : 98                       tya
1476 : 49c3                     eor #$c3
1478 : a8                       tay
1479 : 28                       plp
147a : 8c0502                   sty abst+2
147d : 08                       php         ;flags after load/store sequence
147e : 49c3                     eor #$c3
1480 : a8                       tay
1481 : c041                     cpy #$41    ;test result
                                trap_ne
1483 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1485 : 68                       pla         ;load status
                                eor_flag 0
1486 : 0908            >            ora #decmode        ;ignore decimal mode bit
1488 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
148a : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
148d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
148f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1491 : 48              >            pha         ;use stack to load status
1492 : 28              >            plp
                        
1493 : a416                     ldy zp1+3
1495 : 08                       php         ;test stores do not alter flags
1496 : 98                       tya
1497 : 49c3                     eor #$c3
1499 : a8                       tay
149a : 28                       plp
149b : 8c0602                   sty abst+3
149e : 08                       php         ;flags after load/store sequence
149f : 49c3                     eor #$c3
14a1 : a8                       tay
14a2 : c000                     cpy #0      ;test result
                                trap_ne
14a4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
14a6 : 68                       pla         ;load status
                                eor_flag 0
14a7 : 0908            >            ora #decmode        ;ignore decimal mode bit
14a9 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
14ab : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
14ae : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
14b0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
14b2 : 48              >            pha         ;use stack to load status
14b3 : 28              >            plp
                        
14b4 : a413                     ldy zp1  
14b6 : 08                       php         ;test stores do not alter flags
14b7 : 98                       tya
14b8 : 49c3                     eor #$c3
14ba : a8                       tay
14bb : 28                       plp
14bc : 8c0302                   sty abst  
14bf : 08                       php         ;flags after load/store sequence
14c0 : 49c3                     eor #$c3
14c2 : a8                       tay
14c3 : c0c3                     cpy #$c3    ;test result
                                trap_ne
14c5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
14c7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
14c8 : 0908            >            ora #decmode        ;ignore decimal mode bit
14ca : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
14cc : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
14cf : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
14d1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
14d3 : 48              >            pha         ;use stack to load status
14d4 : 28              >            plp
                        
14d5 : a414                     ldy zp1+1
14d7 : 08                       php         ;test stores do not alter flags
14d8 : 98                       tya
14d9 : 49c3                     eor #$c3
14db : a8                       tay
14dc : 28                       plp
14dd : 8c0402                   sty abst+1
14e0 : 08                       php         ;flags after load/store sequence
14e1 : 49c3                     eor #$c3
14e3 : a8                       tay
14e4 : c082                     cpy #$82   ;test result
                                trap_ne
14e6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
14e8 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
14e9 : 0908            >            ora #decmode        ;ignore decimal mode bit
14eb : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
14ed : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
14f0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
14f2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
14f4 : 48              >            pha         ;use stack to load status
14f5 : 28              >            plp
                        
14f6 : a415                     ldy zp1+2
14f8 : 08                       php         ;test stores do not alter flags
14f9 : 98                       tya
14fa : 49c3                     eor #$c3
14fc : a8                       tay
14fd : 28                       plp
14fe : 8c0502                   sty abst+2
1501 : 08                       php         ;flags after load/store sequence
1502 : 49c3                     eor #$c3
1504 : a8                       tay
1505 : c041                     cpy #$41    ;test result
                                trap_ne
1507 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1509 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
150a : 0908            >            ora #decmode        ;ignore decimal mode bit
150c : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
150e : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
1511 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1513 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1515 : 48              >            pha         ;use stack to load status
1516 : 28              >            plp
                        
1517 : a416                     ldy zp1+3
1519 : 08                       php         ;test stores do not alter flags
151a : 98                       tya
151b : 49c3                     eor #$c3
151d : a8                       tay
151e : 28                       plp
151f : 8c0602                   sty abst+3
1522 : 08                       php         ;flags after load/store sequence
1523 : 49c3                     eor #$c3
1525 : a8                       tay
1526 : c000                     cpy #0      ;test result
                                trap_ne
1528 : d0fe            >        bne *           ;failed not equal (non zero)
                        
152a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
152b : 0908            >            ora #decmode        ;ignore decimal mode bit
152d : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
152f : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
1532 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
                                set_stat 0
                       >            load_flag 0
1534 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1536 : 48              >            pha         ;use stack to load status
1537 : 28              >            plp
                        
1538 : ac1702                   ldy abs1  
153b : 08                       php         ;test stores do not alter flags
153c : 98                       tya
153d : 49c3                     eor #$c3
153f : a8                       tay
1540 : 28                       plp
1541 : 840c                     sty zpt  
1543 : 08                       php         ;flags after load/store sequence
1544 : 49c3                     eor #$c3
1546 : a8                       tay
1547 : c413                     cpy zp1     ;test result
                                trap_ne
1549 : d0fe            >        bne *           ;failed not equal (non zero)
                        
154b : 68                       pla         ;load status
                                eor_flag 0
154c : 0908            >            ora #decmode        ;ignore decimal mode bit
154e : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1550 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
1553 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1555 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1557 : 48              >            pha         ;use stack to load status
1558 : 28              >            plp
                        
1559 : ac1802                   ldy abs1+1
155c : 08                       php         ;test stores do not alter flags
155d : 98                       tya
155e : 49c3                     eor #$c3
1560 : a8                       tay
1561 : 28                       plp
1562 : 840d                     sty zpt+1
1564 : 08                       php         ;flags after load/store sequence
1565 : 49c3                     eor #$c3
1567 : a8                       tay
1568 : c414                     cpy zp1+1   ;test result
                                trap_ne
156a : d0fe            >        bne *           ;failed not equal (non zero)
                        
156c : 68                       pla         ;load status
                                eor_flag 0
156d : 0908            >            ora #decmode        ;ignore decimal mode bit
156f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1571 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
1574 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1576 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1578 : 48              >            pha         ;use stack to load status
1579 : 28              >            plp
                        
157a : ac1902                   ldy abs1+2
157d : 08                       php         ;test stores do not alter flags
157e : 98                       tya
157f : 49c3                     eor #$c3
1581 : a8                       tay
1582 : 28                       plp
1583 : 840e                     sty zpt+2
1585 : 08                       php         ;flags after load/store sequence
1586 : 49c3                     eor #$c3
1588 : a8                       tay
1589 : c415                     cpy zp1+2   ;test result
                                trap_ne
158b : d0fe            >        bne *           ;failed not equal (non zero)
                        
158d : 68                       pla         ;load status
                                eor_flag 0
158e : 0908            >            ora #decmode        ;ignore decimal mode bit
1590 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1592 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
1595 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1597 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1599 : 48              >            pha         ;use stack to load status
159a : 28              >            plp
                        
159b : ac1a02                   ldy abs1+3
159e : 08                       php         ;test stores do not alter flags
159f : 98                       tya
15a0 : 49c3                     eor #$c3
15a2 : a8                       tay
15a3 : 28                       plp
15a4 : 840f                     sty zpt+3
15a6 : 08                       php         ;flags after load/store sequence
15a7 : 49c3                     eor #$c3
15a9 : a8                       tay
15aa : c416                     cpy zp1+3   ;test result
                                trap_ne
15ac : d0fe            >        bne *           ;failed not equal (non zero)
                        
15ae : 68                       pla         ;load status
                                eor_flag 0
15af : 0908            >            ora #decmode        ;ignore decimal mode bit
15b1 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
15b3 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
15b6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
15b8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
15ba : 48              >            pha         ;use stack to load status
15bb : 28              >            plp
                        
15bc : ac1702                   ldy abs1  
15bf : 08                       php         ;test stores do not alter flags
15c0 : 98                       tya
15c1 : 49c3                     eor #$c3
15c3 : a8                       tay
15c4 : 28                       plp
15c5 : 840c                     sty zpt  
15c7 : 08                       php         ;flags after load/store sequence
15c8 : 49c3                     eor #$c3
15ca : a8                       tay
15cb : c513                     cmp zp1     ;test result
                                trap_ne
15cd : d0fe            >        bne *           ;failed not equal (non zero)
                        
15cf : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
15d0 : 0908            >            ora #decmode        ;ignore decimal mode bit
15d2 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
15d4 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
15d7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
15d9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
15db : 48              >            pha         ;use stack to load status
15dc : 28              >            plp
                        
15dd : ac1802                   ldy abs1+1
15e0 : 08                       php         ;test stores do not alter flags
15e1 : 98                       tya
15e2 : 49c3                     eor #$c3
15e4 : a8                       tay
15e5 : 28                       plp
15e6 : 840d                     sty zpt+1
15e8 : 08                       php         ;flags after load/store sequence
15e9 : 49c3                     eor #$c3
15eb : a8                       tay
15ec : c514                     cmp zp1+1   ;test result
                                trap_ne
15ee : d0fe            >        bne *           ;failed not equal (non zero)
                        
15f0 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
15f1 : 0908            >            ora #decmode        ;ignore decimal mode bit
15f3 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
15f5 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
15f8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
15fa : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
15fc : 48              >            pha         ;use stack to load status
15fd : 28              >            plp
                        
15fe : ac1902                   ldy abs1+2
1601 : 08                       php         ;test stores do not alter flags
1602 : 98                       tya
1603 : 49c3                     eor #$c3
1605 : a8                       tay
1606 : 28                       plp
1607 : 840e                     sty zpt+2
1609 : 08                       php         ;flags after load/store sequence
160a : 49c3                     eor #$c3
160c : a8                       tay
160d : c515                     cmp zp1+2   ;test result
                                trap_ne
160f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1611 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1612 : 0908            >            ora #decmode        ;ignore decimal mode bit
1614 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1616 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
1619 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
161b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
161d : 48              >            pha         ;use stack to load status
161e : 28              >            plp
                        
161f : ac1a02                   ldy abs1+3
1622 : 08                       php         ;test stores do not alter flags
1623 : 98                       tya
1624 : 49c3                     eor #$c3
1626 : a8                       tay
1627 : 28                       plp
1628 : 840f                     sty zpt+3
162a : 08                       php         ;flags after load/store sequence
162b : 49c3                     eor #$c3
162d : a8                       tay
162e : c516                     cmp zp1+3   ;test result
                                trap_ne
1630 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1632 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1633 : 0908            >            ora #decmode        ;ignore decimal mode bit
1635 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1637 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
163a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                        
                                set_stat 0
                       >            load_flag 0
163c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
163e : 48              >            pha         ;use stack to load status
163f : 28              >            plp
                        
1640 : a0c3                     ldy #$c3  
1642 : 08                       php
1643 : cc1702                   cpy abs1    ;test result
                                trap_ne
1646 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1648 : 68                       pla         ;load status
                                eor_flag 0
1649 : 0908            >            ora #decmode        ;ignore decimal mode bit
164b : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
164d : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
1650 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1652 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1654 : 48              >            pha         ;use stack to load status
1655 : 28              >            plp
                        
1656 : a082                     ldy #$82
1658 : 08                       php
1659 : cc1802                   cpy abs1+1  ;test result
                                trap_ne
165c : d0fe            >        bne *           ;failed not equal (non zero)
                        
165e : 68                       pla         ;load status
                                eor_flag 0
165f : 0908            >            ora #decmode        ;ignore decimal mode bit
1661 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1663 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
1666 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1668 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
166a : 48              >            pha         ;use stack to load status
166b : 28              >            plp
                        
166c : a041                     ldy #$41
166e : 08                       php
166f : cc1902                   cpy abs1+2  ;test result
                                trap_ne
1672 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1674 : 68                       pla         ;load status
                                eor_flag 0
1675 : 0908            >            ora #decmode        ;ignore decimal mode bit
1677 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1679 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
167c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
167e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1680 : 48              >            pha         ;use stack to load status
1681 : 28              >            plp
                        
1682 : a000                     ldy #0
1684 : 08                       php
1685 : cc1a02                   cpy abs1+3  ;test result
                                trap_ne
1688 : d0fe            >        bne *           ;failed not equal (non zero)
                        
168a : 68                       pla         ;load status
                                eor_flag 0
168b : 0908            >            ora #decmode        ;ignore decimal mode bit
168d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
168f : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
1692 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1694 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1696 : 48              >            pha         ;use stack to load status
1697 : 28              >            plp
                        
1698 : a0c3                     ldy #$c3  
169a : 08                       php
169b : cc1702                   cpy abs1    ;test result
                                trap_ne
169e : d0fe            >        bne *           ;failed not equal (non zero)
                        
16a0 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
16a1 : 0908            >            ora #decmode        ;ignore decimal mode bit
16a3 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
16a5 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
16a8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
16aa : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
16ac : 48              >            pha         ;use stack to load status
16ad : 28              >            plp
                        
16ae : a082                     ldy #$82
16b0 : 08                       php
16b1 : cc1802                   cpy abs1+1  ;test result
                                trap_ne
16b4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
16b6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
16b7 : 0908            >            ora #decmode        ;ignore decimal mode bit
16b9 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
16bb : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
16be : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
16c0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
16c2 : 48              >            pha         ;use stack to load status
16c3 : 28              >            plp
                        
16c4 : a041                     ldy #$41
16c6 : 08                       php
16c7 : cc1902                   cpy abs1+2   ;test result
                                trap_ne
16ca : d0fe            >        bne *           ;failed not equal (non zero)
                        
16cc : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
16cd : 0908            >            ora #decmode        ;ignore decimal mode bit
16cf : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
16d1 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
16d4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
16d6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
16d8 : 48              >            pha         ;use stack to load status
16d9 : 28              >            plp
                        
16da : a000                     ldy #0
16dc : 08                       php
16dd : cc1a02                   cpy abs1+3  ;test result
                                trap_ne
16e0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
16e2 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
16e3 : 0908            >            ora #decmode        ;ignore decimal mode bit
16e5 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
16e7 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
16ea : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
16ec : a000                     ldy #0
16ee : a50c                     lda zpt  
16f0 : 49c3                     eor #$c3
16f2 : c513                     cmp zp1  
                                trap_ne     ;store to zp   data
16f4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
16f6 : 840c                     sty zpt     ;clear                
16f8 : ad0302                   lda abst  
16fb : 49c3                     eor #$c3
16fd : cd1702                   cmp abs1  
                                trap_ne     ;store to abs   data
1700 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1702 : 8c0302                   sty abst    ;clear                
1705 : a50d                     lda zpt+1
1707 : 49c3                     eor #$c3
1709 : c514                     cmp zp1+1
                                trap_ne     ;store to zp+1 data
170b : d0fe            >        bne *           ;failed not equal (non zero)
                        
170d : 840d                     sty zpt+1   ;clear                
170f : ad0402                   lda abst+1
1712 : 49c3                     eor #$c3
1714 : cd1802                   cmp abs1+1
                                trap_ne     ;store to abs+1 data
1717 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1719 : 8c0402                   sty abst+1  ;clear                
171c : a50e                     lda zpt+2
171e : 49c3                     eor #$c3
1720 : c515                     cmp zp1+2
                                trap_ne     ;store to zp+2 data
1722 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1724 : 840e                     sty zpt+2   ;clear                
1726 : ad0502                   lda abst+2
1729 : 49c3                     eor #$c3
172b : cd1902                   cmp abs1+2
                                trap_ne     ;store to abs+2 data
172e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1730 : 8c0502                   sty abst+2  ;clear                
1733 : a50f                     lda zpt+3
1735 : 49c3                     eor #$c3
1737 : c516                     cmp zp1+3
                                trap_ne     ;store to zp+3 data
1739 : d0fe            >        bne *           ;failed not equal (non zero)
                        
173b : 840f                     sty zpt+3   ;clear                
173d : ad0602                   lda abst+3
1740 : 49c3                     eor #$c3
1742 : cd1a02                   cmp abs1+3
                                trap_ne     ;store to abs+3 data
1745 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1747 : 8c0602                   sty abst+3  ;clear                
                                next_test
174a : ad0002          >            lda test_case   ;previous test
174d : c914            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
174f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0015 =                 >test_num = test_num + 1
1751 : a915            >            lda #test_num   ;*** next tests' number
1753 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing load / store accumulator LDA / STA all addressing modes
                        ; LDA / STA - zp,x / abs,x
1756 : a203                     ldx #3
1758 :                  tldax    
                                set_stat 0
                       >            load_flag 0
1758 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
175a : 48              >            pha         ;use stack to load status
175b : 28              >            plp
                        
175c : b513                     lda zp1,x
175e : 08                       php         ;test stores do not alter flags
175f : 49c3                     eor #$c3
1761 : 28                       plp
1762 : 9d0302                   sta abst,x
1765 : 08                       php         ;flags after load/store sequence
1766 : 49c3                     eor #$c3
1768 : dd1702                   cmp abs1,x  ;test result
                                trap_ne
176b : d0fe            >        bne *           ;failed not equal (non zero)
                        
176d : 68                       pla         ;load status
                                eor_flag 0
176e : 0908            >            ora #decmode        ;ignore decimal mode bit
1770 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1772 : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
1775 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1777 : ca                       dex
1778 : 10de                     bpl tldax                  
                        
177a : a203                     ldx #3
177c :                  tldax1   
                                set_stat $ff
                       >            load_flag $ff
177c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
177e : 48              >            pha         ;use stack to load status
177f : 28              >            plp
                        
1780 : b513                     lda zp1,x
1782 : 08                       php         ;test stores do not alter flags
1783 : 49c3                     eor #$c3
1785 : 28                       plp
1786 : 9d0302                   sta abst,x
1789 : 08                       php         ;flags after load/store sequence
178a : 49c3                     eor #$c3
178c : dd1702                   cmp abs1,x   ;test result
                                trap_ne
178f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1791 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1792 : 0908            >            ora #decmode        ;ignore decimal mode bit
1794 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1796 : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
1799 : d0fe            >        bne *           ;failed not equal (non zero)
                        
179b : ca                       dex
179c : 10de                     bpl tldax1                  
                        
179e : a203                     ldx #3
17a0 :                  tldax2   
                                set_stat 0
                       >            load_flag 0
17a0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
17a2 : 48              >            pha         ;use stack to load status
17a3 : 28              >            plp
                        
17a4 : bd1702                   lda abs1,x
17a7 : 08                       php         ;test stores do not alter flags
17a8 : 49c3                     eor #$c3
17aa : 28                       plp
17ab : 950c                     sta zpt,x
17ad : 08                       php         ;flags after load/store sequence
17ae : 49c3                     eor #$c3
17b0 : d513                     cmp zp1,x   ;test result
                                trap_ne
17b2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
17b4 : 68                       pla         ;load status
                                eor_flag 0
17b5 : 0908            >            ora #decmode        ;ignore decimal mode bit
17b7 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
17b9 : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
17bc : d0fe            >        bne *           ;failed not equal (non zero)
                        
17be : ca                       dex
17bf : 10df                     bpl tldax2                  
                        
17c1 : a203                     ldx #3
17c3 :                  tldax3
                                set_stat $ff
                       >            load_flag $ff
17c3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
17c5 : 48              >            pha         ;use stack to load status
17c6 : 28              >            plp
                        
17c7 : bd1702                   lda abs1,x
17ca : 08                       php         ;test stores do not alter flags
17cb : 49c3                     eor #$c3
17cd : 28                       plp
17ce : 950c                     sta zpt,x
17d0 : 08                       php         ;flags after load/store sequence
17d1 : 49c3                     eor #$c3
17d3 : d513                     cmp zp1,x   ;test result
                                trap_ne
17d5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
17d7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
17d8 : 0908            >            ora #decmode        ;ignore decimal mode bit
17da : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
17dc : dd1c02                   cmp fLDx,x  ;test flags
                                trap_ne
17df : d0fe            >        bne *           ;failed not equal (non zero)
                        
17e1 : ca                       dex
17e2 : 10df                     bpl tldax3
                        
17e4 : a203                     ldx #3      ;testing store result
17e6 : a000                     ldy #0
17e8 : b50c             tstax   lda zpt,x
17ea : 49c3                     eor #$c3
17ec : d513                     cmp zp1,x
                                trap_ne     ;store to zp,x data
17ee : d0fe            >        bne *           ;failed not equal (non zero)
                        
17f0 : 940c                     sty zpt,x   ;clear                
17f2 : bd0302                   lda abst,x
17f5 : 49c3                     eor #$c3
17f7 : dd1702                   cmp abs1,x
                                trap_ne     ;store to abs,x data
17fa : d0fe            >        bne *           ;failed not equal (non zero)
                        
17fc : 8a                       txa
17fd : 9d0302                   sta abst,x  ;clear                
1800 : ca                       dex
1801 : 10e5                     bpl tstax
                                next_test
1803 : ad0002          >            lda test_case   ;previous test
1806 : c915            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1808 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0016 =                 >test_num = test_num + 1
180a : a916            >            lda #test_num   ;*** next tests' number
180c : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDA / STA - (zp),y / abs,y / (zp,x)
180f : a003                     ldy #3
1811 :                  tlday    
                                set_stat 0
                       >            load_flag 0
1811 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1813 : 48              >            pha         ;use stack to load status
1814 : 28              >            plp
                        
1815 : b124                     lda (ind1),y
1817 : 08                       php         ;test stores do not alter flags
1818 : 49c3                     eor #$c3
181a : 28                       plp
181b : 990302                   sta abst,y
181e : 08                       php         ;flags after load/store sequence
181f : 49c3                     eor #$c3
1821 : d91702                   cmp abs1,y  ;test result
                                trap_ne
1824 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1826 : 68                       pla         ;load status
                                eor_flag 0
1827 : 0908            >            ora #decmode        ;ignore decimal mode bit
1829 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
182b : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
182e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1830 : 88                       dey
1831 : 10de                     bpl tlday                  
                        
1833 : a003                     ldy #3
1835 :                  tlday1   
                                set_stat $ff
                       >            load_flag $ff
1835 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1837 : 48              >            pha         ;use stack to load status
1838 : 28              >            plp
                        
1839 : b124                     lda (ind1),y
183b : 08                       php         ;test stores do not alter flags
183c : 49c3                     eor #$c3
183e : 28                       plp
183f : 990302                   sta abst,y
1842 : 08                       php         ;flags after load/store sequence
1843 : 49c3                     eor #$c3
1845 : d91702                   cmp abs1,y  ;test result
                                trap_ne
1848 : d0fe            >        bne *           ;failed not equal (non zero)
                        
184a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
184b : 0908            >            ora #decmode        ;ignore decimal mode bit
184d : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
184f : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
1852 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1854 : 88                       dey
1855 : 10de                     bpl tlday1                  
                        
1857 : a003                     ldy #3      ;testing store result
1859 : a200                     ldx #0
185b : b90302           tstay   lda abst,y
185e : 49c3                     eor #$c3
1860 : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
1863 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1865 : 8a                       txa
1866 : 990302                   sta abst,y  ;clear                
1869 : 88                       dey
186a : 10ef                     bpl tstay
                        
186c : a003                     ldy #3
186e :                  tlday2   
                                set_stat 0
                       >            load_flag 0
186e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1870 : 48              >            pha         ;use stack to load status
1871 : 28              >            plp
                        
1872 : b91702                   lda abs1,y
1875 : 08                       php         ;test stores do not alter flags
1876 : 49c3                     eor #$c3
1878 : 28                       plp
1879 : 9130                     sta (indt),y
187b : 08                       php         ;flags after load/store sequence
187c : 49c3                     eor #$c3
187e : d124                     cmp (ind1),y    ;test result
                                trap_ne
1880 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1882 : 68                       pla         ;load status
                                eor_flag 0
1883 : 0908            >            ora #decmode        ;ignore decimal mode bit
1885 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1887 : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
188a : d0fe            >        bne *           ;failed not equal (non zero)
                        
188c : 88                       dey
188d : 10df                     bpl tlday2                  
                        
188f : a003                     ldy #3
1891 :                  tlday3   
                                set_stat $ff
                       >            load_flag $ff
1891 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1893 : 48              >            pha         ;use stack to load status
1894 : 28              >            plp
                        
1895 : b91702                   lda abs1,y
1898 : 08                       php         ;test stores do not alter flags
1899 : 49c3                     eor #$c3
189b : 28                       plp
189c : 9130                     sta (indt),y
189e : 08                       php         ;flags after load/store sequence
189f : 49c3                     eor #$c3
18a1 : d124                     cmp (ind1),y   ;test result
                                trap_ne
18a3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
18a5 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
18a6 : 0908            >            ora #decmode        ;ignore decimal mode bit
18a8 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
18aa : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
18ad : d0fe            >        bne *           ;failed not equal (non zero)
                        
18af : 88                       dey
18b0 : 10df                     bpl tlday3
                                
18b2 : a003                     ldy #3      ;testing store result
18b4 : a200                     ldx #0
18b6 : b90302           tstay1  lda abst,y
18b9 : 49c3                     eor #$c3
18bb : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
18be : d0fe            >        bne *           ;failed not equal (non zero)
                        
18c0 : 8a                       txa
18c1 : 990302                   sta abst,y  ;clear                
18c4 : 88                       dey
18c5 : 10ef                     bpl tstay1
                                
18c7 : a206                     ldx #6
18c9 : a003                     ldy #3
18cb :                  tldax4   
                                set_stat 0
                       >            load_flag 0
18cb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
18cd : 48              >            pha         ;use stack to load status
18ce : 28              >            plp
                        
18cf : a124                     lda (ind1,x)
18d1 : 08                       php         ;test stores do not alter flags
18d2 : 49c3                     eor #$c3
18d4 : 28                       plp
18d5 : 8130                     sta (indt,x)
18d7 : 08                       php         ;flags after load/store sequence
18d8 : 49c3                     eor #$c3
18da : d91702                   cmp abs1,y  ;test result
                                trap_ne
18dd : d0fe            >        bne *           ;failed not equal (non zero)
                        
18df : 68                       pla         ;load status
                                eor_flag 0
18e0 : 0908            >            ora #decmode        ;ignore decimal mode bit
18e2 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
18e4 : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
18e7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
18e9 : ca                       dex
18ea : ca                       dex
18eb : 88                       dey
18ec : 10dd                     bpl tldax4                  
                        
18ee : a206                     ldx #6
18f0 : a003                     ldy #3
18f2 :                  tldax5
                                set_stat $ff
                       >            load_flag $ff
18f2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
18f4 : 48              >            pha         ;use stack to load status
18f5 : 28              >            plp
                        
18f6 : a124                     lda (ind1,x)
18f8 : 08                       php         ;test stores do not alter flags
18f9 : 49c3                     eor #$c3
18fb : 28                       plp
18fc : 8130                     sta (indt,x)
18fe : 08                       php         ;flags after load/store sequence
18ff : 49c3                     eor #$c3
1901 : d91702                   cmp abs1,y  ;test result
                                trap_ne
1904 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1906 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1907 : 0908            >            ora #decmode        ;ignore decimal mode bit
1909 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
190b : d91c02                   cmp fLDx,y  ;test flags
                                trap_ne
190e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1910 : ca                       dex
1911 : ca                       dex
1912 : 88                       dey
1913 : 10dd                     bpl tldax5
                        
1915 : a003                     ldy #3      ;testing store result
1917 : a200                     ldx #0
1919 : b90302           tstay2  lda abst,y
191c : 49c3                     eor #$c3
191e : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
1921 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1923 : 8a                       txa
1924 : 990302                   sta abst,y  ;clear                
1927 : 88                       dey
1928 : 10ef                     bpl tstay2
                                next_test
192a : ad0002          >            lda test_case   ;previous test
192d : c916            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
192f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0017 =                 >test_num = test_num + 1
1931 : a917            >            lda #test_num   ;*** next tests' number
1933 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
1936 : a2fd                     ldx #3+$fa
1938 : b519             tldax6  lda zp1-$fa&$ff,x   ;wrap on indexed zp
193a : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
193d : ca                       dex
193e : e0fa                     cpx #$fa
1940 : b0f6                     bcs tldax6                  
1942 : a2fd                     ldx #3+$fa
1944 : bd1d01           tldax7  lda abs1-$fa,x      ;no wrap on indexed abs
1947 : 9512                     sta zpt-$fa&$ff,x
1949 : ca                       dex
194a : e0fa                     cpx #$fa
194c : b0f6                     bcs tldax7
                                                  
194e : a203                     ldx #3      ;testing wraparound result
1950 : a000                     ldy #0
1952 : b50c             tstax1  lda zpt,x
1954 : d513                     cmp zp1,x
                                trap_ne     ;store to zp,x data
1956 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1958 : 940c                     sty zpt,x   ;clear                
195a : bd0302                   lda abst,x
195d : dd1702                   cmp abs1,x
                                trap_ne     ;store to abs,x data
1960 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1962 : 8a                       txa
1963 : 9d0302                   sta abst,x  ;clear                
1966 : ca                       dex
1967 : 10e9                     bpl tstax1
                        
1969 : a0fb                     ldy #3+$f8
196b : a2fe                     ldx #6+$f8
196d : a12c             tlday4  lda (ind1-$f8&$ff,x) ;wrap on indexed zp indirect
196f : 990b01                   sta abst-$f8,y
1972 : ca                       dex
1973 : ca                       dex
1974 : 88                       dey
1975 : c0f8                     cpy #$f8
1977 : b0f4                     bcs tlday4
1979 : a003                     ldy #3      ;testing wraparound result
197b : a200                     ldx #0
197d : b90302           tstay4  lda abst,y
1980 : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
1983 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1985 : 8a                       txa
1986 : 990302                   sta abst,y  ;clear                
1989 : 88                       dey
198a : 10f1                     bpl tstay4
                                
198c : a0fb                     ldy #3+$f8
198e : b91f01           tlday5  lda abs1-$f8,y  ;no wrap on indexed abs
1991 : 9138                     sta (inwt),y
1993 : 88                       dey
1994 : c0f8                     cpy #$f8
1996 : b0f6                     bcs tlday5                  
1998 : a003                     ldy #3      ;testing wraparound result
199a : a200                     ldx #0
199c : b90302           tstay5  lda abst,y
199f : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
19a2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
19a4 : 8a                       txa
19a5 : 990302                   sta abst,y  ;clear                
19a8 : 88                       dey
19a9 : 10f1                     bpl tstay5
                        
19ab : a0fb                     ldy #3+$f8
19ad : a2fe                     ldx #6+$f8
19af : b12e             tlday6  lda (inw1),y    ;no wrap on zp indirect indexed 
19b1 : 8138                     sta (indt-$f8&$ff,x)
19b3 : ca                       dex
19b4 : ca                       dex
19b5 : 88                       dey
19b6 : c0f8                     cpy #$f8
19b8 : b0f5                     bcs tlday6
19ba : a003                     ldy #3      ;testing wraparound result
19bc : a200                     ldx #0
19be : b90302           tstay6  lda abst,y
19c1 : d91702                   cmp abs1,y
                                trap_ne     ;store to abs data
19c4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
19c6 : 8a                       txa
19c7 : 990302                   sta abst,y  ;clear                
19ca : 88                       dey
19cb : 10f1                     bpl tstay6
                                next_test
19cd : ad0002          >            lda test_case   ;previous test
19d0 : c917            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
19d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0018 =                 >test_num = test_num + 1
19d4 : a918            >            lda #test_num   ;*** next tests' number
19d6 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDA / STA - zp / abs / #
                                set_stat 0  
                       >            load_flag 0  
19d9 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
19db : 48              >            pha         ;use stack to load status
19dc : 28              >            plp
                        
19dd : a513                     lda zp1
19df : 08                       php         ;test stores do not alter flags
19e0 : 49c3                     eor #$c3
19e2 : 28                       plp
19e3 : 8d0302                   sta abst
19e6 : 08                       php         ;flags after load/store sequence
19e7 : 49c3                     eor #$c3
19e9 : c9c3                     cmp #$c3    ;test result
                                trap_ne
19eb : d0fe            >        bne *           ;failed not equal (non zero)
                        
19ed : 68                       pla         ;load status
                                eor_flag 0
19ee : 0908            >            ora #decmode        ;ignore decimal mode bit
19f0 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
19f2 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
19f5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
19f7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
19f9 : 48              >            pha         ;use stack to load status
19fa : 28              >            plp
                        
19fb : a514                     lda zp1+1
19fd : 08                       php         ;test stores do not alter flags
19fe : 49c3                     eor #$c3
1a00 : 28                       plp
1a01 : 8d0402                   sta abst+1
1a04 : 08                       php         ;flags after load/store sequence
1a05 : 49c3                     eor #$c3
1a07 : c982                     cmp #$82    ;test result
                                trap_ne
1a09 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a0b : 68                       pla         ;load status
                                eor_flag 0
1a0c : 0908            >            ora #decmode        ;ignore decimal mode bit
1a0e : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1a10 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
1a13 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1a15 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1a17 : 48              >            pha         ;use stack to load status
1a18 : 28              >            plp
                        
1a19 : a515                     lda zp1+2
1a1b : 08                       php         ;test stores do not alter flags
1a1c : 49c3                     eor #$c3
1a1e : 28                       plp
1a1f : 8d0502                   sta abst+2
1a22 : 08                       php         ;flags after load/store sequence
1a23 : 49c3                     eor #$c3
1a25 : c941                     cmp #$41    ;test result
                                trap_ne
1a27 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a29 : 68                       pla         ;load status
                                eor_flag 0
1a2a : 0908            >            ora #decmode        ;ignore decimal mode bit
1a2c : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1a2e : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
1a31 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1a33 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1a35 : 48              >            pha         ;use stack to load status
1a36 : 28              >            plp
                        
1a37 : a516                     lda zp1+3
1a39 : 08                       php         ;test stores do not alter flags
1a3a : 49c3                     eor #$c3
1a3c : 28                       plp
1a3d : 8d0602                   sta abst+3
1a40 : 08                       php         ;flags after load/store sequence
1a41 : 49c3                     eor #$c3
1a43 : c900                     cmp #0      ;test result
                                trap_ne
1a45 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a47 : 68                       pla         ;load status
                                eor_flag 0
1a48 : 0908            >            ora #decmode        ;ignore decimal mode bit
1a4a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1a4c : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
1a4f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1a51 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a53 : 48              >            pha         ;use stack to load status
1a54 : 28              >            plp
                        
1a55 : a513                     lda zp1  
1a57 : 08                       php         ;test stores do not alter flags
1a58 : 49c3                     eor #$c3
1a5a : 28                       plp
1a5b : 8d0302                   sta abst  
1a5e : 08                       php         ;flags after load/store sequence
1a5f : 49c3                     eor #$c3
1a61 : c9c3                     cmp #$c3    ;test result
                                trap_ne
1a63 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a65 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1a66 : 0908            >            ora #decmode        ;ignore decimal mode bit
1a68 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1a6a : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
1a6d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1a6f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a71 : 48              >            pha         ;use stack to load status
1a72 : 28              >            plp
                        
1a73 : a514                     lda zp1+1
1a75 : 08                       php         ;test stores do not alter flags
1a76 : 49c3                     eor #$c3
1a78 : 28                       plp
1a79 : 8d0402                   sta abst+1
1a7c : 08                       php         ;flags after load/store sequence
1a7d : 49c3                     eor #$c3
1a7f : c982                     cmp #$82    ;test result
                                trap_ne
1a81 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a83 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1a84 : 0908            >            ora #decmode        ;ignore decimal mode bit
1a86 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1a88 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
1a8b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1a8d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a8f : 48              >            pha         ;use stack to load status
1a90 : 28              >            plp
                        
1a91 : a515                     lda zp1+2
1a93 : 08                       php         ;test stores do not alter flags
1a94 : 49c3                     eor #$c3
1a96 : 28                       plp
1a97 : 8d0502                   sta abst+2
1a9a : 08                       php         ;flags after load/store sequence
1a9b : 49c3                     eor #$c3
1a9d : c941                     cmp #$41    ;test result
                                trap_ne
1a9f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1aa1 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1aa2 : 0908            >            ora #decmode        ;ignore decimal mode bit
1aa4 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1aa6 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
1aa9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1aab : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1aad : 48              >            pha         ;use stack to load status
1aae : 28              >            plp
                        
1aaf : a516                     lda zp1+3
1ab1 : 08                       php         ;test stores do not alter flags
1ab2 : 49c3                     eor #$c3
1ab4 : 28                       plp
1ab5 : 8d0602                   sta abst+3
1ab8 : 08                       php         ;flags after load/store sequence
1ab9 : 49c3                     eor #$c3
1abb : c900                     cmp #0      ;test result
                                trap_ne
1abd : d0fe            >        bne *           ;failed not equal (non zero)
                        
1abf : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1ac0 : 0908            >            ora #decmode        ;ignore decimal mode bit
1ac2 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1ac4 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
1ac7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1ac9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1acb : 48              >            pha         ;use stack to load status
1acc : 28              >            plp
                        
1acd : ad1702                   lda abs1  
1ad0 : 08                       php         ;test stores do not alter flags
1ad1 : 49c3                     eor #$c3
1ad3 : 28                       plp
1ad4 : 850c                     sta zpt  
1ad6 : 08                       php         ;flags after load/store sequence
1ad7 : 49c3                     eor #$c3
1ad9 : c513                     cmp zp1     ;test result
                                trap_ne
1adb : d0fe            >        bne *           ;failed not equal (non zero)
                        
1add : 68                       pla         ;load status
                                eor_flag 0
1ade : 0908            >            ora #decmode        ;ignore decimal mode bit
1ae0 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1ae2 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
1ae5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1ae7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1ae9 : 48              >            pha         ;use stack to load status
1aea : 28              >            plp
                        
1aeb : ad1802                   lda abs1+1
1aee : 08                       php         ;test stores do not alter flags
1aef : 49c3                     eor #$c3
1af1 : 28                       plp
1af2 : 850d                     sta zpt+1
1af4 : 08                       php         ;flags after load/store sequence
1af5 : 49c3                     eor #$c3
1af7 : c514                     cmp zp1+1   ;test result
                                trap_ne
1af9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1afb : 68                       pla         ;load status
                                eor_flag 0
1afc : 0908            >            ora #decmode        ;ignore decimal mode bit
1afe : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1b00 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
1b03 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1b05 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1b07 : 48              >            pha         ;use stack to load status
1b08 : 28              >            plp
                        
1b09 : ad1902                   lda abs1+2
1b0c : 08                       php         ;test stores do not alter flags
1b0d : 49c3                     eor #$c3
1b0f : 28                       plp
1b10 : 850e                     sta zpt+2
1b12 : 08                       php         ;flags after load/store sequence
1b13 : 49c3                     eor #$c3
1b15 : c515                     cmp zp1+2   ;test result
                                trap_ne
1b17 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b19 : 68                       pla         ;load status
                                eor_flag 0
1b1a : 0908            >            ora #decmode        ;ignore decimal mode bit
1b1c : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1b1e : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
1b21 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1b23 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1b25 : 48              >            pha         ;use stack to load status
1b26 : 28              >            plp
                        
1b27 : ad1a02                   lda abs1+3
1b2a : 08                       php         ;test stores do not alter flags
1b2b : 49c3                     eor #$c3
1b2d : 28                       plp
1b2e : 850f                     sta zpt+3
1b30 : 08                       php         ;flags after load/store sequence
1b31 : 49c3                     eor #$c3
1b33 : c516                     cmp zp1+3   ;test result
                                trap_ne
1b35 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b37 : 68                       pla         ;load status
                                eor_flag 0
1b38 : 0908            >            ora #decmode        ;ignore decimal mode bit
1b3a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1b3c : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
1b3f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1b41 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1b43 : 48              >            pha         ;use stack to load status
1b44 : 28              >            plp
                        
1b45 : ad1702                   lda abs1  
1b48 : 08                       php         ;test stores do not alter flags
1b49 : 49c3                     eor #$c3
1b4b : 28                       plp
1b4c : 850c                     sta zpt  
1b4e : 08                       php         ;flags after load/store sequence
1b4f : 49c3                     eor #$c3
1b51 : c513                     cmp zp1     ;test result
                                trap_ne
1b53 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b55 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1b56 : 0908            >            ora #decmode        ;ignore decimal mode bit
1b58 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1b5a : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
1b5d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1b5f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1b61 : 48              >            pha         ;use stack to load status
1b62 : 28              >            plp
                        
1b63 : ad1802                   lda abs1+1
1b66 : 08                       php         ;test stores do not alter flags
1b67 : 49c3                     eor #$c3
1b69 : 28                       plp
1b6a : 850d                     sta zpt+1
1b6c : 08                       php         ;flags after load/store sequence
1b6d : 49c3                     eor #$c3
1b6f : c514                     cmp zp1+1   ;test result
                                trap_ne
1b71 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b73 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1b74 : 0908            >            ora #decmode        ;ignore decimal mode bit
1b76 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1b78 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
1b7b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1b7d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1b7f : 48              >            pha         ;use stack to load status
1b80 : 28              >            plp
                        
1b81 : ad1902                   lda abs1+2
1b84 : 08                       php         ;test stores do not alter flags
1b85 : 49c3                     eor #$c3
1b87 : 28                       plp
1b88 : 850e                     sta zpt+2
1b8a : 08                       php         ;flags after load/store sequence
1b8b : 49c3                     eor #$c3
1b8d : c515                     cmp zp1+2   ;test result
                                trap_ne
1b8f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b91 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1b92 : 0908            >            ora #decmode        ;ignore decimal mode bit
1b94 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1b96 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
1b99 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1b9b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1b9d : 48              >            pha         ;use stack to load status
1b9e : 28              >            plp
                        
1b9f : ad1a02                   lda abs1+3
1ba2 : 08                       php         ;test stores do not alter flags
1ba3 : 49c3                     eor #$c3
1ba5 : 28                       plp
1ba6 : 850f                     sta zpt+3
1ba8 : 08                       php         ;flags after load/store sequence
1ba9 : 49c3                     eor #$c3
1bab : c516                     cmp zp1+3   ;test result
                                trap_ne
1bad : d0fe            >        bne *           ;failed not equal (non zero)
                        
1baf : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1bb0 : 0908            >            ora #decmode        ;ignore decimal mode bit
1bb2 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1bb4 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
1bb7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0  
                       >            load_flag 0  
1bb9 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
1bbb : 48              >            pha         ;use stack to load status
1bbc : 28              >            plp
                        
1bbd : a9c3                     lda #$c3
1bbf : 08                       php
1bc0 : cd1702                   cmp abs1    ;test result
                                trap_ne
1bc3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bc5 : 68                       pla         ;load status
                                eor_flag 0
1bc6 : 0908            >            ora #decmode        ;ignore decimal mode bit
1bc8 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1bca : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
1bcd : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1bcf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1bd1 : 48              >            pha         ;use stack to load status
1bd2 : 28              >            plp
                        
1bd3 : a982                     lda #$82
1bd5 : 08                       php
1bd6 : cd1802                   cmp abs1+1  ;test result
                                trap_ne
1bd9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bdb : 68                       pla         ;load status
                                eor_flag 0
1bdc : 0908            >            ora #decmode        ;ignore decimal mode bit
1bde : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1be0 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
1be3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1be5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1be7 : 48              >            pha         ;use stack to load status
1be8 : 28              >            plp
                        
1be9 : a941                     lda #$41
1beb : 08                       php
1bec : cd1902                   cmp abs1+2  ;test result
                                trap_ne
1bef : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bf1 : 68                       pla         ;load status
                                eor_flag 0
1bf2 : 0908            >            ora #decmode        ;ignore decimal mode bit
1bf4 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1bf6 : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
1bf9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1bfb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1bfd : 48              >            pha         ;use stack to load status
1bfe : 28              >            plp
                        
1bff : a900                     lda #0
1c01 : 08                       php
1c02 : cd1a02                   cmp abs1+3  ;test result
                                trap_ne
1c05 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c07 : 68                       pla         ;load status
                                eor_flag 0
1c08 : 0908            >            ora #decmode        ;ignore decimal mode bit
1c0a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1c0c : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
1c0f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1c11 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c13 : 48              >            pha         ;use stack to load status
1c14 : 28              >            plp
                        
1c15 : a9c3                     lda #$c3  
1c17 : 08                       php
1c18 : cd1702                   cmp abs1    ;test result
                                trap_ne
1c1b : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c1d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1c1e : 0908            >            ora #decmode        ;ignore decimal mode bit
1c20 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1c22 : cd1c02                   cmp fLDx    ;test flags
                                trap_ne
1c25 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1c27 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c29 : 48              >            pha         ;use stack to load status
1c2a : 28              >            plp
                        
1c2b : a982                     lda #$82
1c2d : 08                       php
1c2e : cd1802                   cmp abs1+1  ;test result
                                trap_ne
1c31 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c33 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1c34 : 0908            >            ora #decmode        ;ignore decimal mode bit
1c36 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1c38 : cd1d02                   cmp fLDx+1  ;test flags
                                trap_ne
1c3b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1c3d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c3f : 48              >            pha         ;use stack to load status
1c40 : 28              >            plp
                        
1c41 : a941                     lda #$41
1c43 : 08                       php
1c44 : cd1902                   cmp abs1+2  ;test result
                                trap_ne
1c47 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c49 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1c4a : 0908            >            ora #decmode        ;ignore decimal mode bit
1c4c : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1c4e : cd1e02                   cmp fLDx+2  ;test flags
                                trap_ne
1c51 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1c53 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c55 : 48              >            pha         ;use stack to load status
1c56 : 28              >            plp
                        
1c57 : a900                     lda #0
1c59 : 08                       php
1c5a : cd1a02                   cmp abs1+3  ;test result
                                trap_ne
1c5d : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c5f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1c60 : 0908            >            ora #decmode        ;ignore decimal mode bit
1c62 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1c64 : cd1f02                   cmp fLDx+3  ;test flags
                                trap_ne
1c67 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
1c69 : a200                     ldx #0
1c6b : a50c                     lda zpt  
1c6d : 49c3                     eor #$c3
1c6f : c513                     cmp zp1  
                                trap_ne     ;store to zp data
1c71 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c73 : 860c                     stx zpt     ;clear                
1c75 : ad0302                   lda abst  
1c78 : 49c3                     eor #$c3
1c7a : cd1702                   cmp abs1  
                                trap_ne     ;store to abs data
1c7d : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c7f : 8e0302                   stx abst    ;clear                
1c82 : a50d                     lda zpt+1
1c84 : 49c3                     eor #$c3
1c86 : c514                     cmp zp1+1
                                trap_ne     ;store to zp data
1c88 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c8a : 860d                     stx zpt+1   ;clear                
1c8c : ad0402                   lda abst+1
1c8f : 49c3                     eor #$c3
1c91 : cd1802                   cmp abs1+1
                                trap_ne     ;store to abs data
1c94 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c96 : 8e0402                   stx abst+1  ;clear                
1c99 : a50e                     lda zpt+2
1c9b : 49c3                     eor #$c3
1c9d : c515                     cmp zp1+2
                                trap_ne     ;store to zp data
1c9f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ca1 : 860e                     stx zpt+2   ;clear                
1ca3 : ad0502                   lda abst+2
1ca6 : 49c3                     eor #$c3
1ca8 : cd1902                   cmp abs1+2
                                trap_ne     ;store to abs data
1cab : d0fe            >        bne *           ;failed not equal (non zero)
                        
1cad : 8e0502                   stx abst+2  ;clear                
1cb0 : a50f                     lda zpt+3
1cb2 : 49c3                     eor #$c3
1cb4 : c516                     cmp zp1+3
                                trap_ne     ;store to zp data
1cb6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1cb8 : 860f                     stx zpt+3   ;clear                
1cba : ad0602                   lda abst+3
1cbd : 49c3                     eor #$c3
1cbf : cd1a02                   cmp abs1+3
                                trap_ne     ;store to abs data
1cc2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1cc4 : 8e0602                   stx abst+3  ;clear                
                                next_test
1cc7 : ad0002          >            lda test_case   ;previous test
1cca : c918            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1ccc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0019 =                 >test_num = test_num + 1
1cce : a919            >            lda #test_num   ;*** next tests' number
1cd0 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing bit test & compares BIT CPX CPY CMP all addressing modes
                        ; BIT - zp / abs
                                set_a $ff,0
                       >            load_flag 0
1cd3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1cd5 : 48              >            pha         ;use stack to load status
1cd6 : a9ff            >            lda #$ff     ;precharge accu
1cd8 : 28              >            plp
                        
1cd9 : 2416                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
1cdb : 08              >            php         ;save flags
1cdc : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1cde : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ce0 : 68              >            pla         ;load status
1ce1 : 48              >            pha
                       >            cmp_flag fz 
1ce2 : 0908            >            ora #decmode        ;ignore decimal mode bit
1ce4 : c93a            >            cmp #(fz |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1ce6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ce8 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1ce9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1ceb : 48              >            pha         ;use stack to load status
1cec : a901            >            lda #1     ;precharge accu
1cee : 28              >            plp
                        
1cef : 2415                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
1cf1 : 08              >            php         ;save flags
1cf2 : c901            >            cmp #1     ;test result
                       >            trap_ne
1cf4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1cf6 : 68              >            pla         ;load status
1cf7 : 48              >            pha
                       >            cmp_flag fv
1cf8 : 0908            >            ora #decmode        ;ignore decimal mode bit
1cfa : c978            >            cmp #(fv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1cfc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1cfe : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1cff : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d01 : 48              >            pha         ;use stack to load status
1d02 : a901            >            lda #1     ;precharge accu
1d04 : 28              >            plp
                        
1d05 : 2414                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
1d07 : 08              >            php         ;save flags
1d08 : c901            >            cmp #1     ;test result
                       >            trap_ne
1d0a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d0c : 68              >            pla         ;load status
1d0d : 48              >            pha
                       >            cmp_flag fnz
1d0e : 0908            >            ora #decmode        ;ignore decimal mode bit
1d10 : c9ba            >            cmp #(fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d12 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d14 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1d15 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d17 : 48              >            pha         ;use stack to load status
1d18 : a901            >            lda #1     ;precharge accu
1d1a : 28              >            plp
                        
1d1b : 2413                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
1d1d : 08              >            php         ;save flags
1d1e : c901            >            cmp #1     ;test result
                       >            trap_ne
1d20 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d22 : 68              >            pla         ;load status
1d23 : 48              >            pha
                       >            cmp_flag fnv
1d24 : 0908            >            ora #decmode        ;ignore decimal mode bit
1d26 : c9f8            >            cmp #(fnv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d28 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d2a : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
1d2b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1d2d : 48              >            pha         ;use stack to load status
1d2e : a9ff            >            lda #$ff     ;precharge accu
1d30 : 28              >            plp
                        
1d31 : 2416                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
1d33 : 08              >            php         ;save flags
1d34 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1d36 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d38 : 68              >            pla         ;load status
1d39 : 48              >            pha
                       >            cmp_flag ~fnv 
1d3a : 0908            >            ora #decmode        ;ignore decimal mode bit
1d3c : c93f            >            cmp #(~fnv |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d3e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d40 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1d41 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1d43 : 48              >            pha         ;use stack to load status
1d44 : a901            >            lda #1     ;precharge accu
1d46 : 28              >            plp
                        
1d47 : 2415                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
1d49 : 08              >            php         ;save flags
1d4a : c901            >            cmp #1     ;test result
                       >            trap_ne
1d4c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d4e : 68              >            pla         ;load status
1d4f : 48              >            pha
                       >            cmp_flag ~fnz
1d50 : 0908            >            ora #decmode        ;ignore decimal mode bit
1d52 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d54 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d56 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1d57 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1d59 : 48              >            pha         ;use stack to load status
1d5a : a901            >            lda #1     ;precharge accu
1d5c : 28              >            plp
                        
1d5d : 2414                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
1d5f : 08              >            php         ;save flags
1d60 : c901            >            cmp #1     ;test result
                       >            trap_ne
1d62 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d64 : 68              >            pla         ;load status
1d65 : 48              >            pha
                       >            cmp_flag ~fv
1d66 : 0908            >            ora #decmode        ;ignore decimal mode bit
1d68 : c9bf            >            cmp #(~fv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d6a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d6c : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1d6d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1d6f : 48              >            pha         ;use stack to load status
1d70 : a901            >            lda #1     ;precharge accu
1d72 : 28              >            plp
                        
1d73 : 2413                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
1d75 : 08              >            php         ;save flags
1d76 : c901            >            cmp #1     ;test result
                       >            trap_ne
1d78 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d7a : 68              >            pla         ;load status
1d7b : 48              >            pha
                       >            cmp_flag ~fz
1d7c : 0908            >            ora #decmode        ;ignore decimal mode bit
1d7e : c9fd            >            cmp #(~fz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d80 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d82 : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,0
                       >            load_flag 0
1d83 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d85 : 48              >            pha         ;use stack to load status
1d86 : a9ff            >            lda #$ff     ;precharge accu
1d88 : 28              >            plp
                        
1d89 : 2c1a02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
1d8c : 08              >            php         ;save flags
1d8d : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1d8f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d91 : 68              >            pla         ;load status
1d92 : 48              >            pha
                       >            cmp_flag fz 
1d93 : 0908            >            ora #decmode        ;ignore decimal mode bit
1d95 : c93a            >            cmp #(fz |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d97 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d99 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1d9a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d9c : 48              >            pha         ;use stack to load status
1d9d : a901            >            lda #1     ;precharge accu
1d9f : 28              >            plp
                        
1da0 : 2c1902                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
1da3 : 08              >            php         ;save flags
1da4 : c901            >            cmp #1     ;test result
                       >            trap_ne
1da6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1da8 : 68              >            pla         ;load status
1da9 : 48              >            pha
                       >            cmp_flag fv
1daa : 0908            >            ora #decmode        ;ignore decimal mode bit
1dac : c978            >            cmp #(fv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1dae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1db0 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1db1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1db3 : 48              >            pha         ;use stack to load status
1db4 : a901            >            lda #1     ;precharge accu
1db6 : 28              >            plp
                        
1db7 : 2c1802                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
1dba : 08              >            php         ;save flags
1dbb : c901            >            cmp #1     ;test result
                       >            trap_ne
1dbd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1dbf : 68              >            pla         ;load status
1dc0 : 48              >            pha
                       >            cmp_flag fnz
1dc1 : 0908            >            ora #decmode        ;ignore decimal mode bit
1dc3 : c9ba            >            cmp #(fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1dc5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1dc7 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1dc8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1dca : 48              >            pha         ;use stack to load status
1dcb : a901            >            lda #1     ;precharge accu
1dcd : 28              >            plp
                        
1dce : 2c1702                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
1dd1 : 08              >            php         ;save flags
1dd2 : c901            >            cmp #1     ;test result
                       >            trap_ne
1dd4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1dd6 : 68              >            pla         ;load status
1dd7 : 48              >            pha
                       >            cmp_flag fnv
1dd8 : 0908            >            ora #decmode        ;ignore decimal mode bit
1dda : c9f8            >            cmp #(fnv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1ddc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1dde : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
1ddf : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1de1 : 48              >            pha         ;use stack to load status
1de2 : a9ff            >            lda #$ff     ;precharge accu
1de4 : 28              >            plp
                        
1de5 : 2c1a02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
1de8 : 08              >            php         ;save flags
1de9 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1deb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ded : 68              >            pla         ;load status
1dee : 48              >            pha
                       >            cmp_flag ~fnv 
1def : 0908            >            ora #decmode        ;ignore decimal mode bit
1df1 : c93f            >            cmp #(~fnv |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1df3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1df5 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1df6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1df8 : 48              >            pha         ;use stack to load status
1df9 : a901            >            lda #1     ;precharge accu
1dfb : 28              >            plp
                        
1dfc : 2c1902                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
1dff : 08              >            php         ;save flags
1e00 : c901            >            cmp #1     ;test result
                       >            trap_ne
1e02 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e04 : 68              >            pla         ;load status
1e05 : 48              >            pha
                       >            cmp_flag ~fnz
1e06 : 0908            >            ora #decmode        ;ignore decimal mode bit
1e08 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e0a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e0c : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1e0d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e0f : 48              >            pha         ;use stack to load status
1e10 : a901            >            lda #1     ;precharge accu
1e12 : 28              >            plp
                        
1e13 : 2c1802                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
1e16 : 08              >            php         ;save flags
1e17 : c901            >            cmp #1     ;test result
                       >            trap_ne
1e19 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e1b : 68              >            pla         ;load status
1e1c : 48              >            pha
                       >            cmp_flag ~fv
1e1d : 0908            >            ora #decmode        ;ignore decimal mode bit
1e1f : c9bf            >            cmp #(~fv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e21 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e23 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1e24 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e26 : 48              >            pha         ;use stack to load status
1e27 : a901            >            lda #1     ;precharge accu
1e29 : 28              >            plp
                        
1e2a : 2c1702                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
1e2d : 08              >            php         ;save flags
1e2e : c901            >            cmp #1     ;test result
                       >            trap_ne
1e30 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e32 : 68              >            pla         ;load status
1e33 : 48              >            pha
                       >            cmp_flag ~fz
1e34 : 0908            >            ora #decmode        ;ignore decimal mode bit
1e36 : c9fd            >            cmp #(~fz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e38 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e3a : 28              >            plp         ;restore status
                        
                                next_test
1e3b : ad0002          >            lda test_case   ;previous test
1e3e : c919            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1e40 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001a =                 >test_num = test_num + 1
1e42 : a91a            >            lda #test_num   ;*** next tests' number
1e44 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; CPX - zp / abs / #         
                                set_x $80,0
                       >            load_flag 0
1e47 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1e49 : 48              >            pha         ;use stack to load status
1e4a : a280            >            ldx #$80     ;precharge index x
1e4c : 28              >            plp
                        
1e4d : e417                     cpx zp7f
                                tst_stat fc
1e4f : 08              >            php         ;save status
1e50 : 68              >            pla         ;use stack to retrieve status
1e51 : 48              >            pha
                       >            cmp_flag fc
1e52 : 0908            >            ora #decmode        ;ignore decimal mode bit
1e54 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e56 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e58 : 28              >            plp         ;restore status
                        
1e59 : ca                       dex
1e5a : e417                     cpx zp7f
                                tst_stat fzc
1e5c : 08              >            php         ;save status
1e5d : 68              >            pla         ;use stack to retrieve status
1e5e : 48              >            pha
                       >            cmp_flag fzc
1e5f : 0908            >            ora #decmode        ;ignore decimal mode bit
1e61 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e63 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e65 : 28              >            plp         ;restore status
                        
1e66 : ca                       dex
1e67 : e417                     cpx zp7f
                                tst_x $7e,fn
1e69 : 08              >            php         ;save flags
1e6a : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1e6c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e6e : 68              >            pla         ;load status
1e6f : 48              >            pha
                       >            cmp_flag fn
1e70 : 0908            >            ora #decmode        ;ignore decimal mode bit
1e72 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e74 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e76 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
1e77 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e79 : 48              >            pha         ;use stack to load status
1e7a : a280            >            ldx #$80     ;precharge index x
1e7c : 28              >            plp
                        
1e7d : e417                     cpx zp7f
                                tst_stat ~fnz
1e7f : 08              >            php         ;save status
1e80 : 68              >            pla         ;use stack to retrieve status
1e81 : 48              >            pha
                       >            cmp_flag ~fnz
1e82 : 0908            >            ora #decmode        ;ignore decimal mode bit
1e84 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e86 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e88 : 28              >            plp         ;restore status
                        
1e89 : ca                       dex
1e8a : e417                     cpx zp7f
                                tst_stat ~fn
1e8c : 08              >            php         ;save status
1e8d : 68              >            pla         ;use stack to retrieve status
1e8e : 48              >            pha
                       >            cmp_flag ~fn
1e8f : 0908            >            ora #decmode        ;ignore decimal mode bit
1e91 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e93 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e95 : 28              >            plp         ;restore status
                        
1e96 : ca                       dex
1e97 : e417                     cpx zp7f
                                tst_x $7e,~fzc
1e99 : 08              >            php         ;save flags
1e9a : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1e9c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e9e : 68              >            pla         ;load status
1e9f : 48              >            pha
                       >            cmp_flag ~fzc
1ea0 : 0908            >            ora #decmode        ;ignore decimal mode bit
1ea2 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1ea4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ea6 : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
1ea7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1ea9 : 48              >            pha         ;use stack to load status
1eaa : a280            >            ldx #$80     ;precharge index x
1eac : 28              >            plp
                        
1ead : ec1b02                   cpx abs7f
                                tst_stat fc
1eb0 : 08              >            php         ;save status
1eb1 : 68              >            pla         ;use stack to retrieve status
1eb2 : 48              >            pha
                       >            cmp_flag fc
1eb3 : 0908            >            ora #decmode        ;ignore decimal mode bit
1eb5 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1eb7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1eb9 : 28              >            plp         ;restore status
                        
1eba : ca                       dex
1ebb : ec1b02                   cpx abs7f
                                tst_stat fzc
1ebe : 08              >            php         ;save status
1ebf : 68              >            pla         ;use stack to retrieve status
1ec0 : 48              >            pha
                       >            cmp_flag fzc
1ec1 : 0908            >            ora #decmode        ;ignore decimal mode bit
1ec3 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1ec5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ec7 : 28              >            plp         ;restore status
                        
1ec8 : ca                       dex
1ec9 : ec1b02                   cpx abs7f
                                tst_x $7e,fn
1ecc : 08              >            php         ;save flags
1ecd : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1ecf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ed1 : 68              >            pla         ;load status
1ed2 : 48              >            pha
                       >            cmp_flag fn
1ed3 : 0908            >            ora #decmode        ;ignore decimal mode bit
1ed5 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1ed7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ed9 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
1eda : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1edc : 48              >            pha         ;use stack to load status
1edd : a280            >            ldx #$80     ;precharge index x
1edf : 28              >            plp
                        
1ee0 : ec1b02                   cpx abs7f
                                tst_stat ~fnz
1ee3 : 08              >            php         ;save status
1ee4 : 68              >            pla         ;use stack to retrieve status
1ee5 : 48              >            pha
                       >            cmp_flag ~fnz
1ee6 : 0908            >            ora #decmode        ;ignore decimal mode bit
1ee8 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1eea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1eec : 28              >            plp         ;restore status
                        
1eed : ca                       dex
1eee : ec1b02                   cpx abs7f
                                tst_stat ~fn
1ef1 : 08              >            php         ;save status
1ef2 : 68              >            pla         ;use stack to retrieve status
1ef3 : 48              >            pha
                       >            cmp_flag ~fn
1ef4 : 0908            >            ora #decmode        ;ignore decimal mode bit
1ef6 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1ef8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1efa : 28              >            plp         ;restore status
                        
1efb : ca                       dex
1efc : ec1b02                   cpx abs7f
                                tst_x $7e,~fzc
1eff : 08              >            php         ;save flags
1f00 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1f02 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f04 : 68              >            pla         ;load status
1f05 : 48              >            pha
                       >            cmp_flag ~fzc
1f06 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f08 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f0a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f0c : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
1f0d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1f0f : 48              >            pha         ;use stack to load status
1f10 : a280            >            ldx #$80     ;precharge index x
1f12 : 28              >            plp
                        
1f13 : e07f                     cpx #$7f
                                tst_stat fc
1f15 : 08              >            php         ;save status
1f16 : 68              >            pla         ;use stack to retrieve status
1f17 : 48              >            pha
                       >            cmp_flag fc
1f18 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f1a : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f1c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f1e : 28              >            plp         ;restore status
                        
1f1f : ca                       dex
1f20 : e07f                     cpx #$7f
                                tst_stat fzc
1f22 : 08              >            php         ;save status
1f23 : 68              >            pla         ;use stack to retrieve status
1f24 : 48              >            pha
                       >            cmp_flag fzc
1f25 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f27 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f29 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f2b : 28              >            plp         ;restore status
                        
1f2c : ca                       dex
1f2d : e07f                     cpx #$7f
                                tst_x $7e,fn
1f2f : 08              >            php         ;save flags
1f30 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1f32 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f34 : 68              >            pla         ;load status
1f35 : 48              >            pha
                       >            cmp_flag fn
1f36 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f38 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f3a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f3c : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
1f3d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1f3f : 48              >            pha         ;use stack to load status
1f40 : a280            >            ldx #$80     ;precharge index x
1f42 : 28              >            plp
                        
1f43 : e07f                     cpx #$7f
                                tst_stat ~fnz
1f45 : 08              >            php         ;save status
1f46 : 68              >            pla         ;use stack to retrieve status
1f47 : 48              >            pha
                       >            cmp_flag ~fnz
1f48 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f4a : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f4c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f4e : 28              >            plp         ;restore status
                        
1f4f : ca                       dex
1f50 : e07f                     cpx #$7f
                                tst_stat ~fn
1f52 : 08              >            php         ;save status
1f53 : 68              >            pla         ;use stack to retrieve status
1f54 : 48              >            pha
                       >            cmp_flag ~fn
1f55 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f57 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f59 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f5b : 28              >            plp         ;restore status
                        
1f5c : ca                       dex
1f5d : e07f                     cpx #$7f
                                tst_x $7e,~fzc
1f5f : 08              >            php         ;save flags
1f60 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1f62 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f64 : 68              >            pla         ;load status
1f65 : 48              >            pha
                       >            cmp_flag ~fzc
1f66 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f68 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f6a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f6c : 28              >            plp         ;restore status
                        
                                next_test
1f6d : ad0002          >            lda test_case   ;previous test
1f70 : c91a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1f72 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001b =                 >test_num = test_num + 1
1f74 : a91b            >            lda #test_num   ;*** next tests' number
1f76 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CPY - zp / abs / #         
                                set_y $80,0
                       >            load_flag 0
1f79 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1f7b : 48              >            pha         ;use stack to load status
1f7c : a080            >            ldy #$80     ;precharge index y
1f7e : 28              >            plp
                        
1f7f : c417                     cpy zp7f
                                tst_stat fc
1f81 : 08              >            php         ;save status
1f82 : 68              >            pla         ;use stack to retrieve status
1f83 : 48              >            pha
                       >            cmp_flag fc
1f84 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f86 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f88 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f8a : 28              >            plp         ;restore status
                        
1f8b : 88                       dey
1f8c : c417                     cpy zp7f
                                tst_stat fzc
1f8e : 08              >            php         ;save status
1f8f : 68              >            pla         ;use stack to retrieve status
1f90 : 48              >            pha
                       >            cmp_flag fzc
1f91 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f93 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f95 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f97 : 28              >            plp         ;restore status
                        
1f98 : 88                       dey
1f99 : c417                     cpy zp7f
                                tst_y $7e,fn
1f9b : 08              >            php         ;save flags
1f9c : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
1f9e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fa0 : 68              >            pla         ;load status
1fa1 : 48              >            pha
                       >            cmp_flag fn
1fa2 : 0908            >            ora #decmode        ;ignore decimal mode bit
1fa4 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1fa6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fa8 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
1fa9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1fab : 48              >            pha         ;use stack to load status
1fac : a080            >            ldy #$80     ;precharge index y
1fae : 28              >            plp
                        
1faf : c417                     cpy zp7f
                                tst_stat ~fnz
1fb1 : 08              >            php         ;save status
1fb2 : 68              >            pla         ;use stack to retrieve status
1fb3 : 48              >            pha
                       >            cmp_flag ~fnz
1fb4 : 0908            >            ora #decmode        ;ignore decimal mode bit
1fb6 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1fb8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fba : 28              >            plp         ;restore status
                        
1fbb : 88                       dey
1fbc : c417                     cpy zp7f
                                tst_stat ~fn
1fbe : 08              >            php         ;save status
1fbf : 68              >            pla         ;use stack to retrieve status
1fc0 : 48              >            pha
                       >            cmp_flag ~fn
1fc1 : 0908            >            ora #decmode        ;ignore decimal mode bit
1fc3 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1fc5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fc7 : 28              >            plp         ;restore status
                        
1fc8 : 88                       dey
1fc9 : c417                     cpy zp7f
                                tst_y $7e,~fzc
1fcb : 08              >            php         ;save flags
1fcc : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
1fce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fd0 : 68              >            pla         ;load status
1fd1 : 48              >            pha
                       >            cmp_flag ~fzc
1fd2 : 0908            >            ora #decmode        ;ignore decimal mode bit
1fd4 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1fd6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fd8 : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
1fd9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1fdb : 48              >            pha         ;use stack to load status
1fdc : a080            >            ldy #$80     ;precharge index y
1fde : 28              >            plp
                        
1fdf : cc1b02                   cpy abs7f
                                tst_stat fc
1fe2 : 08              >            php         ;save status
1fe3 : 68              >            pla         ;use stack to retrieve status
1fe4 : 48              >            pha
                       >            cmp_flag fc
1fe5 : 0908            >            ora #decmode        ;ignore decimal mode bit
1fe7 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1fe9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1feb : 28              >            plp         ;restore status
                        
1fec : 88                       dey
1fed : cc1b02                   cpy abs7f
                                tst_stat fzc
1ff0 : 08              >            php         ;save status
1ff1 : 68              >            pla         ;use stack to retrieve status
1ff2 : 48              >            pha
                       >            cmp_flag fzc
1ff3 : 0908            >            ora #decmode        ;ignore decimal mode bit
1ff5 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1ff7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ff9 : 28              >            plp         ;restore status
                        
1ffa : 88                       dey
1ffb : cc1b02                   cpy abs7f
                                tst_y $7e,fn
1ffe : 08              >            php         ;save flags
1fff : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
2001 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2003 : 68              >            pla         ;load status
2004 : 48              >            pha
                       >            cmp_flag fn
2005 : 0908            >            ora #decmode        ;ignore decimal mode bit
2007 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2009 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
200b : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
200c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
200e : 48              >            pha         ;use stack to load status
200f : a080            >            ldy #$80     ;precharge index y
2011 : 28              >            plp
                        
2012 : cc1b02                   cpy abs7f
                                tst_stat ~fnz
2015 : 08              >            php         ;save status
2016 : 68              >            pla         ;use stack to retrieve status
2017 : 48              >            pha
                       >            cmp_flag ~fnz
2018 : 0908            >            ora #decmode        ;ignore decimal mode bit
201a : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
201c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
201e : 28              >            plp         ;restore status
                        
201f : 88                       dey
2020 : cc1b02                   cpy abs7f
                                tst_stat ~fn
2023 : 08              >            php         ;save status
2024 : 68              >            pla         ;use stack to retrieve status
2025 : 48              >            pha
                       >            cmp_flag ~fn
2026 : 0908            >            ora #decmode        ;ignore decimal mode bit
2028 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
202a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
202c : 28              >            plp         ;restore status
                        
202d : 88                       dey
202e : cc1b02                   cpy abs7f
                                tst_y $7e,~fzc
2031 : 08              >            php         ;save flags
2032 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
2034 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2036 : 68              >            pla         ;load status
2037 : 48              >            pha
                       >            cmp_flag ~fzc
2038 : 0908            >            ora #decmode        ;ignore decimal mode bit
203a : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
203c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
203e : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
203f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2041 : 48              >            pha         ;use stack to load status
2042 : a080            >            ldy #$80     ;precharge index y
2044 : 28              >            plp
                        
2045 : c07f                     cpy #$7f
                                tst_stat fc
2047 : 08              >            php         ;save status
2048 : 68              >            pla         ;use stack to retrieve status
2049 : 48              >            pha
                       >            cmp_flag fc
204a : 0908            >            ora #decmode        ;ignore decimal mode bit
204c : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
204e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2050 : 28              >            plp         ;restore status
                        
2051 : 88                       dey
2052 : c07f                     cpy #$7f
                                tst_stat fzc
2054 : 08              >            php         ;save status
2055 : 68              >            pla         ;use stack to retrieve status
2056 : 48              >            pha
                       >            cmp_flag fzc
2057 : 0908            >            ora #decmode        ;ignore decimal mode bit
2059 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
205b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
205d : 28              >            plp         ;restore status
                        
205e : 88                       dey
205f : c07f                     cpy #$7f
                                tst_y $7e,fn
2061 : 08              >            php         ;save flags
2062 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
2064 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2066 : 68              >            pla         ;load status
2067 : 48              >            pha
                       >            cmp_flag fn
2068 : 0908            >            ora #decmode        ;ignore decimal mode bit
206a : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
206c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
206e : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
206f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2071 : 48              >            pha         ;use stack to load status
2072 : a080            >            ldy #$80     ;precharge index y
2074 : 28              >            plp
                        
2075 : c07f                     cpy #$7f
                                tst_stat ~fnz
2077 : 08              >            php         ;save status
2078 : 68              >            pla         ;use stack to retrieve status
2079 : 48              >            pha
                       >            cmp_flag ~fnz
207a : 0908            >            ora #decmode        ;ignore decimal mode bit
207c : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
207e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2080 : 28              >            plp         ;restore status
                        
2081 : 88                       dey
2082 : c07f                     cpy #$7f
                                tst_stat ~fn
2084 : 08              >            php         ;save status
2085 : 68              >            pla         ;use stack to retrieve status
2086 : 48              >            pha
                       >            cmp_flag ~fn
2087 : 0908            >            ora #decmode        ;ignore decimal mode bit
2089 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
208b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
208d : 28              >            plp         ;restore status
                        
208e : 88                       dey
208f : c07f                     cpy #$7f
                                tst_y $7e,~fzc
2091 : 08              >            php         ;save flags
2092 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
2094 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2096 : 68              >            pla         ;load status
2097 : 48              >            pha
                       >            cmp_flag ~fzc
2098 : 0908            >            ora #decmode        ;ignore decimal mode bit
209a : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
209c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
209e : 28              >            plp         ;restore status
                        
                                next_test
209f : ad0002          >            lda test_case   ;previous test
20a2 : c91b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
20a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001c =                 >test_num = test_num + 1
20a6 : a91c            >            lda #test_num   ;*** next tests' number
20a8 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CMP - zp / abs / #         
                                set_a $80,0
                       >            load_flag 0
20ab : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
20ad : 48              >            pha         ;use stack to load status
20ae : a980            >            lda #$80     ;precharge accu
20b0 : 28              >            plp
                        
20b1 : c517                     cmp zp7f
                                tst_a $80,fc
20b3 : 08              >            php         ;save flags
20b4 : c980            >            cmp #$80     ;test result
                       >            trap_ne
20b6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20b8 : 68              >            pla         ;load status
20b9 : 48              >            pha
                       >            cmp_flag fc
20ba : 0908            >            ora #decmode        ;ignore decimal mode bit
20bc : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
20be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20c0 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
20c1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
20c3 : 48              >            pha         ;use stack to load status
20c4 : a97f            >            lda #$7f     ;precharge accu
20c6 : 28              >            plp
                        
20c7 : c517                     cmp zp7f
                                tst_a $7f,fzc
20c9 : 08              >            php         ;save flags
20ca : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
20cc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20ce : 68              >            pla         ;load status
20cf : 48              >            pha
                       >            cmp_flag fzc
20d0 : 0908            >            ora #decmode        ;ignore decimal mode bit
20d2 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
20d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20d6 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
20d7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
20d9 : 48              >            pha         ;use stack to load status
20da : a97e            >            lda #$7e     ;precharge accu
20dc : 28              >            plp
                        
20dd : c517                     cmp zp7f
                                tst_a $7e,fn
20df : 08              >            php         ;save flags
20e0 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
20e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20e4 : 68              >            pla         ;load status
20e5 : 48              >            pha
                       >            cmp_flag fn
20e6 : 0908            >            ora #decmode        ;ignore decimal mode bit
20e8 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
20ea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20ec : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
20ed : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
20ef : 48              >            pha         ;use stack to load status
20f0 : a980            >            lda #$80     ;precharge accu
20f2 : 28              >            plp
                        
20f3 : c517                     cmp zp7f
                                tst_a $80,~fnz
20f5 : 08              >            php         ;save flags
20f6 : c980            >            cmp #$80     ;test result
                       >            trap_ne
20f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20fa : 68              >            pla         ;load status
20fb : 48              >            pha
                       >            cmp_flag ~fnz
20fc : 0908            >            ora #decmode        ;ignore decimal mode bit
20fe : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2100 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2102 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2103 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2105 : 48              >            pha         ;use stack to load status
2106 : a97f            >            lda #$7f     ;precharge accu
2108 : 28              >            plp
                        
2109 : c517                     cmp zp7f
                                tst_a $7f,~fn
210b : 08              >            php         ;save flags
210c : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
210e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2110 : 68              >            pla         ;load status
2111 : 48              >            pha
                       >            cmp_flag ~fn
2112 : 0908            >            ora #decmode        ;ignore decimal mode bit
2114 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2116 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2118 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2119 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
211b : 48              >            pha         ;use stack to load status
211c : a97e            >            lda #$7e     ;precharge accu
211e : 28              >            plp
                        
211f : c517                     cmp zp7f
                                tst_a $7e,~fzc
2121 : 08              >            php         ;save flags
2122 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2124 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2126 : 68              >            pla         ;load status
2127 : 48              >            pha
                       >            cmp_flag ~fzc
2128 : 0908            >            ora #decmode        ;ignore decimal mode bit
212a : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
212c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
212e : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
212f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2131 : 48              >            pha         ;use stack to load status
2132 : a980            >            lda #$80     ;precharge accu
2134 : 28              >            plp
                        
2135 : cd1b02                   cmp abs7f
                                tst_a $80,fc
2138 : 08              >            php         ;save flags
2139 : c980            >            cmp #$80     ;test result
                       >            trap_ne
213b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
213d : 68              >            pla         ;load status
213e : 48              >            pha
                       >            cmp_flag fc
213f : 0908            >            ora #decmode        ;ignore decimal mode bit
2141 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2143 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2145 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2146 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2148 : 48              >            pha         ;use stack to load status
2149 : a97f            >            lda #$7f     ;precharge accu
214b : 28              >            plp
                        
214c : cd1b02                   cmp abs7f
                                tst_a $7f,fzc
214f : 08              >            php         ;save flags
2150 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2152 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2154 : 68              >            pla         ;load status
2155 : 48              >            pha
                       >            cmp_flag fzc
2156 : 0908            >            ora #decmode        ;ignore decimal mode bit
2158 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
215a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
215c : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
215d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
215f : 48              >            pha         ;use stack to load status
2160 : a97e            >            lda #$7e     ;precharge accu
2162 : 28              >            plp
                        
2163 : cd1b02                   cmp abs7f
                                tst_a $7e,fn
2166 : 08              >            php         ;save flags
2167 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2169 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
216b : 68              >            pla         ;load status
216c : 48              >            pha
                       >            cmp_flag fn
216d : 0908            >            ora #decmode        ;ignore decimal mode bit
216f : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2171 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2173 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2174 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2176 : 48              >            pha         ;use stack to load status
2177 : a980            >            lda #$80     ;precharge accu
2179 : 28              >            plp
                        
217a : cd1b02                   cmp abs7f
                                tst_a $80,~fnz
217d : 08              >            php         ;save flags
217e : c980            >            cmp #$80     ;test result
                       >            trap_ne
2180 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2182 : 68              >            pla         ;load status
2183 : 48              >            pha
                       >            cmp_flag ~fnz
2184 : 0908            >            ora #decmode        ;ignore decimal mode bit
2186 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2188 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
218a : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
218b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
218d : 48              >            pha         ;use stack to load status
218e : a97f            >            lda #$7f     ;precharge accu
2190 : 28              >            plp
                        
2191 : cd1b02                   cmp abs7f
                                tst_a $7f,~fn
2194 : 08              >            php         ;save flags
2195 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2197 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2199 : 68              >            pla         ;load status
219a : 48              >            pha
                       >            cmp_flag ~fn
219b : 0908            >            ora #decmode        ;ignore decimal mode bit
219d : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
219f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21a1 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
21a2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
21a4 : 48              >            pha         ;use stack to load status
21a5 : a97e            >            lda #$7e     ;precharge accu
21a7 : 28              >            plp
                        
21a8 : cd1b02                   cmp abs7f
                                tst_a $7e,~fzc
21ab : 08              >            php         ;save flags
21ac : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
21ae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21b0 : 68              >            pla         ;load status
21b1 : 48              >            pha
                       >            cmp_flag ~fzc
21b2 : 0908            >            ora #decmode        ;ignore decimal mode bit
21b4 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
21b6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21b8 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
21b9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
21bb : 48              >            pha         ;use stack to load status
21bc : a980            >            lda #$80     ;precharge accu
21be : 28              >            plp
                        
21bf : c97f                     cmp #$7f
                                tst_a $80,fc
21c1 : 08              >            php         ;save flags
21c2 : c980            >            cmp #$80     ;test result
                       >            trap_ne
21c4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21c6 : 68              >            pla         ;load status
21c7 : 48              >            pha
                       >            cmp_flag fc
21c8 : 0908            >            ora #decmode        ;ignore decimal mode bit
21ca : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
21cc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21ce : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
21cf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
21d1 : 48              >            pha         ;use stack to load status
21d2 : a97f            >            lda #$7f     ;precharge accu
21d4 : 28              >            plp
                        
21d5 : c97f                     cmp #$7f
                                tst_a $7f,fzc
21d7 : 08              >            php         ;save flags
21d8 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
21da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21dc : 68              >            pla         ;load status
21dd : 48              >            pha
                       >            cmp_flag fzc
21de : 0908            >            ora #decmode        ;ignore decimal mode bit
21e0 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
21e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21e4 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
21e5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
21e7 : 48              >            pha         ;use stack to load status
21e8 : a97e            >            lda #$7e     ;precharge accu
21ea : 28              >            plp
                        
21eb : c97f                     cmp #$7f
                                tst_a $7e,fn
21ed : 08              >            php         ;save flags
21ee : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
21f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21f2 : 68              >            pla         ;load status
21f3 : 48              >            pha
                       >            cmp_flag fn
21f4 : 0908            >            ora #decmode        ;ignore decimal mode bit
21f6 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
21f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21fa : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
21fb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
21fd : 48              >            pha         ;use stack to load status
21fe : a980            >            lda #$80     ;precharge accu
2200 : 28              >            plp
                        
2201 : c97f                     cmp #$7f
                                tst_a $80,~fnz
2203 : 08              >            php         ;save flags
2204 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2206 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2208 : 68              >            pla         ;load status
2209 : 48              >            pha
                       >            cmp_flag ~fnz
220a : 0908            >            ora #decmode        ;ignore decimal mode bit
220c : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
220e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2210 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2211 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2213 : 48              >            pha         ;use stack to load status
2214 : a97f            >            lda #$7f     ;precharge accu
2216 : 28              >            plp
                        
2217 : c97f                     cmp #$7f
                                tst_a $7f,~fn
2219 : 08              >            php         ;save flags
221a : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
221c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
221e : 68              >            pla         ;load status
221f : 48              >            pha
                       >            cmp_flag ~fn
2220 : 0908            >            ora #decmode        ;ignore decimal mode bit
2222 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2224 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2226 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2227 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2229 : 48              >            pha         ;use stack to load status
222a : a97e            >            lda #$7e     ;precharge accu
222c : 28              >            plp
                        
222d : c97f                     cmp #$7f
                                tst_a $7e,~fzc
222f : 08              >            php         ;save flags
2230 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2232 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2234 : 68              >            pla         ;load status
2235 : 48              >            pha
                       >            cmp_flag ~fzc
2236 : 0908            >            ora #decmode        ;ignore decimal mode bit
2238 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
223a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
223c : 28              >            plp         ;restore status
                        
                        
223d : a204                     ldx #4          ;with indexing by X
                                set_a $80,0
                       >            load_flag 0
223f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2241 : 48              >            pha         ;use stack to load status
2242 : a980            >            lda #$80     ;precharge accu
2244 : 28              >            plp
                        
2245 : d513                     cmp zp1,x
                                tst_a $80,fc
2247 : 08              >            php         ;save flags
2248 : c980            >            cmp #$80     ;test result
                       >            trap_ne
224a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
224c : 68              >            pla         ;load status
224d : 48              >            pha
                       >            cmp_flag fc
224e : 0908            >            ora #decmode        ;ignore decimal mode bit
2250 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2252 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2254 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2255 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2257 : 48              >            pha         ;use stack to load status
2258 : a97f            >            lda #$7f     ;precharge accu
225a : 28              >            plp
                        
225b : d513                     cmp zp1,x
                                tst_a $7f,fzc
225d : 08              >            php         ;save flags
225e : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2260 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2262 : 68              >            pla         ;load status
2263 : 48              >            pha
                       >            cmp_flag fzc
2264 : 0908            >            ora #decmode        ;ignore decimal mode bit
2266 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2268 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
226a : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
226b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
226d : 48              >            pha         ;use stack to load status
226e : a97e            >            lda #$7e     ;precharge accu
2270 : 28              >            plp
                        
2271 : d513                     cmp zp1,x
                                tst_a $7e,fn
2273 : 08              >            php         ;save flags
2274 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2276 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2278 : 68              >            pla         ;load status
2279 : 48              >            pha
                       >            cmp_flag fn
227a : 0908            >            ora #decmode        ;ignore decimal mode bit
227c : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
227e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2280 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2281 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2283 : 48              >            pha         ;use stack to load status
2284 : a980            >            lda #$80     ;precharge accu
2286 : 28              >            plp
                        
2287 : d513                     cmp zp1,x
                                tst_a $80,~fnz
2289 : 08              >            php         ;save flags
228a : c980            >            cmp #$80     ;test result
                       >            trap_ne
228c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
228e : 68              >            pla         ;load status
228f : 48              >            pha
                       >            cmp_flag ~fnz
2290 : 0908            >            ora #decmode        ;ignore decimal mode bit
2292 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2294 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2296 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2297 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2299 : 48              >            pha         ;use stack to load status
229a : a97f            >            lda #$7f     ;precharge accu
229c : 28              >            plp
                        
229d : d513                     cmp zp1,x
                                tst_a $7f,~fn
229f : 08              >            php         ;save flags
22a0 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
22a2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22a4 : 68              >            pla         ;load status
22a5 : 48              >            pha
                       >            cmp_flag ~fn
22a6 : 0908            >            ora #decmode        ;ignore decimal mode bit
22a8 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
22aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22ac : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
22ad : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
22af : 48              >            pha         ;use stack to load status
22b0 : a97e            >            lda #$7e     ;precharge accu
22b2 : 28              >            plp
                        
22b3 : d513                     cmp zp1,x
                                tst_a $7e,~fzc
22b5 : 08              >            php         ;save flags
22b6 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
22b8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22ba : 68              >            pla         ;load status
22bb : 48              >            pha
                       >            cmp_flag ~fzc
22bc : 0908            >            ora #decmode        ;ignore decimal mode bit
22be : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
22c0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22c2 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
22c3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
22c5 : 48              >            pha         ;use stack to load status
22c6 : a980            >            lda #$80     ;precharge accu
22c8 : 28              >            plp
                        
22c9 : dd1702                   cmp abs1,x
                                tst_a $80,fc
22cc : 08              >            php         ;save flags
22cd : c980            >            cmp #$80     ;test result
                       >            trap_ne
22cf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22d1 : 68              >            pla         ;load status
22d2 : 48              >            pha
                       >            cmp_flag fc
22d3 : 0908            >            ora #decmode        ;ignore decimal mode bit
22d5 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
22d7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22d9 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
22da : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
22dc : 48              >            pha         ;use stack to load status
22dd : a97f            >            lda #$7f     ;precharge accu
22df : 28              >            plp
                        
22e0 : dd1702                   cmp abs1,x
                                tst_a $7f,fzc
22e3 : 08              >            php         ;save flags
22e4 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
22e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22e8 : 68              >            pla         ;load status
22e9 : 48              >            pha
                       >            cmp_flag fzc
22ea : 0908            >            ora #decmode        ;ignore decimal mode bit
22ec : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
22ee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22f0 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
22f1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
22f3 : 48              >            pha         ;use stack to load status
22f4 : a97e            >            lda #$7e     ;precharge accu
22f6 : 28              >            plp
                        
22f7 : dd1702                   cmp abs1,x
                                tst_a $7e,fn
22fa : 08              >            php         ;save flags
22fb : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
22fd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22ff : 68              >            pla         ;load status
2300 : 48              >            pha
                       >            cmp_flag fn
2301 : 0908            >            ora #decmode        ;ignore decimal mode bit
2303 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2305 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2307 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2308 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
230a : 48              >            pha         ;use stack to load status
230b : a980            >            lda #$80     ;precharge accu
230d : 28              >            plp
                        
230e : dd1702                   cmp abs1,x
                                tst_a $80,~fnz
2311 : 08              >            php         ;save flags
2312 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2314 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2316 : 68              >            pla         ;load status
2317 : 48              >            pha
                       >            cmp_flag ~fnz
2318 : 0908            >            ora #decmode        ;ignore decimal mode bit
231a : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
231c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
231e : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
231f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2321 : 48              >            pha         ;use stack to load status
2322 : a97f            >            lda #$7f     ;precharge accu
2324 : 28              >            plp
                        
2325 : dd1702                   cmp abs1,x
                                tst_a $7f,~fn
2328 : 08              >            php         ;save flags
2329 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
232b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
232d : 68              >            pla         ;load status
232e : 48              >            pha
                       >            cmp_flag ~fn
232f : 0908            >            ora #decmode        ;ignore decimal mode bit
2331 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2333 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2335 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2336 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2338 : 48              >            pha         ;use stack to load status
2339 : a97e            >            lda #$7e     ;precharge accu
233b : 28              >            plp
                        
233c : dd1702                   cmp abs1,x
                                tst_a $7e,~fzc
233f : 08              >            php         ;save flags
2340 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2342 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2344 : 68              >            pla         ;load status
2345 : 48              >            pha
                       >            cmp_flag ~fzc
2346 : 0908            >            ora #decmode        ;ignore decimal mode bit
2348 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
234a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
234c : 28              >            plp         ;restore status
                        
                        
234d : a004                     ldy #4          ;with indexing by Y
234f : a208                     ldx #8          ;with indexed indirect
                                set_a $80,0
                       >            load_flag 0
2351 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2353 : 48              >            pha         ;use stack to load status
2354 : a980            >            lda #$80     ;precharge accu
2356 : 28              >            plp
                        
2357 : d91702                   cmp abs1,y
                                tst_a $80,fc
235a : 08              >            php         ;save flags
235b : c980            >            cmp #$80     ;test result
                       >            trap_ne
235d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
235f : 68              >            pla         ;load status
2360 : 48              >            pha
                       >            cmp_flag fc
2361 : 0908            >            ora #decmode        ;ignore decimal mode bit
2363 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2365 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2367 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2368 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
236a : 48              >            pha         ;use stack to load status
236b : a97f            >            lda #$7f     ;precharge accu
236d : 28              >            plp
                        
236e : d91702                   cmp abs1,y
                                tst_a $7f,fzc
2371 : 08              >            php         ;save flags
2372 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2374 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2376 : 68              >            pla         ;load status
2377 : 48              >            pha
                       >            cmp_flag fzc
2378 : 0908            >            ora #decmode        ;ignore decimal mode bit
237a : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
237c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
237e : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
237f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2381 : 48              >            pha         ;use stack to load status
2382 : a97e            >            lda #$7e     ;precharge accu
2384 : 28              >            plp
                        
2385 : d91702                   cmp abs1,y
                                tst_a $7e,fn
2388 : 08              >            php         ;save flags
2389 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
238b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
238d : 68              >            pla         ;load status
238e : 48              >            pha
                       >            cmp_flag fn
238f : 0908            >            ora #decmode        ;ignore decimal mode bit
2391 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2393 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2395 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2396 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2398 : 48              >            pha         ;use stack to load status
2399 : a980            >            lda #$80     ;precharge accu
239b : 28              >            plp
                        
239c : d91702                   cmp abs1,y
                                tst_a $80,~fnz
239f : 08              >            php         ;save flags
23a0 : c980            >            cmp #$80     ;test result
                       >            trap_ne
23a2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23a4 : 68              >            pla         ;load status
23a5 : 48              >            pha
                       >            cmp_flag ~fnz
23a6 : 0908            >            ora #decmode        ;ignore decimal mode bit
23a8 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
23aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23ac : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
23ad : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
23af : 48              >            pha         ;use stack to load status
23b0 : a97f            >            lda #$7f     ;precharge accu
23b2 : 28              >            plp
                        
23b3 : d91702                   cmp abs1,y
                                tst_a $7f,~fn
23b6 : 08              >            php         ;save flags
23b7 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
23b9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23bb : 68              >            pla         ;load status
23bc : 48              >            pha
                       >            cmp_flag ~fn
23bd : 0908            >            ora #decmode        ;ignore decimal mode bit
23bf : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
23c1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23c3 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
23c4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
23c6 : 48              >            pha         ;use stack to load status
23c7 : a97e            >            lda #$7e     ;precharge accu
23c9 : 28              >            plp
                        
23ca : d91702                   cmp abs1,y
                                tst_a $7e,~fzc
23cd : 08              >            php         ;save flags
23ce : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
23d0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23d2 : 68              >            pla         ;load status
23d3 : 48              >            pha
                       >            cmp_flag ~fzc
23d4 : 0908            >            ora #decmode        ;ignore decimal mode bit
23d6 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
23d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23da : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
23db : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
23dd : 48              >            pha         ;use stack to load status
23de : a980            >            lda #$80     ;precharge accu
23e0 : 28              >            plp
                        
23e1 : c124                     cmp (ind1,x)
                                tst_a $80,fc
23e3 : 08              >            php         ;save flags
23e4 : c980            >            cmp #$80     ;test result
                       >            trap_ne
23e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23e8 : 68              >            pla         ;load status
23e9 : 48              >            pha
                       >            cmp_flag fc
23ea : 0908            >            ora #decmode        ;ignore decimal mode bit
23ec : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
23ee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23f0 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
23f1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
23f3 : 48              >            pha         ;use stack to load status
23f4 : a97f            >            lda #$7f     ;precharge accu
23f6 : 28              >            plp
                        
23f7 : c124                     cmp (ind1,x)
                                tst_a $7f,fzc
23f9 : 08              >            php         ;save flags
23fa : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
23fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23fe : 68              >            pla         ;load status
23ff : 48              >            pha
                       >            cmp_flag fzc
2400 : 0908            >            ora #decmode        ;ignore decimal mode bit
2402 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2404 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2406 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2407 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2409 : 48              >            pha         ;use stack to load status
240a : a97e            >            lda #$7e     ;precharge accu
240c : 28              >            plp
                        
240d : c124                     cmp (ind1,x)
                                tst_a $7e,fn
240f : 08              >            php         ;save flags
2410 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2412 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2414 : 68              >            pla         ;load status
2415 : 48              >            pha
                       >            cmp_flag fn
2416 : 0908            >            ora #decmode        ;ignore decimal mode bit
2418 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
241a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
241c : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
241d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
241f : 48              >            pha         ;use stack to load status
2420 : a980            >            lda #$80     ;precharge accu
2422 : 28              >            plp
                        
2423 : c124                     cmp (ind1,x)
                                tst_a $80,~fnz
2425 : 08              >            php         ;save flags
2426 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2428 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
242a : 68              >            pla         ;load status
242b : 48              >            pha
                       >            cmp_flag ~fnz
242c : 0908            >            ora #decmode        ;ignore decimal mode bit
242e : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2430 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2432 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2433 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2435 : 48              >            pha         ;use stack to load status
2436 : a97f            >            lda #$7f     ;precharge accu
2438 : 28              >            plp
                        
2439 : c124                     cmp (ind1,x)
                                tst_a $7f,~fn
243b : 08              >            php         ;save flags
243c : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
243e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2440 : 68              >            pla         ;load status
2441 : 48              >            pha
                       >            cmp_flag ~fn
2442 : 0908            >            ora #decmode        ;ignore decimal mode bit
2444 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2446 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2448 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2449 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
244b : 48              >            pha         ;use stack to load status
244c : a97e            >            lda #$7e     ;precharge accu
244e : 28              >            plp
                        
244f : c124                     cmp (ind1,x)
                                tst_a $7e,~fzc
2451 : 08              >            php         ;save flags
2452 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2454 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2456 : 68              >            pla         ;load status
2457 : 48              >            pha
                       >            cmp_flag ~fzc
2458 : 0908            >            ora #decmode        ;ignore decimal mode bit
245a : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
245c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
245e : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
245f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2461 : 48              >            pha         ;use stack to load status
2462 : a980            >            lda #$80     ;precharge accu
2464 : 28              >            plp
                        
2465 : d124                     cmp (ind1),y
                                tst_a $80,fc
2467 : 08              >            php         ;save flags
2468 : c980            >            cmp #$80     ;test result
                       >            trap_ne
246a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
246c : 68              >            pla         ;load status
246d : 48              >            pha
                       >            cmp_flag fc
246e : 0908            >            ora #decmode        ;ignore decimal mode bit
2470 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2472 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2474 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2475 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2477 : 48              >            pha         ;use stack to load status
2478 : a97f            >            lda #$7f     ;precharge accu
247a : 28              >            plp
                        
247b : d124                     cmp (ind1),y
                                tst_a $7f,fzc
247d : 08              >            php         ;save flags
247e : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2480 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2482 : 68              >            pla         ;load status
2483 : 48              >            pha
                       >            cmp_flag fzc
2484 : 0908            >            ora #decmode        ;ignore decimal mode bit
2486 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2488 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
248a : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
248b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
248d : 48              >            pha         ;use stack to load status
248e : a97e            >            lda #$7e     ;precharge accu
2490 : 28              >            plp
                        
2491 : d124                     cmp (ind1),y
                                tst_a $7e,fn
2493 : 08              >            php         ;save flags
2494 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2496 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2498 : 68              >            pla         ;load status
2499 : 48              >            pha
                       >            cmp_flag fn
249a : 0908            >            ora #decmode        ;ignore decimal mode bit
249c : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
249e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24a0 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
24a1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
24a3 : 48              >            pha         ;use stack to load status
24a4 : a980            >            lda #$80     ;precharge accu
24a6 : 28              >            plp
                        
24a7 : d124                     cmp (ind1),y
                                tst_a $80,~fnz
24a9 : 08              >            php         ;save flags
24aa : c980            >            cmp #$80     ;test result
                       >            trap_ne
24ac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24ae : 68              >            pla         ;load status
24af : 48              >            pha
                       >            cmp_flag ~fnz
24b0 : 0908            >            ora #decmode        ;ignore decimal mode bit
24b2 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
24b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24b6 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
24b7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
24b9 : 48              >            pha         ;use stack to load status
24ba : a97f            >            lda #$7f     ;precharge accu
24bc : 28              >            plp
                        
24bd : d124                     cmp (ind1),y
                                tst_a $7f,~fn
24bf : 08              >            php         ;save flags
24c0 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
24c2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24c4 : 68              >            pla         ;load status
24c5 : 48              >            pha
                       >            cmp_flag ~fn
24c6 : 0908            >            ora #decmode        ;ignore decimal mode bit
24c8 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
24ca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24cc : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
24cd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
24cf : 48              >            pha         ;use stack to load status
24d0 : a97e            >            lda #$7e     ;precharge accu
24d2 : 28              >            plp
                        
24d3 : d124                     cmp (ind1),y
                                tst_a $7e,~fzc
24d5 : 08              >            php         ;save flags
24d6 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
24d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24da : 68              >            pla         ;load status
24db : 48              >            pha
                       >            cmp_flag ~fzc
24dc : 0908            >            ora #decmode        ;ignore decimal mode bit
24de : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
24e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24e2 : 28              >            plp         ;restore status
                        
                                next_test
24e3 : ad0002          >            lda test_case   ;previous test
24e6 : c91c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
24e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001d =                 >test_num = test_num + 1
24ea : a91d            >            lda #test_num   ;*** next tests' number
24ec : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing shifts - ASL LSR ROL ROR all addressing modes
                        ; shifts - accumulator
24ef : a203                     ldx #3
24f1 :                  tasl
                                set_ax zp1,0
                       >            load_flag 0
24f1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
24f3 : 48              >            pha         ;use stack to load status
24f4 : b513            >            lda zp1,x    ;precharge accu
24f6 : 28              >            plp
                        
24f7 : 0a                       asl a
                                tst_ax rASL,fASL,0
24f8 : 08              >            php         ;save flags
24f9 : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
24fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24fe : 68              >            pla         ;load status
                       >            eor_flag 0
24ff : 0908            >            ora #decmode        ;ignore decimal mode bit
2501 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2503 : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
2506 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2508 : ca                       dex
2509 : 10e6                     bpl tasl
250b : a203                     ldx #3
250d :                  tasl1
                                set_ax zp1,$ff
                       >            load_flag $ff
250d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
250f : 48              >            pha         ;use stack to load status
2510 : b513            >            lda zp1,x    ;precharge accu
2512 : 28              >            plp
                        
2513 : 0a                       asl a
                                tst_ax rASL,fASL,$ff-fnzc
2514 : 08              >            php         ;save flags
2515 : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
2518 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
251a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
251b : 0908            >            ora #decmode        ;ignore decimal mode bit
251d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
251f : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
2522 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2524 : ca                       dex
2525 : 10e6                     bpl tasl1
                        
2527 : a203                     ldx #3
2529 :                  tlsr
                                set_ax zp1,0
                       >            load_flag 0
2529 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
252b : 48              >            pha         ;use stack to load status
252c : b513            >            lda zp1,x    ;precharge accu
252e : 28              >            plp
                        
252f : 4a                       lsr a
                                tst_ax rLSR,fLSR,0
2530 : 08              >            php         ;save flags
2531 : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
2534 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2536 : 68              >            pla         ;load status
                       >            eor_flag 0
2537 : 0908            >            ora #decmode        ;ignore decimal mode bit
2539 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
253b : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
253e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2540 : ca                       dex
2541 : 10e6                     bpl tlsr
2543 : a203                     ldx #3
2545 :                  tlsr1
                                set_ax zp1,$ff
                       >            load_flag $ff
2545 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2547 : 48              >            pha         ;use stack to load status
2548 : b513            >            lda zp1,x    ;precharge accu
254a : 28              >            plp
                        
254b : 4a                       lsr a
                                tst_ax rLSR,fLSR,$ff-fnzc
254c : 08              >            php         ;save flags
254d : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
2550 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2552 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2553 : 0908            >            ora #decmode        ;ignore decimal mode bit
2555 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2557 : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
255a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
255c : ca                       dex
255d : 10e6                     bpl tlsr1
                        
255f : a203                     ldx #3
2561 :                  trol
                                set_ax zp1,0
                       >            load_flag 0
2561 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2563 : 48              >            pha         ;use stack to load status
2564 : b513            >            lda zp1,x    ;precharge accu
2566 : 28              >            plp
                        
2567 : 2a                       rol a
                                tst_ax rROL,fROL,0
2568 : 08              >            php         ;save flags
2569 : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
256c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
256e : 68              >            pla         ;load status
                       >            eor_flag 0
256f : 0908            >            ora #decmode        ;ignore decimal mode bit
2571 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2573 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
2576 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2578 : ca                       dex
2579 : 10e6                     bpl trol
257b : a203                     ldx #3
257d :                  trol1
                                set_ax zp1,$ff-fc
                       >            load_flag $ff-fc
257d : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
257f : 48              >            pha         ;use stack to load status
2580 : b513            >            lda zp1,x    ;precharge accu
2582 : 28              >            plp
                        
2583 : 2a                       rol a
                                tst_ax rROL,fROL,$ff-fnzc
2584 : 08              >            php         ;save flags
2585 : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
2588 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
258a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
258b : 0908            >            ora #decmode        ;ignore decimal mode bit
258d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
258f : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
2592 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2594 : ca                       dex
2595 : 10e6                     bpl trol1
                        
2597 : a203                     ldx #3
2599 :                  trolc
                                set_ax zp1,fc
                       >            load_flag fc
2599 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
259b : 48              >            pha         ;use stack to load status
259c : b513            >            lda zp1,x    ;precharge accu
259e : 28              >            plp
                        
259f : 2a                       rol a
                                tst_ax rROLc,fROLc,0
25a0 : 08              >            php         ;save flags
25a1 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
25a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25a6 : 68              >            pla         ;load status
                       >            eor_flag 0
25a7 : 0908            >            ora #decmode        ;ignore decimal mode bit
25a9 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
25ab : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
25ae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
25b0 : ca                       dex
25b1 : 10e6                     bpl trolc
25b3 : a203                     ldx #3
25b5 :                  trolc1
                                set_ax zp1,$ff
                       >            load_flag $ff
25b5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
25b7 : 48              >            pha         ;use stack to load status
25b8 : b513            >            lda zp1,x    ;precharge accu
25ba : 28              >            plp
                        
25bb : 2a                       rol a
                                tst_ax rROLc,fROLc,$ff-fnzc
25bc : 08              >            php         ;save flags
25bd : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
25c0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25c2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
25c3 : 0908            >            ora #decmode        ;ignore decimal mode bit
25c5 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
25c7 : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
25ca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
25cc : ca                       dex
25cd : 10e6                     bpl trolc1
                        
25cf : a203                     ldx #3
25d1 :                  tror
                                set_ax zp1,0
                       >            load_flag 0
25d1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
25d3 : 48              >            pha         ;use stack to load status
25d4 : b513            >            lda zp1,x    ;precharge accu
25d6 : 28              >            plp
                        
25d7 : 6a                       ror a
                                tst_ax rROR,fROR,0
25d8 : 08              >            php         ;save flags
25d9 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
25dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25de : 68              >            pla         ;load status
                       >            eor_flag 0
25df : 0908            >            ora #decmode        ;ignore decimal mode bit
25e1 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
25e3 : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
25e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
25e8 : ca                       dex
25e9 : 10e6                     bpl tror
25eb : a203                     ldx #3
25ed :                  tror1
                                set_ax zp1,$ff-fc
                       >            load_flag $ff-fc
25ed : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
25ef : 48              >            pha         ;use stack to load status
25f0 : b513            >            lda zp1,x    ;precharge accu
25f2 : 28              >            plp
                        
25f3 : 6a                       ror a
                                tst_ax rROR,fROR,$ff-fnzc
25f4 : 08              >            php         ;save flags
25f5 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
25f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25fa : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
25fb : 0908            >            ora #decmode        ;ignore decimal mode bit
25fd : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
25ff : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
2602 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2604 : ca                       dex
2605 : 10e6                     bpl tror1
                        
2607 : a203                     ldx #3
2609 :                  trorc
                                set_ax zp1,fc
                       >            load_flag fc
2609 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
260b : 48              >            pha         ;use stack to load status
260c : b513            >            lda zp1,x    ;precharge accu
260e : 28              >            plp
                        
260f : 6a                       ror a
                                tst_ax rRORc,fRORc,0
2610 : 08              >            php         ;save flags
2611 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
2614 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2616 : 68              >            pla         ;load status
                       >            eor_flag 0
2617 : 0908            >            ora #decmode        ;ignore decimal mode bit
2619 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
261b : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
261e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2620 : ca                       dex
2621 : 10e6                     bpl trorc
2623 : a203                     ldx #3
2625 :                  trorc1
                                set_ax zp1,$ff
                       >            load_flag $ff
2625 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2627 : 48              >            pha         ;use stack to load status
2628 : b513            >            lda zp1,x    ;precharge accu
262a : 28              >            plp
                        
262b : 6a                       ror a
                                tst_ax rRORc,fRORc,$ff-fnzc
262c : 08              >            php         ;save flags
262d : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
2630 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2632 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2633 : 0908            >            ora #decmode        ;ignore decimal mode bit
2635 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2637 : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
263a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
263c : ca                       dex
263d : 10e6                     bpl trorc1
                                next_test
263f : ad0002          >            lda test_case   ;previous test
2642 : c91d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2644 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001e =                 >test_num = test_num + 1
2646 : a91e            >            lda #test_num   ;*** next tests' number
2648 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - zeropage
264b : a203                     ldx #3
264d :                  tasl2
                                set_z zp1,0
                       >            load_flag 0
264d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
264f : 48              >            pha         ;use stack to load status
2650 : b513            >            lda zp1,x    ;load to zeropage
2652 : 850c            >            sta zpt
2654 : 28              >            plp
                        
2655 : 060c                     asl zpt
                                tst_z rASL,fASL,0
2657 : 08              >            php         ;save flags
2658 : a50c            >            lda zpt
265a : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
265d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
265f : 68              >            pla         ;load status
                       >            eor_flag 0
2660 : 0908            >            ora #decmode        ;ignore decimal mode bit
2662 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2664 : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
2667 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2669 : ca                       dex
266a : 10e1                     bpl tasl2
266c : a203                     ldx #3
266e :                  tasl3
                                set_z zp1,$ff
                       >            load_flag $ff
266e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2670 : 48              >            pha         ;use stack to load status
2671 : b513            >            lda zp1,x    ;load to zeropage
2673 : 850c            >            sta zpt
2675 : 28              >            plp
                        
2676 : 060c                     asl zpt
                                tst_z rASL,fASL,$ff-fnzc
2678 : 08              >            php         ;save flags
2679 : a50c            >            lda zpt
267b : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
267e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2680 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2681 : 0908            >            ora #decmode        ;ignore decimal mode bit
2683 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2685 : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
2688 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
268a : ca                       dex
268b : 10e1                     bpl tasl3
                        
268d : a203                     ldx #3
268f :                  tlsr2
                                set_z zp1,0
                       >            load_flag 0
268f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2691 : 48              >            pha         ;use stack to load status
2692 : b513            >            lda zp1,x    ;load to zeropage
2694 : 850c            >            sta zpt
2696 : 28              >            plp
                        
2697 : 460c                     lsr zpt
                                tst_z rLSR,fLSR,0
2699 : 08              >            php         ;save flags
269a : a50c            >            lda zpt
269c : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
269f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26a1 : 68              >            pla         ;load status
                       >            eor_flag 0
26a2 : 0908            >            ora #decmode        ;ignore decimal mode bit
26a4 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
26a6 : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
26a9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
26ab : ca                       dex
26ac : 10e1                     bpl tlsr2
26ae : a203                     ldx #3
26b0 :                  tlsr3
                                set_z zp1,$ff
                       >            load_flag $ff
26b0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
26b2 : 48              >            pha         ;use stack to load status
26b3 : b513            >            lda zp1,x    ;load to zeropage
26b5 : 850c            >            sta zpt
26b7 : 28              >            plp
                        
26b8 : 460c                     lsr zpt
                                tst_z rLSR,fLSR,$ff-fnzc
26ba : 08              >            php         ;save flags
26bb : a50c            >            lda zpt
26bd : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
26c0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26c2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
26c3 : 0908            >            ora #decmode        ;ignore decimal mode bit
26c5 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
26c7 : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
26ca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
26cc : ca                       dex
26cd : 10e1                     bpl tlsr3
                        
26cf : a203                     ldx #3
26d1 :                  trol2
                                set_z zp1,0
                       >            load_flag 0
26d1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
26d3 : 48              >            pha         ;use stack to load status
26d4 : b513            >            lda zp1,x    ;load to zeropage
26d6 : 850c            >            sta zpt
26d8 : 28              >            plp
                        
26d9 : 260c                     rol zpt
                                tst_z rROL,fROL,0
26db : 08              >            php         ;save flags
26dc : a50c            >            lda zpt
26de : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
26e1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26e3 : 68              >            pla         ;load status
                       >            eor_flag 0
26e4 : 0908            >            ora #decmode        ;ignore decimal mode bit
26e6 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
26e8 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
26eb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
26ed : ca                       dex
26ee : 10e1                     bpl trol2
26f0 : a203                     ldx #3
26f2 :                  trol3
                                set_z zp1,$ff-fc
                       >            load_flag $ff-fc
26f2 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
26f4 : 48              >            pha         ;use stack to load status
26f5 : b513            >            lda zp1,x    ;load to zeropage
26f7 : 850c            >            sta zpt
26f9 : 28              >            plp
                        
26fa : 260c                     rol zpt
                                tst_z rROL,fROL,$ff-fnzc
26fc : 08              >            php         ;save flags
26fd : a50c            >            lda zpt
26ff : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
2702 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2704 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2705 : 0908            >            ora #decmode        ;ignore decimal mode bit
2707 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2709 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
270c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
270e : ca                       dex
270f : 10e1                     bpl trol3
                        
2711 : a203                     ldx #3
2713 :                  trolc2
                                set_z zp1,fc
                       >            load_flag fc
2713 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2715 : 48              >            pha         ;use stack to load status
2716 : b513            >            lda zp1,x    ;load to zeropage
2718 : 850c            >            sta zpt
271a : 28              >            plp
                        
271b : 260c                     rol zpt
                                tst_z rROLc,fROLc,0
271d : 08              >            php         ;save flags
271e : a50c            >            lda zpt
2720 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
2723 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2725 : 68              >            pla         ;load status
                       >            eor_flag 0
2726 : 0908            >            ora #decmode        ;ignore decimal mode bit
2728 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
272a : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
272d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
272f : ca                       dex
2730 : 10e1                     bpl trolc2
2732 : a203                     ldx #3
2734 :                  trolc3
                                set_z zp1,$ff
                       >            load_flag $ff
2734 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2736 : 48              >            pha         ;use stack to load status
2737 : b513            >            lda zp1,x    ;load to zeropage
2739 : 850c            >            sta zpt
273b : 28              >            plp
                        
273c : 260c                     rol zpt
                                tst_z rROLc,fROLc,$ff-fnzc
273e : 08              >            php         ;save flags
273f : a50c            >            lda zpt
2741 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
2744 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2746 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2747 : 0908            >            ora #decmode        ;ignore decimal mode bit
2749 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
274b : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
274e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2750 : ca                       dex
2751 : 10e1                     bpl trolc3
                        
2753 : a203                     ldx #3
2755 :                  tror2
                                set_z zp1,0
                       >            load_flag 0
2755 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2757 : 48              >            pha         ;use stack to load status
2758 : b513            >            lda zp1,x    ;load to zeropage
275a : 850c            >            sta zpt
275c : 28              >            plp
                        
275d : 660c                     ror zpt
                                tst_z rROR,fROR,0
275f : 08              >            php         ;save flags
2760 : a50c            >            lda zpt
2762 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
2765 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2767 : 68              >            pla         ;load status
                       >            eor_flag 0
2768 : 0908            >            ora #decmode        ;ignore decimal mode bit
276a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
276c : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
276f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2771 : ca                       dex
2772 : 10e1                     bpl tror2
2774 : a203                     ldx #3
2776 :                  tror3
                                set_z zp1,$ff-fc
                       >            load_flag $ff-fc
2776 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2778 : 48              >            pha         ;use stack to load status
2779 : b513            >            lda zp1,x    ;load to zeropage
277b : 850c            >            sta zpt
277d : 28              >            plp
                        
277e : 660c                     ror zpt
                                tst_z rROR,fROR,$ff-fnzc
2780 : 08              >            php         ;save flags
2781 : a50c            >            lda zpt
2783 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
2786 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2788 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2789 : 0908            >            ora #decmode        ;ignore decimal mode bit
278b : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
278d : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
2790 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2792 : ca                       dex
2793 : 10e1                     bpl tror3
                        
2795 : a203                     ldx #3
2797 :                  trorc2
                                set_z zp1,fc
                       >            load_flag fc
2797 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2799 : 48              >            pha         ;use stack to load status
279a : b513            >            lda zp1,x    ;load to zeropage
279c : 850c            >            sta zpt
279e : 28              >            plp
                        
279f : 660c                     ror zpt
                                tst_z rRORc,fRORc,0
27a1 : 08              >            php         ;save flags
27a2 : a50c            >            lda zpt
27a4 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
27a7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
27a9 : 68              >            pla         ;load status
                       >            eor_flag 0
27aa : 0908            >            ora #decmode        ;ignore decimal mode bit
27ac : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
27ae : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
27b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
27b3 : ca                       dex
27b4 : 10e1                     bpl trorc2
27b6 : a203                     ldx #3
27b8 :                  trorc3
                                set_z zp1,$ff
                       >            load_flag $ff
27b8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
27ba : 48              >            pha         ;use stack to load status
27bb : b513            >            lda zp1,x    ;load to zeropage
27bd : 850c            >            sta zpt
27bf : 28              >            plp
                        
27c0 : 660c                     ror zpt
                                tst_z rRORc,fRORc,$ff-fnzc
27c2 : 08              >            php         ;save flags
27c3 : a50c            >            lda zpt
27c5 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
27c8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
27ca : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
27cb : 0908            >            ora #decmode        ;ignore decimal mode bit
27cd : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
27cf : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
27d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
27d4 : ca                       dex
27d5 : 10e1                     bpl trorc3
                                next_test
27d7 : ad0002          >            lda test_case   ;previous test
27da : c91e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
27dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001f =                 >test_num = test_num + 1
27de : a91f            >            lda #test_num   ;*** next tests' number
27e0 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - absolute
27e3 : a203                     ldx #3
27e5 :                  tasl4
                                set_abs zp1,0
                       >            load_flag 0
27e5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
27e7 : 48              >            pha         ;use stack to load status
27e8 : b513            >            lda zp1,x    ;load to memory
27ea : 8d0302          >            sta abst
27ed : 28              >            plp
                        
27ee : 0e0302                   asl abst
                                tst_abs rASL,fASL,0
27f1 : 08              >            php         ;save flags
27f2 : ad0302          >            lda abst
27f5 : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
27f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
27fa : 68              >            pla         ;load status
                       >            eor_flag 0
27fb : 0908            >            ora #decmode        ;ignore decimal mode bit
27fd : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
27ff : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
2802 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2804 : ca                       dex
2805 : 10de                     bpl tasl4
2807 : a203                     ldx #3
2809 :                  tasl5
                                set_abs zp1,$ff
                       >            load_flag $ff
2809 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
280b : 48              >            pha         ;use stack to load status
280c : b513            >            lda zp1,x    ;load to memory
280e : 8d0302          >            sta abst
2811 : 28              >            plp
                        
2812 : 0e0302                   asl abst
                                tst_abs rASL,fASL,$ff-fnzc
2815 : 08              >            php         ;save flags
2816 : ad0302          >            lda abst
2819 : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
281c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
281e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
281f : 0908            >            ora #decmode        ;ignore decimal mode bit
2821 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2823 : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
2826 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2828 : ca                       dex
2829 : 10de                     bpl tasl5
                        
282b : a203                     ldx #3
282d :                  tlsr4
                                set_abs zp1,0
                       >            load_flag 0
282d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
282f : 48              >            pha         ;use stack to load status
2830 : b513            >            lda zp1,x    ;load to memory
2832 : 8d0302          >            sta abst
2835 : 28              >            plp
                        
2836 : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,0
2839 : 08              >            php         ;save flags
283a : ad0302          >            lda abst
283d : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
2840 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2842 : 68              >            pla         ;load status
                       >            eor_flag 0
2843 : 0908            >            ora #decmode        ;ignore decimal mode bit
2845 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2847 : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
284a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
284c : ca                       dex
284d : 10de                     bpl tlsr4
284f : a203                     ldx #3
2851 :                  tlsr5
                                set_abs zp1,$ff
                       >            load_flag $ff
2851 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2853 : 48              >            pha         ;use stack to load status
2854 : b513            >            lda zp1,x    ;load to memory
2856 : 8d0302          >            sta abst
2859 : 28              >            plp
                        
285a : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,$ff-fnzc
285d : 08              >            php         ;save flags
285e : ad0302          >            lda abst
2861 : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
2864 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2866 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2867 : 0908            >            ora #decmode        ;ignore decimal mode bit
2869 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
286b : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
286e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2870 : ca                       dex
2871 : 10de                     bpl tlsr5
                        
2873 : a203                     ldx #3
2875 :                  trol4
                                set_abs zp1,0
                       >            load_flag 0
2875 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2877 : 48              >            pha         ;use stack to load status
2878 : b513            >            lda zp1,x    ;load to memory
287a : 8d0302          >            sta abst
287d : 28              >            plp
                        
287e : 2e0302                   rol abst
                                tst_abs rROL,fROL,0
2881 : 08              >            php         ;save flags
2882 : ad0302          >            lda abst
2885 : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
2888 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
288a : 68              >            pla         ;load status
                       >            eor_flag 0
288b : 0908            >            ora #decmode        ;ignore decimal mode bit
288d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
288f : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
2892 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2894 : ca                       dex
2895 : 10de                     bpl trol4
2897 : a203                     ldx #3
2899 :                  trol5
                                set_abs zp1,$ff-fc
                       >            load_flag $ff-fc
2899 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
289b : 48              >            pha         ;use stack to load status
289c : b513            >            lda zp1,x    ;load to memory
289e : 8d0302          >            sta abst
28a1 : 28              >            plp
                        
28a2 : 2e0302                   rol abst
                                tst_abs rROL,fROL,$ff-fnzc
28a5 : 08              >            php         ;save flags
28a6 : ad0302          >            lda abst
28a9 : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
28ac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28ae : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
28af : 0908            >            ora #decmode        ;ignore decimal mode bit
28b1 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
28b3 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
28b6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
28b8 : ca                       dex
28b9 : 10de                     bpl trol5
                        
28bb : a203                     ldx #3
28bd :                  trolc4
                                set_abs zp1,fc
                       >            load_flag fc
28bd : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
28bf : 48              >            pha         ;use stack to load status
28c0 : b513            >            lda zp1,x    ;load to memory
28c2 : 8d0302          >            sta abst
28c5 : 28              >            plp
                        
28c6 : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,0
28c9 : 08              >            php         ;save flags
28ca : ad0302          >            lda abst
28cd : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
28d0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28d2 : 68              >            pla         ;load status
                       >            eor_flag 0
28d3 : 0908            >            ora #decmode        ;ignore decimal mode bit
28d5 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
28d7 : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
28da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
28dc : ca                       dex
28dd : 10de                     bpl trolc4
28df : a203                     ldx #3
28e1 :                  trolc5
                                set_abs zp1,$ff
                       >            load_flag $ff
28e1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
28e3 : 48              >            pha         ;use stack to load status
28e4 : b513            >            lda zp1,x    ;load to memory
28e6 : 8d0302          >            sta abst
28e9 : 28              >            plp
                        
28ea : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,$ff-fnzc
28ed : 08              >            php         ;save flags
28ee : ad0302          >            lda abst
28f1 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
28f4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28f6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
28f7 : 0908            >            ora #decmode        ;ignore decimal mode bit
28f9 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
28fb : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
28fe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2900 : ca                       dex
2901 : 10de                     bpl trolc5
                        
2903 : a203                     ldx #3
2905 :                  tror4
                                set_abs zp1,0
                       >            load_flag 0
2905 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2907 : 48              >            pha         ;use stack to load status
2908 : b513            >            lda zp1,x    ;load to memory
290a : 8d0302          >            sta abst
290d : 28              >            plp
                        
290e : 6e0302                   ror abst
                                tst_abs rROR,fROR,0
2911 : 08              >            php         ;save flags
2912 : ad0302          >            lda abst
2915 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
2918 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
291a : 68              >            pla         ;load status
                       >            eor_flag 0
291b : 0908            >            ora #decmode        ;ignore decimal mode bit
291d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
291f : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
2922 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2924 : ca                       dex
2925 : 10de                     bpl tror4
2927 : a203                     ldx #3
2929 :                  tror5
                                set_abs zp1,$ff-fc
                       >            load_flag $ff-fc
2929 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
292b : 48              >            pha         ;use stack to load status
292c : b513            >            lda zp1,x    ;load to memory
292e : 8d0302          >            sta abst
2931 : 28              >            plp
                        
2932 : 6e0302                   ror abst
                                tst_abs rROR,fROR,$ff-fnzc
2935 : 08              >            php         ;save flags
2936 : ad0302          >            lda abst
2939 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
293c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
293e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
293f : 0908            >            ora #decmode        ;ignore decimal mode bit
2941 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2943 : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
2946 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2948 : ca                       dex
2949 : 10de                     bpl tror5
                        
294b : a203                     ldx #3
294d :                  trorc4
                                set_abs zp1,fc
                       >            load_flag fc
294d : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
294f : 48              >            pha         ;use stack to load status
2950 : b513            >            lda zp1,x    ;load to memory
2952 : 8d0302          >            sta abst
2955 : 28              >            plp
                        
2956 : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,0
2959 : 08              >            php         ;save flags
295a : ad0302          >            lda abst
295d : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
2960 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2962 : 68              >            pla         ;load status
                       >            eor_flag 0
2963 : 0908            >            ora #decmode        ;ignore decimal mode bit
2965 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2967 : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
296a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
296c : ca                       dex
296d : 10de                     bpl trorc4
296f : a203                     ldx #3
2971 :                  trorc5
                                set_abs zp1,$ff
                       >            load_flag $ff
2971 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2973 : 48              >            pha         ;use stack to load status
2974 : b513            >            lda zp1,x    ;load to memory
2976 : 8d0302          >            sta abst
2979 : 28              >            plp
                        
297a : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,$ff-fnzc
297d : 08              >            php         ;save flags
297e : ad0302          >            lda abst
2981 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
2984 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2986 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2987 : 0908            >            ora #decmode        ;ignore decimal mode bit
2989 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
298b : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
298e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2990 : ca                       dex
2991 : 10de                     bpl trorc5
                                next_test
2993 : ad0002          >            lda test_case   ;previous test
2996 : c91f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2998 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0020 =                 >test_num = test_num + 1
299a : a920            >            lda #test_num   ;*** next tests' number
299c : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - zp indexed
299f : a203                     ldx #3
29a1 :                  tasl6
                                set_zx zp1,0
                       >            load_flag 0
29a1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
29a3 : 48              >            pha         ;use stack to load status
29a4 : b513            >            lda zp1,x    ;load to indexed zeropage
29a6 : 950c            >            sta zpt,x
29a8 : 28              >            plp
                        
29a9 : 160c                     asl zpt,x
                                tst_zx rASL,fASL,0
29ab : 08              >            php         ;save flags
29ac : b50c            >            lda zpt,x
29ae : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
29b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29b3 : 68              >            pla         ;load status
                       >            eor_flag 0
29b4 : 0908            >            ora #decmode        ;ignore decimal mode bit
29b6 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
29b8 : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
29bb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
29bd : ca                       dex
29be : 10e1                     bpl tasl6
29c0 : a203                     ldx #3
29c2 :                  tasl7
                                set_zx zp1,$ff
                       >            load_flag $ff
29c2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
29c4 : 48              >            pha         ;use stack to load status
29c5 : b513            >            lda zp1,x    ;load to indexed zeropage
29c7 : 950c            >            sta zpt,x
29c9 : 28              >            plp
                        
29ca : 160c                     asl zpt,x
                                tst_zx rASL,fASL,$ff-fnzc
29cc : 08              >            php         ;save flags
29cd : b50c            >            lda zpt,x
29cf : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
29d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29d4 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
29d5 : 0908            >            ora #decmode        ;ignore decimal mode bit
29d7 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
29d9 : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
29dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
29de : ca                       dex
29df : 10e1                     bpl tasl7
                        
29e1 : a203                     ldx #3
29e3 :                  tlsr6
                                set_zx zp1,0
                       >            load_flag 0
29e3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
29e5 : 48              >            pha         ;use stack to load status
29e6 : b513            >            lda zp1,x    ;load to indexed zeropage
29e8 : 950c            >            sta zpt,x
29ea : 28              >            plp
                        
29eb : 560c                     lsr zpt,x
                                tst_zx rLSR,fLSR,0
29ed : 08              >            php         ;save flags
29ee : b50c            >            lda zpt,x
29f0 : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
29f3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29f5 : 68              >            pla         ;load status
                       >            eor_flag 0
29f6 : 0908            >            ora #decmode        ;ignore decimal mode bit
29f8 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
29fa : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
29fd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
29ff : ca                       dex
2a00 : 10e1                     bpl tlsr6
2a02 : a203                     ldx #3
2a04 :                  tlsr7
                                set_zx zp1,$ff
                       >            load_flag $ff
2a04 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2a06 : 48              >            pha         ;use stack to load status
2a07 : b513            >            lda zp1,x    ;load to indexed zeropage
2a09 : 950c            >            sta zpt,x
2a0b : 28              >            plp
                        
2a0c : 560c                     lsr zpt,x
                                tst_zx rLSR,fLSR,$ff-fnzc
2a0e : 08              >            php         ;save flags
2a0f : b50c            >            lda zpt,x
2a11 : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
2a14 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a16 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2a17 : 0908            >            ora #decmode        ;ignore decimal mode bit
2a19 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2a1b : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2a1e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2a20 : ca                       dex
2a21 : 10e1                     bpl tlsr7
                        
2a23 : a203                     ldx #3
2a25 :                  trol6
                                set_zx zp1,0
                       >            load_flag 0
2a25 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2a27 : 48              >            pha         ;use stack to load status
2a28 : b513            >            lda zp1,x    ;load to indexed zeropage
2a2a : 950c            >            sta zpt,x
2a2c : 28              >            plp
                        
2a2d : 360c                     rol zpt,x
                                tst_zx rROL,fROL,0
2a2f : 08              >            php         ;save flags
2a30 : b50c            >            lda zpt,x
2a32 : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
2a35 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a37 : 68              >            pla         ;load status
                       >            eor_flag 0
2a38 : 0908            >            ora #decmode        ;ignore decimal mode bit
2a3a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2a3c : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
2a3f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2a41 : ca                       dex
2a42 : 10e1                     bpl trol6
2a44 : a203                     ldx #3
2a46 :                  trol7
                                set_zx zp1,$ff-fc
                       >            load_flag $ff-fc
2a46 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2a48 : 48              >            pha         ;use stack to load status
2a49 : b513            >            lda zp1,x    ;load to indexed zeropage
2a4b : 950c            >            sta zpt,x
2a4d : 28              >            plp
                        
2a4e : 360c                     rol zpt,x
                                tst_zx rROL,fROL,$ff-fnzc
2a50 : 08              >            php         ;save flags
2a51 : b50c            >            lda zpt,x
2a53 : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
2a56 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a58 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2a59 : 0908            >            ora #decmode        ;ignore decimal mode bit
2a5b : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2a5d : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
2a60 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2a62 : ca                       dex
2a63 : 10e1                     bpl trol7
                        
2a65 : a203                     ldx #3
2a67 :                  trolc6
                                set_zx zp1,fc
                       >            load_flag fc
2a67 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2a69 : 48              >            pha         ;use stack to load status
2a6a : b513            >            lda zp1,x    ;load to indexed zeropage
2a6c : 950c            >            sta zpt,x
2a6e : 28              >            plp
                        
2a6f : 360c                     rol zpt,x
                                tst_zx rROLc,fROLc,0
2a71 : 08              >            php         ;save flags
2a72 : b50c            >            lda zpt,x
2a74 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
2a77 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a79 : 68              >            pla         ;load status
                       >            eor_flag 0
2a7a : 0908            >            ora #decmode        ;ignore decimal mode bit
2a7c : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2a7e : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2a81 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2a83 : ca                       dex
2a84 : 10e1                     bpl trolc6
2a86 : a203                     ldx #3
2a88 :                  trolc7
                                set_zx zp1,$ff
                       >            load_flag $ff
2a88 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2a8a : 48              >            pha         ;use stack to load status
2a8b : b513            >            lda zp1,x    ;load to indexed zeropage
2a8d : 950c            >            sta zpt,x
2a8f : 28              >            plp
                        
2a90 : 360c                     rol zpt,x
                                tst_zx rROLc,fROLc,$ff-fnzc
2a92 : 08              >            php         ;save flags
2a93 : b50c            >            lda zpt,x
2a95 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
2a98 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a9a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2a9b : 0908            >            ora #decmode        ;ignore decimal mode bit
2a9d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2a9f : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2aa2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2aa4 : ca                       dex
2aa5 : 10e1                     bpl trolc7
                        
2aa7 : a203                     ldx #3
2aa9 :                  tror6
                                set_zx zp1,0
                       >            load_flag 0
2aa9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2aab : 48              >            pha         ;use stack to load status
2aac : b513            >            lda zp1,x    ;load to indexed zeropage
2aae : 950c            >            sta zpt,x
2ab0 : 28              >            plp
                        
2ab1 : 760c                     ror zpt,x
                                tst_zx rROR,fROR,0
2ab3 : 08              >            php         ;save flags
2ab4 : b50c            >            lda zpt,x
2ab6 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
2ab9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2abb : 68              >            pla         ;load status
                       >            eor_flag 0
2abc : 0908            >            ora #decmode        ;ignore decimal mode bit
2abe : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2ac0 : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
2ac3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ac5 : ca                       dex
2ac6 : 10e1                     bpl tror6
2ac8 : a203                     ldx #3
2aca :                  tror7
                                set_zx zp1,$ff-fc
                       >            load_flag $ff-fc
2aca : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2acc : 48              >            pha         ;use stack to load status
2acd : b513            >            lda zp1,x    ;load to indexed zeropage
2acf : 950c            >            sta zpt,x
2ad1 : 28              >            plp
                        
2ad2 : 760c                     ror zpt,x
                                tst_zx rROR,fROR,$ff-fnzc
2ad4 : 08              >            php         ;save flags
2ad5 : b50c            >            lda zpt,x
2ad7 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
2ada : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2adc : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2add : 0908            >            ora #decmode        ;ignore decimal mode bit
2adf : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2ae1 : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
2ae4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ae6 : ca                       dex
2ae7 : 10e1                     bpl tror7
                        
2ae9 : a203                     ldx #3
2aeb :                  trorc6
                                set_zx zp1,fc
                       >            load_flag fc
2aeb : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2aed : 48              >            pha         ;use stack to load status
2aee : b513            >            lda zp1,x    ;load to indexed zeropage
2af0 : 950c            >            sta zpt,x
2af2 : 28              >            plp
                        
2af3 : 760c                     ror zpt,x
                                tst_zx rRORc,fRORc,0
2af5 : 08              >            php         ;save flags
2af6 : b50c            >            lda zpt,x
2af8 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
2afb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2afd : 68              >            pla         ;load status
                       >            eor_flag 0
2afe : 0908            >            ora #decmode        ;ignore decimal mode bit
2b00 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2b02 : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2b05 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2b07 : ca                       dex
2b08 : 10e1                     bpl trorc6
2b0a : a203                     ldx #3
2b0c :                  trorc7
                                set_zx zp1,$ff
                       >            load_flag $ff
2b0c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2b0e : 48              >            pha         ;use stack to load status
2b0f : b513            >            lda zp1,x    ;load to indexed zeropage
2b11 : 950c            >            sta zpt,x
2b13 : 28              >            plp
                        
2b14 : 760c                     ror zpt,x
                                tst_zx rRORc,fRORc,$ff-fnzc
2b16 : 08              >            php         ;save flags
2b17 : b50c            >            lda zpt,x
2b19 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
2b1c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b1e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2b1f : 0908            >            ora #decmode        ;ignore decimal mode bit
2b21 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2b23 : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2b26 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2b28 : ca                       dex
2b29 : 10e1                     bpl trorc7
                                next_test
2b2b : ad0002          >            lda test_case   ;previous test
2b2e : c920            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2b30 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0021 =                 >test_num = test_num + 1
2b32 : a921            >            lda #test_num   ;*** next tests' number
2b34 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; shifts - abs indexed
2b37 : a203                     ldx #3
2b39 :                  tasl8
                                set_absx zp1,0
                       >            load_flag 0
2b39 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2b3b : 48              >            pha         ;use stack to load status
2b3c : b513            >            lda zp1,x    ;load to indexed memory
2b3e : 9d0302          >            sta abst,x
2b41 : 28              >            plp
                        
2b42 : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,0
2b45 : 08              >            php         ;save flags
2b46 : bd0302          >            lda abst,x
2b49 : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
2b4c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b4e : 68              >            pla         ;load status
                       >            eor_flag 0
2b4f : 0908            >            ora #decmode        ;ignore decimal mode bit
2b51 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2b53 : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
2b56 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2b58 : ca                       dex
2b59 : 10de                     bpl tasl8
2b5b : a203                     ldx #3
2b5d :                  tasl9
                                set_absx zp1,$ff
                       >            load_flag $ff
2b5d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2b5f : 48              >            pha         ;use stack to load status
2b60 : b513            >            lda zp1,x    ;load to indexed memory
2b62 : 9d0302          >            sta abst,x
2b65 : 28              >            plp
                        
2b66 : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,$ff-fnzc
2b69 : 08              >            php         ;save flags
2b6a : bd0302          >            lda abst,x
2b6d : dd2002          >            cmp rASL,x    ;test result
                       >            trap_ne
2b70 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b72 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2b73 : 0908            >            ora #decmode        ;ignore decimal mode bit
2b75 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2b77 : dd3002          >            cmp fASL,x    ;test flags
                       >            trap_ne
2b7a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2b7c : ca                       dex
2b7d : 10de                     bpl tasl9
                        
2b7f : a203                     ldx #3
2b81 :                  tlsr8
                                set_absx zp1,0
                       >            load_flag 0
2b81 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2b83 : 48              >            pha         ;use stack to load status
2b84 : b513            >            lda zp1,x    ;load to indexed memory
2b86 : 9d0302          >            sta abst,x
2b89 : 28              >            plp
                        
2b8a : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,0
2b8d : 08              >            php         ;save flags
2b8e : bd0302          >            lda abst,x
2b91 : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
2b94 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b96 : 68              >            pla         ;load status
                       >            eor_flag 0
2b97 : 0908            >            ora #decmode        ;ignore decimal mode bit
2b99 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2b9b : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2b9e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ba0 : ca                       dex
2ba1 : 10de                     bpl tlsr8
2ba3 : a203                     ldx #3
2ba5 :                  tlsr9
                                set_absx zp1,$ff
                       >            load_flag $ff
2ba5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2ba7 : 48              >            pha         ;use stack to load status
2ba8 : b513            >            lda zp1,x    ;load to indexed memory
2baa : 9d0302          >            sta abst,x
2bad : 28              >            plp
                        
2bae : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,$ff-fnzc
2bb1 : 08              >            php         ;save flags
2bb2 : bd0302          >            lda abst,x
2bb5 : dd2802          >            cmp rLSR,x    ;test result
                       >            trap_ne
2bb8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2bba : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2bbb : 0908            >            ora #decmode        ;ignore decimal mode bit
2bbd : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2bbf : dd3802          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2bc2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2bc4 : ca                       dex
2bc5 : 10de                     bpl tlsr9
                        
2bc7 : a203                     ldx #3
2bc9 :                  trol8
                                set_absx zp1,0
                       >            load_flag 0
2bc9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2bcb : 48              >            pha         ;use stack to load status
2bcc : b513            >            lda zp1,x    ;load to indexed memory
2bce : 9d0302          >            sta abst,x
2bd1 : 28              >            plp
                        
2bd2 : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,0
2bd5 : 08              >            php         ;save flags
2bd6 : bd0302          >            lda abst,x
2bd9 : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
2bdc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2bde : 68              >            pla         ;load status
                       >            eor_flag 0
2bdf : 0908            >            ora #decmode        ;ignore decimal mode bit
2be1 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2be3 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
2be6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2be8 : ca                       dex
2be9 : 10de                     bpl trol8
2beb : a203                     ldx #3
2bed :                  trol9
                                set_absx zp1,$ff-fc
                       >            load_flag $ff-fc
2bed : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2bef : 48              >            pha         ;use stack to load status
2bf0 : b513            >            lda zp1,x    ;load to indexed memory
2bf2 : 9d0302          >            sta abst,x
2bf5 : 28              >            plp
                        
2bf6 : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,$ff-fnzc
2bf9 : 08              >            php         ;save flags
2bfa : bd0302          >            lda abst,x
2bfd : dd2002          >            cmp rROL,x    ;test result
                       >            trap_ne
2c00 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c02 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2c03 : 0908            >            ora #decmode        ;ignore decimal mode bit
2c05 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2c07 : dd3002          >            cmp fROL,x    ;test flags
                       >            trap_ne
2c0a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c0c : ca                       dex
2c0d : 10de                     bpl trol9
                        
2c0f : a203                     ldx #3
2c11 :                  trolc8
                                set_absx zp1,fc
                       >            load_flag fc
2c11 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2c13 : 48              >            pha         ;use stack to load status
2c14 : b513            >            lda zp1,x    ;load to indexed memory
2c16 : 9d0302          >            sta abst,x
2c19 : 28              >            plp
                        
2c1a : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,0
2c1d : 08              >            php         ;save flags
2c1e : bd0302          >            lda abst,x
2c21 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
2c24 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c26 : 68              >            pla         ;load status
                       >            eor_flag 0
2c27 : 0908            >            ora #decmode        ;ignore decimal mode bit
2c29 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2c2b : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2c2e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c30 : ca                       dex
2c31 : 10de                     bpl trolc8
2c33 : a203                     ldx #3
2c35 :                  trolc9
                                set_absx zp1,$ff
                       >            load_flag $ff
2c35 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2c37 : 48              >            pha         ;use stack to load status
2c38 : b513            >            lda zp1,x    ;load to indexed memory
2c3a : 9d0302          >            sta abst,x
2c3d : 28              >            plp
                        
2c3e : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,$ff-fnzc
2c41 : 08              >            php         ;save flags
2c42 : bd0302          >            lda abst,x
2c45 : dd2402          >            cmp rROLc,x    ;test result
                       >            trap_ne
2c48 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c4a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2c4b : 0908            >            ora #decmode        ;ignore decimal mode bit
2c4d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2c4f : dd3402          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2c52 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c54 : ca                       dex
2c55 : 10de                     bpl trolc9
                        
2c57 : a203                     ldx #3
2c59 :                  tror8
                                set_absx zp1,0
                       >            load_flag 0
2c59 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2c5b : 48              >            pha         ;use stack to load status
2c5c : b513            >            lda zp1,x    ;load to indexed memory
2c5e : 9d0302          >            sta abst,x
2c61 : 28              >            plp
                        
2c62 : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,0
2c65 : 08              >            php         ;save flags
2c66 : bd0302          >            lda abst,x
2c69 : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
2c6c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c6e : 68              >            pla         ;load status
                       >            eor_flag 0
2c6f : 0908            >            ora #decmode        ;ignore decimal mode bit
2c71 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2c73 : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
2c76 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c78 : ca                       dex
2c79 : 10de                     bpl tror8
2c7b : a203                     ldx #3
2c7d :                  tror9
                                set_absx zp1,$ff-fc
                       >            load_flag $ff-fc
2c7d : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2c7f : 48              >            pha         ;use stack to load status
2c80 : b513            >            lda zp1,x    ;load to indexed memory
2c82 : 9d0302          >            sta abst,x
2c85 : 28              >            plp
                        
2c86 : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,$ff-fnzc
2c89 : 08              >            php         ;save flags
2c8a : bd0302          >            lda abst,x
2c8d : dd2802          >            cmp rROR,x    ;test result
                       >            trap_ne
2c90 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c92 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2c93 : 0908            >            ora #decmode        ;ignore decimal mode bit
2c95 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2c97 : dd3802          >            cmp fROR,x    ;test flags
                       >            trap_ne
2c9a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c9c : ca                       dex
2c9d : 10de                     bpl tror9
                        
2c9f : a203                     ldx #3
2ca1 :                  trorc8
                                set_absx zp1,fc
                       >            load_flag fc
2ca1 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2ca3 : 48              >            pha         ;use stack to load status
2ca4 : b513            >            lda zp1,x    ;load to indexed memory
2ca6 : 9d0302          >            sta abst,x
2ca9 : 28              >            plp
                        
2caa : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,0
2cad : 08              >            php         ;save flags
2cae : bd0302          >            lda abst,x
2cb1 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
2cb4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2cb6 : 68              >            pla         ;load status
                       >            eor_flag 0
2cb7 : 0908            >            ora #decmode        ;ignore decimal mode bit
2cb9 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2cbb : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2cbe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2cc0 : ca                       dex
2cc1 : 10de                     bpl trorc8
2cc3 : a203                     ldx #3
2cc5 :                  trorc9
                                set_absx zp1,$ff
                       >            load_flag $ff
2cc5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2cc7 : 48              >            pha         ;use stack to load status
2cc8 : b513            >            lda zp1,x    ;load to indexed memory
2cca : 9d0302          >            sta abst,x
2ccd : 28              >            plp
                        
2cce : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,$ff-fnzc
2cd1 : 08              >            php         ;save flags
2cd2 : bd0302          >            lda abst,x
2cd5 : dd2c02          >            cmp rRORc,x    ;test result
                       >            trap_ne
2cd8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2cda : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2cdb : 0908            >            ora #decmode        ;ignore decimal mode bit
2cdd : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2cdf : dd3c02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2ce2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ce4 : ca                       dex
2ce5 : 10de                     bpl trorc9
                                next_test
2ce7 : ad0002          >            lda test_case   ;previous test
2cea : c921            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2cec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0022 =                 >test_num = test_num + 1
2cee : a922            >            lda #test_num   ;*** next tests' number
2cf0 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing memory increment/decrement - INC DEC all addressing modes
                        ; zeropage
2cf3 : a200                     ldx #0
2cf5 : a97e                     lda #$7e
2cf7 : 850c                     sta zpt
2cf9 :                  tinc    
                                set_stat 0
                       >            load_flag 0
2cf9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2cfb : 48              >            pha         ;use stack to load status
2cfc : 28              >            plp
                        
2cfd : e60c                     inc zpt
                                tst_z rINC,fINC,0
2cff : 08              >            php         ;save flags
2d00 : a50c            >            lda zpt
2d02 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2d05 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2d07 : 68              >            pla         ;load status
                       >            eor_flag 0
2d08 : 0908            >            ora #decmode        ;ignore decimal mode bit
2d0a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2d0c : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2d0f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d11 : e8                       inx
2d12 : e002                     cpx #2
2d14 : d004                     bne tinc1
2d16 : a9fe                     lda #$fe
2d18 : 850c                     sta zpt
2d1a : e005             tinc1   cpx #5
2d1c : d0db                     bne tinc
2d1e : ca                       dex
2d1f : e60c                     inc zpt
2d21 :                  tdec    
                                set_stat 0
                       >            load_flag 0
2d21 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2d23 : 48              >            pha         ;use stack to load status
2d24 : 28              >            plp
                        
2d25 : c60c                     dec zpt
                                tst_z rINC,fINC,0
2d27 : 08              >            php         ;save flags
2d28 : a50c            >            lda zpt
2d2a : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2d2d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2d2f : 68              >            pla         ;load status
                       >            eor_flag 0
2d30 : 0908            >            ora #decmode        ;ignore decimal mode bit
2d32 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2d34 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2d37 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d39 : ca                       dex
2d3a : 300a                     bmi tdec1
2d3c : e001                     cpx #1
2d3e : d0e1                     bne tdec
2d40 : a981                     lda #$81
2d42 : 850c                     sta zpt
2d44 : d0db                     bne tdec
2d46 :                  tdec1
2d46 : a200                     ldx #0
2d48 : a97e                     lda #$7e
2d4a : 850c                     sta zpt
2d4c :                  tinc10    
                                set_stat $ff
                       >            load_flag $ff
2d4c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2d4e : 48              >            pha         ;use stack to load status
2d4f : 28              >            plp
                        
2d50 : e60c                     inc zpt
                                tst_z rINC,fINC,$ff-fnz
2d52 : 08              >            php         ;save flags
2d53 : a50c            >            lda zpt
2d55 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2d58 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2d5a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2d5b : 0908            >            ora #decmode        ;ignore decimal mode bit
2d5d : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2d5f : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2d62 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d64 : e8                       inx
2d65 : e002                     cpx #2
2d67 : d004                     bne tinc11
2d69 : a9fe                     lda #$fe
2d6b : 850c                     sta zpt
2d6d : e005             tinc11  cpx #5
2d6f : d0db                     bne tinc10
2d71 : ca                       dex
2d72 : e60c                     inc zpt
2d74 :                  tdec10    
                                set_stat $ff
                       >            load_flag $ff
2d74 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2d76 : 48              >            pha         ;use stack to load status
2d77 : 28              >            plp
                        
2d78 : c60c                     dec zpt
                                tst_z rINC,fINC,$ff-fnz
2d7a : 08              >            php         ;save flags
2d7b : a50c            >            lda zpt
2d7d : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2d80 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2d82 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2d83 : 0908            >            ora #decmode        ;ignore decimal mode bit
2d85 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2d87 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2d8a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d8c : ca                       dex
2d8d : 300a                     bmi tdec11
2d8f : e001                     cpx #1
2d91 : d0e1                     bne tdec10
2d93 : a981                     lda #$81
2d95 : 850c                     sta zpt
2d97 : d0db                     bne tdec10
2d99 :                  tdec11
                                next_test
2d99 : ad0002          >            lda test_case   ;previous test
2d9c : c922            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2d9e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0023 =                 >test_num = test_num + 1
2da0 : a923            >            lda #test_num   ;*** next tests' number
2da2 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; absolute memory
2da5 : a200                     ldx #0
2da7 : a97e                     lda #$7e
2da9 : 8d0302                   sta abst
2dac :                  tinc2    
                                set_stat 0
                       >            load_flag 0
2dac : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2dae : 48              >            pha         ;use stack to load status
2daf : 28              >            plp
                        
2db0 : ee0302                   inc abst
                                tst_abs rINC,fINC,0
2db3 : 08              >            php         ;save flags
2db4 : ad0302          >            lda abst
2db7 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2dba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2dbc : 68              >            pla         ;load status
                       >            eor_flag 0
2dbd : 0908            >            ora #decmode        ;ignore decimal mode bit
2dbf : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2dc1 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2dc4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2dc6 : e8                       inx
2dc7 : e002                     cpx #2
2dc9 : d005                     bne tinc3
2dcb : a9fe                     lda #$fe
2dcd : 8d0302                   sta abst
2dd0 : e005             tinc3   cpx #5
2dd2 : d0d8                     bne tinc2
2dd4 : ca                       dex
2dd5 : ee0302                   inc abst
2dd8 :                  tdec2    
                                set_stat 0
                       >            load_flag 0
2dd8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2dda : 48              >            pha         ;use stack to load status
2ddb : 28              >            plp
                        
2ddc : ce0302                   dec abst
                                tst_abs rINC,fINC,0
2ddf : 08              >            php         ;save flags
2de0 : ad0302          >            lda abst
2de3 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2de6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2de8 : 68              >            pla         ;load status
                       >            eor_flag 0
2de9 : 0908            >            ora #decmode        ;ignore decimal mode bit
2deb : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2ded : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2df0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2df2 : ca                       dex
2df3 : 300b                     bmi tdec3
2df5 : e001                     cpx #1
2df7 : d0df                     bne tdec2
2df9 : a981                     lda #$81
2dfb : 8d0302                   sta abst
2dfe : d0d8                     bne tdec2
2e00 :                  tdec3
2e00 : a200                     ldx #0
2e02 : a97e                     lda #$7e
2e04 : 8d0302                   sta abst
2e07 :                  tinc12    
                                set_stat $ff
                       >            load_flag $ff
2e07 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2e09 : 48              >            pha         ;use stack to load status
2e0a : 28              >            plp
                        
2e0b : ee0302                   inc abst
                                tst_abs rINC,fINC,$ff-fnz
2e0e : 08              >            php         ;save flags
2e0f : ad0302          >            lda abst
2e12 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2e15 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2e17 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2e18 : 0908            >            ora #decmode        ;ignore decimal mode bit
2e1a : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2e1c : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2e1f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2e21 : e8                       inx
2e22 : e002                     cpx #2
2e24 : d005                     bne tinc13
2e26 : a9fe                     lda #$fe
2e28 : 8d0302                   sta abst
2e2b : e005             tinc13   cpx #5
2e2d : d0d8                     bne tinc12
2e2f : ca                       dex
2e30 : ee0302                   inc abst
2e33 :                  tdec12    
                                set_stat $ff
                       >            load_flag $ff
2e33 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2e35 : 48              >            pha         ;use stack to load status
2e36 : 28              >            plp
                        
2e37 : ce0302                   dec abst
                                tst_abs rINC,fINC,$ff-fnz
2e3a : 08              >            php         ;save flags
2e3b : ad0302          >            lda abst
2e3e : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2e41 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2e43 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2e44 : 0908            >            ora #decmode        ;ignore decimal mode bit
2e46 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2e48 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2e4b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2e4d : ca                       dex
2e4e : 300b                     bmi tdec13
2e50 : e001                     cpx #1
2e52 : d0df                     bne tdec12
2e54 : a981                     lda #$81
2e56 : 8d0302                   sta abst
2e59 : d0d8                     bne tdec12
2e5b :                  tdec13
                                next_test
2e5b : ad0002          >            lda test_case   ;previous test
2e5e : c923            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2e60 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0024 =                 >test_num = test_num + 1
2e62 : a924            >            lda #test_num   ;*** next tests' number
2e64 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; zeropage indexed
2e67 : a200                     ldx #0
2e69 : a97e                     lda #$7e
2e6b : 950c             tinc4   sta zpt,x
                                set_stat 0
                       >            load_flag 0
2e6d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2e6f : 48              >            pha         ;use stack to load status
2e70 : 28              >            plp
                        
2e71 : f60c                     inc zpt,x
                                tst_zx rINC,fINC,0
2e73 : 08              >            php         ;save flags
2e74 : b50c            >            lda zpt,x
2e76 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2e79 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2e7b : 68              >            pla         ;load status
                       >            eor_flag 0
2e7c : 0908            >            ora #decmode        ;ignore decimal mode bit
2e7e : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2e80 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2e83 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2e85 : b50c                     lda zpt,x
2e87 : e8                       inx
2e88 : e002                     cpx #2
2e8a : d002                     bne tinc5
2e8c : a9fe                     lda #$fe
2e8e : e005             tinc5   cpx #5
2e90 : d0d9                     bne tinc4
2e92 : ca                       dex
2e93 : a902                     lda #2
2e95 : 950c             tdec4   sta zpt,x 
                                set_stat 0
                       >            load_flag 0
2e97 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2e99 : 48              >            pha         ;use stack to load status
2e9a : 28              >            plp
                        
2e9b : d60c                     dec zpt,x
                                tst_zx rINC,fINC,0
2e9d : 08              >            php         ;save flags
2e9e : b50c            >            lda zpt,x
2ea0 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2ea3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2ea5 : 68              >            pla         ;load status
                       >            eor_flag 0
2ea6 : 0908            >            ora #decmode        ;ignore decimal mode bit
2ea8 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2eaa : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2ead : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2eaf : b50c                     lda zpt,x
2eb1 : ca                       dex
2eb2 : 3008                     bmi tdec5
2eb4 : e001                     cpx #1
2eb6 : d0dd                     bne tdec4
2eb8 : a981                     lda #$81
2eba : d0d9                     bne tdec4
2ebc :                  tdec5
2ebc : a200                     ldx #0
2ebe : a97e                     lda #$7e
2ec0 : 950c             tinc14  sta zpt,x
                                set_stat $ff
                       >            load_flag $ff
2ec2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2ec4 : 48              >            pha         ;use stack to load status
2ec5 : 28              >            plp
                        
2ec6 : f60c                     inc zpt,x
                                tst_zx rINC,fINC,$ff-fnz
2ec8 : 08              >            php         ;save flags
2ec9 : b50c            >            lda zpt,x
2ecb : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2ece : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2ed0 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2ed1 : 0908            >            ora #decmode        ;ignore decimal mode bit
2ed3 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2ed5 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2ed8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2eda : b50c                     lda zpt,x
2edc : e8                       inx
2edd : e002                     cpx #2
2edf : d002                     bne tinc15
2ee1 : a9fe                     lda #$fe
2ee3 : e005             tinc15  cpx #5
2ee5 : d0d9                     bne tinc14
2ee7 : ca                       dex
2ee8 : a902                     lda #2
2eea : 950c             tdec14  sta zpt,x 
                                set_stat $ff
                       >            load_flag $ff
2eec : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2eee : 48              >            pha         ;use stack to load status
2eef : 28              >            plp
                        
2ef0 : d60c                     dec zpt,x
                                tst_zx rINC,fINC,$ff-fnz
2ef2 : 08              >            php         ;save flags
2ef3 : b50c            >            lda zpt,x
2ef5 : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2ef8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2efa : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2efb : 0908            >            ora #decmode        ;ignore decimal mode bit
2efd : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2eff : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2f02 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2f04 : b50c                     lda zpt,x
2f06 : ca                       dex
2f07 : 3008                     bmi tdec15
2f09 : e001                     cpx #1
2f0b : d0dd                     bne tdec14
2f0d : a981                     lda #$81
2f0f : d0d9                     bne tdec14
2f11 :                  tdec15
                                next_test
2f11 : ad0002          >            lda test_case   ;previous test
2f14 : c924            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2f16 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0025 =                 >test_num = test_num + 1
2f18 : a925            >            lda #test_num   ;*** next tests' number
2f1a : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; memory indexed
2f1d : a200                     ldx #0
2f1f : a97e                     lda #$7e
2f21 : 9d0302           tinc6   sta abst,x
                                set_stat 0
                       >            load_flag 0
2f24 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2f26 : 48              >            pha         ;use stack to load status
2f27 : 28              >            plp
                        
2f28 : fe0302                   inc abst,x
                                tst_absx rINC,fINC,0
2f2b : 08              >            php         ;save flags
2f2c : bd0302          >            lda abst,x
2f2f : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2f32 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2f34 : 68              >            pla         ;load status
                       >            eor_flag 0
2f35 : 0908            >            ora #decmode        ;ignore decimal mode bit
2f37 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2f39 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2f3c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2f3e : bd0302                   lda abst,x
2f41 : e8                       inx
2f42 : e002                     cpx #2
2f44 : d002                     bne tinc7
2f46 : a9fe                     lda #$fe
2f48 : e005             tinc7   cpx #5
2f4a : d0d5                     bne tinc6
2f4c : ca                       dex
2f4d : a902                     lda #2
2f4f : 9d0302           tdec6   sta abst,x 
                                set_stat 0
                       >            load_flag 0
2f52 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2f54 : 48              >            pha         ;use stack to load status
2f55 : 28              >            plp
                        
2f56 : de0302                   dec abst,x
                                tst_absx rINC,fINC,0
2f59 : 08              >            php         ;save flags
2f5a : bd0302          >            lda abst,x
2f5d : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2f60 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2f62 : 68              >            pla         ;load status
                       >            eor_flag 0
2f63 : 0908            >            ora #decmode        ;ignore decimal mode bit
2f65 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2f67 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2f6a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2f6c : bd0302                   lda abst,x
2f6f : ca                       dex
2f70 : 3008                     bmi tdec7
2f72 : e001                     cpx #1
2f74 : d0d9                     bne tdec6
2f76 : a981                     lda #$81
2f78 : d0d5                     bne tdec6
2f7a :                  tdec7
2f7a : a200                     ldx #0
2f7c : a97e                     lda #$7e
2f7e : 9d0302           tinc16  sta abst,x
                                set_stat $ff
                       >            load_flag $ff
2f81 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2f83 : 48              >            pha         ;use stack to load status
2f84 : 28              >            plp
                        
2f85 : fe0302                   inc abst,x
                                tst_absx rINC,fINC,$ff-fnz
2f88 : 08              >            php         ;save flags
2f89 : bd0302          >            lda abst,x
2f8c : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2f8f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2f91 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2f92 : 0908            >            ora #decmode        ;ignore decimal mode bit
2f94 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2f96 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2f99 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2f9b : bd0302                   lda abst,x
2f9e : e8                       inx
2f9f : e002                     cpx #2
2fa1 : d002                     bne tinc17
2fa3 : a9fe                     lda #$fe
2fa5 : e005             tinc17  cpx #5
2fa7 : d0d5                     bne tinc16
2fa9 : ca                       dex
2faa : a902                     lda #2
2fac : 9d0302           tdec16  sta abst,x 
                                set_stat $ff
                       >            load_flag $ff
2faf : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2fb1 : 48              >            pha         ;use stack to load status
2fb2 : 28              >            plp
                        
2fb3 : de0302                   dec abst,x
                                tst_absx rINC,fINC,$ff-fnz
2fb6 : 08              >            php         ;save flags
2fb7 : bd0302          >            lda abst,x
2fba : dd4002          >            cmp rINC,x    ;test result
                       >            trap_ne
2fbd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2fbf : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2fc0 : 0908            >            ora #decmode        ;ignore decimal mode bit
2fc2 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2fc4 : dd4502          >            cmp fINC,x    ;test flags
                       >            trap_ne
2fc7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2fc9 : bd0302                   lda abst,x
2fcc : ca                       dex
2fcd : 3008                     bmi tdec17
2fcf : e001                     cpx #1
2fd1 : d0d9                     bne tdec16
2fd3 : a981                     lda #$81
2fd5 : d0d5                     bne tdec16
2fd7 :                  tdec17
                                next_test
2fd7 : ad0002          >            lda test_case   ;previous test
2fda : c925            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2fdc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0026 =                 >test_num = test_num + 1
2fde : a926            >            lda #test_num   ;*** next tests' number
2fe0 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing logical instructions - AND EOR ORA all addressing modes
                        ; AND
2fe3 : a203                     ldx #3          ;immediate
2fe5 : b51c             tand    lda zpAN,x
2fe7 : 8d0902                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,0
                       >            load_flag 0
2fea : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2fec : 48              >            pha         ;use stack to load status
2fed : bd5a02          >            lda absANa,x    ;precharge accu
2ff0 : 28              >            plp
                        
2ff1 : 200802                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,0
2ff4 : 08              >            php         ;save flags
2ff5 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
2ff8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2ffa : 68              >            pla         ;load status
                       >            eor_flag 0
2ffb : 0908            >            ora #decmode        ;ignore decimal mode bit
2ffd : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2fff : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3002 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3004 : ca                       dex
3005 : 10de                     bpl tand
3007 : a203                     ldx #3
3009 : b51c             tand1   lda zpAN,x
300b : 8d0902                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,$ff
                       >            load_flag $ff
300e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3010 : 48              >            pha         ;use stack to load status
3011 : bd5a02          >            lda absANa,x    ;precharge accu
3014 : 28              >            plp
                        
3015 : 200802                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
3018 : 08              >            php         ;save flags
3019 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
301c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
301e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
301f : 0908            >            ora #decmode        ;ignore decimal mode bit
3021 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3023 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3026 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3028 : ca                       dex
3029 : 10de                     bpl tand1
                            
302b : a203                     ldx #3      ;zp
302d : b51c             tand2   lda zpAN,x
302f : 850c                     sta zpt
                                set_ax  absANa,0
                       >            load_flag 0
3031 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3033 : 48              >            pha         ;use stack to load status
3034 : bd5a02          >            lda absANa,x    ;precharge accu
3037 : 28              >            plp
                        
3038 : 250c                     and zpt
                                tst_ax  absrlo,absflo,0
303a : 08              >            php         ;save flags
303b : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
303e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3040 : 68              >            pla         ;load status
                       >            eor_flag 0
3041 : 0908            >            ora #decmode        ;ignore decimal mode bit
3043 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3045 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3048 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
304a : ca                       dex
304b : 10e0                     bpl tand2
304d : a203                     ldx #3
304f : b51c             tand3   lda zpAN,x
3051 : 850c                     sta zpt
                                set_ax  absANa,$ff
                       >            load_flag $ff
3053 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3055 : 48              >            pha         ;use stack to load status
3056 : bd5a02          >            lda absANa,x    ;precharge accu
3059 : 28              >            plp
                        
305a : 250c                     and zpt
                                tst_ax  absrlo,absflo,$ff-fnz
305c : 08              >            php         ;save flags
305d : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3060 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3062 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3063 : 0908            >            ora #decmode        ;ignore decimal mode bit
3065 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3067 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
306a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
306c : ca                       dex
306d : 10e0                     bpl tand3
                        
306f : a203                     ldx #3      ;abs
3071 : b51c             tand4   lda zpAN,x
3073 : 8d0302                   sta abst
                                set_ax  absANa,0
                       >            load_flag 0
3076 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3078 : 48              >            pha         ;use stack to load status
3079 : bd5a02          >            lda absANa,x    ;precharge accu
307c : 28              >            plp
                        
307d : 2d0302                   and abst
                                tst_ax  absrlo,absflo,0
3080 : 08              >            php         ;save flags
3081 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3084 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3086 : 68              >            pla         ;load status
                       >            eor_flag 0
3087 : 0908            >            ora #decmode        ;ignore decimal mode bit
3089 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
308b : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
308e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3090 : ca                       dex
3091 : 10de                     bpl tand4
3093 : a203                     ldx #3
3095 : b51c             tand5   lda zpAN,x
3097 : 8d0302                   sta abst
                                set_ax  absANa,$ff
                       >            load_flag $ff
309a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
309c : 48              >            pha         ;use stack to load status
309d : bd5a02          >            lda absANa,x    ;precharge accu
30a0 : 28              >            plp
                        
30a1 : 2d0302                   and abst
                                tst_ax  absrlo,absflo,$ff-fnz
30a4 : 08              >            php         ;save flags
30a5 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
30a8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
30aa : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
30ab : 0908            >            ora #decmode        ;ignore decimal mode bit
30ad : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
30af : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
30b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
30b4 : ca                       dex
30b5 : 1002                     bpl tand6
                        
30b7 : a203                     ldx #3      ;zp,x
30b9 :                  tand6
                                set_ax  absANa,0
                       >            load_flag 0
30b9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
30bb : 48              >            pha         ;use stack to load status
30bc : bd5a02          >            lda absANa,x    ;precharge accu
30bf : 28              >            plp
                        
30c0 : 351c                     and zpAN,x
                                tst_ax  absrlo,absflo,0
30c2 : 08              >            php         ;save flags
30c3 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
30c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
30c8 : 68              >            pla         ;load status
                       >            eor_flag 0
30c9 : 0908            >            ora #decmode        ;ignore decimal mode bit
30cb : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
30cd : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
30d0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
30d2 : ca                       dex
30d3 : 10e4                     bpl tand6
30d5 : a203                     ldx #3
30d7 :                  tand7
                                set_ax  absANa,$ff
                       >            load_flag $ff
30d7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
30d9 : 48              >            pha         ;use stack to load status
30da : bd5a02          >            lda absANa,x    ;precharge accu
30dd : 28              >            plp
                        
30de : 351c                     and zpAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
30e0 : 08              >            php         ;save flags
30e1 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
30e4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
30e6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
30e7 : 0908            >            ora #decmode        ;ignore decimal mode bit
30e9 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
30eb : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
30ee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
30f0 : ca                       dex
30f1 : 10e4                     bpl tand7
                        
30f3 : a203                     ldx #3      ;abs,x
30f5 :                  tand8
                                set_ax  absANa,0
                       >            load_flag 0
30f5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
30f7 : 48              >            pha         ;use stack to load status
30f8 : bd5a02          >            lda absANa,x    ;precharge accu
30fb : 28              >            plp
                        
30fc : 3d4e02                   and absAN,x
                                tst_ax  absrlo,absflo,0
30ff : 08              >            php         ;save flags
3100 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3103 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3105 : 68              >            pla         ;load status
                       >            eor_flag 0
3106 : 0908            >            ora #decmode        ;ignore decimal mode bit
3108 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
310a : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
310d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
310f : ca                       dex
3110 : 10e3                     bpl tand8
3112 : a203                     ldx #3
3114 :                  tand9
                                set_ax  absANa,$ff
                       >            load_flag $ff
3114 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3116 : 48              >            pha         ;use stack to load status
3117 : bd5a02          >            lda absANa,x    ;precharge accu
311a : 28              >            plp
                        
311b : 3d4e02                   and absAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
311e : 08              >            php         ;save flags
311f : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3122 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3124 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3125 : 0908            >            ora #decmode        ;ignore decimal mode bit
3127 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3129 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
312c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
312e : ca                       dex
312f : 10e3                     bpl tand9
                        
3131 : a003                     ldy #3      ;abs,y
3133 :                  tand10
                                set_ay  absANa,0
                       >            load_flag 0
3133 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3135 : 48              >            pha         ;use stack to load status
3136 : b95a02          >            lda absANa,y    ;precharge accu
3139 : 28              >            plp
                        
313a : 394e02                   and absAN,y
                                tst_ay  absrlo,absflo,0
313d : 08              >            php         ;save flags
313e : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3141 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3143 : 68              >            pla         ;load status
                       >            eor_flag 0
3144 : 0908            >            ora #decmode        ;ignore decimal mode bit
3146 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3148 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
314b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
314d : 88                       dey
314e : 10e3                     bpl tand10
3150 : a003                     ldy #3
3152 :                  tand11
                                set_ay  absANa,$ff
                       >            load_flag $ff
3152 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3154 : 48              >            pha         ;use stack to load status
3155 : b95a02          >            lda absANa,y    ;precharge accu
3158 : 28              >            plp
                        
3159 : 394e02                   and absAN,y
                                tst_ay  absrlo,absflo,$ff-fnz
315c : 08              >            php         ;save flags
315d : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3160 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3162 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3163 : 0908            >            ora #decmode        ;ignore decimal mode bit
3165 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3167 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
316a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
316c : 88                       dey
316d : 10e3                     bpl tand11
                        
316f : a206                     ldx #6      ;(zp,x)
3171 : a003                     ldy #3
3173 :                  tand12
                                set_ay  absANa,0
                       >            load_flag 0
3173 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3175 : 48              >            pha         ;use stack to load status
3176 : b95a02          >            lda absANa,y    ;precharge accu
3179 : 28              >            plp
                        
317a : 213a                     and (indAN,x)
                                tst_ay  absrlo,absflo,0
317c : 08              >            php         ;save flags
317d : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3180 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3182 : 68              >            pla         ;load status
                       >            eor_flag 0
3183 : 0908            >            ora #decmode        ;ignore decimal mode bit
3185 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3187 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
318a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
318c : ca                       dex
318d : ca                       dex
318e : 88                       dey
318f : 10e2                     bpl tand12
3191 : a206                     ldx #6
3193 : a003                     ldy #3
3195 :                  tand13
                                set_ay  absANa,$ff
                       >            load_flag $ff
3195 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3197 : 48              >            pha         ;use stack to load status
3198 : b95a02          >            lda absANa,y    ;precharge accu
319b : 28              >            plp
                        
319c : 213a                     and (indAN,x)
                                tst_ay  absrlo,absflo,$ff-fnz
319e : 08              >            php         ;save flags
319f : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
31a2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
31a4 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
31a5 : 0908            >            ora #decmode        ;ignore decimal mode bit
31a7 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
31a9 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
31ac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
31ae : ca                       dex
31af : ca                       dex
31b0 : 88                       dey
31b1 : 10e2                     bpl tand13
                        
31b3 : a003                     ldy #3      ;(zp),y
31b5 :                  tand14
                                set_ay  absANa,0
                       >            load_flag 0
31b5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
31b7 : 48              >            pha         ;use stack to load status
31b8 : b95a02          >            lda absANa,y    ;precharge accu
31bb : 28              >            plp
                        
31bc : 313a                     and (indAN),y
                                tst_ay  absrlo,absflo,0
31be : 08              >            php         ;save flags
31bf : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
31c2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
31c4 : 68              >            pla         ;load status
                       >            eor_flag 0
31c5 : 0908            >            ora #decmode        ;ignore decimal mode bit
31c7 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
31c9 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
31cc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
31ce : 88                       dey
31cf : 10e4                     bpl tand14
31d1 : a003                     ldy #3
31d3 :                  tand15
                                set_ay  absANa,$ff
                       >            load_flag $ff
31d3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
31d5 : 48              >            pha         ;use stack to load status
31d6 : b95a02          >            lda absANa,y    ;precharge accu
31d9 : 28              >            plp
                        
31da : 313a                     and (indAN),y
                                tst_ay  absrlo,absflo,$ff-fnz
31dc : 08              >            php         ;save flags
31dd : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
31e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
31e2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
31e3 : 0908            >            ora #decmode        ;ignore decimal mode bit
31e5 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
31e7 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
31ea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
31ec : 88                       dey
31ed : 10e4                     bpl tand15
                                next_test
31ef : ad0002          >            lda test_case   ;previous test
31f2 : c926            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
31f4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0027 =                 >test_num = test_num + 1
31f6 : a927            >            lda #test_num   ;*** next tests' number
31f8 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; EOR
31fb : a203                     ldx #3          ;immediate - self modifying code
31fd : b520             teor    lda zpEO,x
31ff : 8d0c02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,0
                       >            load_flag 0
3202 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3204 : 48              >            pha         ;use stack to load status
3205 : bd5e02          >            lda absEOa,x    ;precharge accu
3208 : 28              >            plp
                        
3209 : 200b02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,0
320c : 08              >            php         ;save flags
320d : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3210 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3212 : 68              >            pla         ;load status
                       >            eor_flag 0
3213 : 0908            >            ora #decmode        ;ignore decimal mode bit
3215 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3217 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
321a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
321c : ca                       dex
321d : 10de                     bpl teor
321f : a203                     ldx #3
3221 : b520             teor1   lda zpEO,x
3223 : 8d0c02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,$ff
                       >            load_flag $ff
3226 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3228 : 48              >            pha         ;use stack to load status
3229 : bd5e02          >            lda absEOa,x    ;precharge accu
322c : 28              >            plp
                        
322d : 200b02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
3230 : 08              >            php         ;save flags
3231 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3234 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3236 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3237 : 0908            >            ora #decmode        ;ignore decimal mode bit
3239 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
323b : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
323e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3240 : ca                       dex
3241 : 10de                     bpl teor1
                            
3243 : a203                     ldx #3      ;zp
3245 : b520             teor2    lda zpEO,x
3247 : 850c                     sta zpt
                                set_ax  absEOa,0
                       >            load_flag 0
3249 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
324b : 48              >            pha         ;use stack to load status
324c : bd5e02          >            lda absEOa,x    ;precharge accu
324f : 28              >            plp
                        
3250 : 450c                     eor zpt
                                tst_ax  absrlo,absflo,0
3252 : 08              >            php         ;save flags
3253 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3256 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3258 : 68              >            pla         ;load status
                       >            eor_flag 0
3259 : 0908            >            ora #decmode        ;ignore decimal mode bit
325b : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
325d : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3260 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3262 : ca                       dex
3263 : 10e0                     bpl teor2
3265 : a203                     ldx #3
3267 : b520             teor3   lda zpEO,x
3269 : 850c                     sta zpt
                                set_ax  absEOa,$ff
                       >            load_flag $ff
326b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
326d : 48              >            pha         ;use stack to load status
326e : bd5e02          >            lda absEOa,x    ;precharge accu
3271 : 28              >            plp
                        
3272 : 450c                     eor zpt
                                tst_ax  absrlo,absflo,$ff-fnz
3274 : 08              >            php         ;save flags
3275 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3278 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
327a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
327b : 0908            >            ora #decmode        ;ignore decimal mode bit
327d : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
327f : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3282 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3284 : ca                       dex
3285 : 10e0                     bpl teor3
                        
3287 : a203                     ldx #3      ;abs
3289 : b520             teor4   lda zpEO,x
328b : 8d0302                   sta abst
                                set_ax  absEOa,0
                       >            load_flag 0
328e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3290 : 48              >            pha         ;use stack to load status
3291 : bd5e02          >            lda absEOa,x    ;precharge accu
3294 : 28              >            plp
                        
3295 : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,0
3298 : 08              >            php         ;save flags
3299 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
329c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
329e : 68              >            pla         ;load status
                       >            eor_flag 0
329f : 0908            >            ora #decmode        ;ignore decimal mode bit
32a1 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
32a3 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
32a6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
32a8 : ca                       dex
32a9 : 10de                     bpl teor4
32ab : a203                     ldx #3
32ad : b520             teor5   lda zpEO,x
32af : 8d0302                   sta abst
                                set_ax  absEOa,$ff
                       >            load_flag $ff
32b2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
32b4 : 48              >            pha         ;use stack to load status
32b5 : bd5e02          >            lda absEOa,x    ;precharge accu
32b8 : 28              >            plp
                        
32b9 : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,$ff-fnz
32bc : 08              >            php         ;save flags
32bd : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
32c0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
32c2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
32c3 : 0908            >            ora #decmode        ;ignore decimal mode bit
32c5 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
32c7 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
32ca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
32cc : ca                       dex
32cd : 1002                     bpl teor6
                        
32cf : a203                     ldx #3      ;zp,x
32d1 :                  teor6
                                set_ax  absEOa,0
                       >            load_flag 0
32d1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
32d3 : 48              >            pha         ;use stack to load status
32d4 : bd5e02          >            lda absEOa,x    ;precharge accu
32d7 : 28              >            plp
                        
32d8 : 5520                     eor zpEO,x
                                tst_ax  absrlo,absflo,0
32da : 08              >            php         ;save flags
32db : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
32de : d0fe            >        bne *           ;failed not equal (non zero)
                       >
32e0 : 68              >            pla         ;load status
                       >            eor_flag 0
32e1 : 0908            >            ora #decmode        ;ignore decimal mode bit
32e3 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
32e5 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
32e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
32ea : ca                       dex
32eb : 10e4                     bpl teor6
32ed : a203                     ldx #3
32ef :                  teor7
                                set_ax  absEOa,$ff
                       >            load_flag $ff
32ef : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
32f1 : 48              >            pha         ;use stack to load status
32f2 : bd5e02          >            lda absEOa,x    ;precharge accu
32f5 : 28              >            plp
                        
32f6 : 5520                     eor zpEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
32f8 : 08              >            php         ;save flags
32f9 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
32fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
32fe : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
32ff : 0908            >            ora #decmode        ;ignore decimal mode bit
3301 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3303 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3306 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3308 : ca                       dex
3309 : 10e4                     bpl teor7
                        
330b : a203                     ldx #3      ;abs,x
330d :                  teor8
                                set_ax  absEOa,0
                       >            load_flag 0
330d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
330f : 48              >            pha         ;use stack to load status
3310 : bd5e02          >            lda absEOa,x    ;precharge accu
3313 : 28              >            plp
                        
3314 : 5d5202                   eor absEO,x
                                tst_ax  absrlo,absflo,0
3317 : 08              >            php         ;save flags
3318 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
331b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
331d : 68              >            pla         ;load status
                       >            eor_flag 0
331e : 0908            >            ora #decmode        ;ignore decimal mode bit
3320 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3322 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3325 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3327 : ca                       dex
3328 : 10e3                     bpl teor8
332a : a203                     ldx #3
332c :                  teor9
                                set_ax  absEOa,$ff
                       >            load_flag $ff
332c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
332e : 48              >            pha         ;use stack to load status
332f : bd5e02          >            lda absEOa,x    ;precharge accu
3332 : 28              >            plp
                        
3333 : 5d5202                   eor absEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
3336 : 08              >            php         ;save flags
3337 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
333a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
333c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
333d : 0908            >            ora #decmode        ;ignore decimal mode bit
333f : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3341 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3344 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3346 : ca                       dex
3347 : 10e3                     bpl teor9
                        
3349 : a003                     ldy #3      ;abs,y
334b :                  teor10
                                set_ay  absEOa,0
                       >            load_flag 0
334b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
334d : 48              >            pha         ;use stack to load status
334e : b95e02          >            lda absEOa,y    ;precharge accu
3351 : 28              >            plp
                        
3352 : 595202                   eor absEO,y
                                tst_ay  absrlo,absflo,0
3355 : 08              >            php         ;save flags
3356 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3359 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
335b : 68              >            pla         ;load status
                       >            eor_flag 0
335c : 0908            >            ora #decmode        ;ignore decimal mode bit
335e : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3360 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
3363 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3365 : 88                       dey
3366 : 10e3                     bpl teor10
3368 : a003                     ldy #3
336a :                  teor11
                                set_ay  absEOa,$ff
                       >            load_flag $ff
336a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
336c : 48              >            pha         ;use stack to load status
336d : b95e02          >            lda absEOa,y    ;precharge accu
3370 : 28              >            plp
                        
3371 : 595202                   eor absEO,y
                                tst_ay  absrlo,absflo,$ff-fnz
3374 : 08              >            php         ;save flags
3375 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3378 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
337a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
337b : 0908            >            ora #decmode        ;ignore decimal mode bit
337d : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
337f : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
3382 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3384 : 88                       dey
3385 : 10e3                     bpl teor11
                        
3387 : a206                     ldx #6      ;(zp,x)
3389 : a003                     ldy #3
338b :                  teor12
                                set_ay  absEOa,0
                       >            load_flag 0
338b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
338d : 48              >            pha         ;use stack to load status
338e : b95e02          >            lda absEOa,y    ;precharge accu
3391 : 28              >            plp
                        
3392 : 4142                     eor (indEO,x)
                                tst_ay  absrlo,absflo,0
3394 : 08              >            php         ;save flags
3395 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3398 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
339a : 68              >            pla         ;load status
                       >            eor_flag 0
339b : 0908            >            ora #decmode        ;ignore decimal mode bit
339d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
339f : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
33a2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
33a4 : ca                       dex
33a5 : ca                       dex
33a6 : 88                       dey
33a7 : 10e2                     bpl teor12
33a9 : a206                     ldx #6
33ab : a003                     ldy #3
33ad :                  teor13
                                set_ay  absEOa,$ff
                       >            load_flag $ff
33ad : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
33af : 48              >            pha         ;use stack to load status
33b0 : b95e02          >            lda absEOa,y    ;precharge accu
33b3 : 28              >            plp
                        
33b4 : 4142                     eor (indEO,x)
                                tst_ay  absrlo,absflo,$ff-fnz
33b6 : 08              >            php         ;save flags
33b7 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
33ba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
33bc : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
33bd : 0908            >            ora #decmode        ;ignore decimal mode bit
33bf : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
33c1 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
33c4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
33c6 : ca                       dex
33c7 : ca                       dex
33c8 : 88                       dey
33c9 : 10e2                     bpl teor13
                        
33cb : a003                     ldy #3      ;(zp),y
33cd :                  teor14
                                set_ay  absEOa,0
                       >            load_flag 0
33cd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
33cf : 48              >            pha         ;use stack to load status
33d0 : b95e02          >            lda absEOa,y    ;precharge accu
33d3 : 28              >            plp
                        
33d4 : 5142                     eor (indEO),y
                                tst_ay  absrlo,absflo,0
33d6 : 08              >            php         ;save flags
33d7 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
33da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
33dc : 68              >            pla         ;load status
                       >            eor_flag 0
33dd : 0908            >            ora #decmode        ;ignore decimal mode bit
33df : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
33e1 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
33e4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
33e6 : 88                       dey
33e7 : 10e4                     bpl teor14
33e9 : a003                     ldy #3
33eb :                  teor15
                                set_ay  absEOa,$ff
                       >            load_flag $ff
33eb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
33ed : 48              >            pha         ;use stack to load status
33ee : b95e02          >            lda absEOa,y    ;precharge accu
33f1 : 28              >            plp
                        
33f2 : 5142                     eor (indEO),y
                                tst_ay  absrlo,absflo,$ff-fnz
33f4 : 08              >            php         ;save flags
33f5 : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
33f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
33fa : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
33fb : 0908            >            ora #decmode        ;ignore decimal mode bit
33fd : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
33ff : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
3402 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3404 : 88                       dey
3405 : 10e4                     bpl teor15
                                next_test
3407 : ad0002          >            lda test_case   ;previous test
340a : c927            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
340c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0028 =                 >test_num = test_num + 1
340e : a928            >            lda #test_num   ;*** next tests' number
3410 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; OR
3413 : a203                     ldx #3          ;immediate - self modifying code
3415 : b518             tora    lda zpOR,x
3417 : 8d0f02                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,0
                       >            load_flag 0
341a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
341c : 48              >            pha         ;use stack to load status
341d : bd5602          >            lda absORa,x    ;precharge accu
3420 : 28              >            plp
                        
3421 : 200e02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,0
3424 : 08              >            php         ;save flags
3425 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3428 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
342a : 68              >            pla         ;load status
                       >            eor_flag 0
342b : 0908            >            ora #decmode        ;ignore decimal mode bit
342d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
342f : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3432 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3434 : ca                       dex
3435 : 10de                     bpl tora
3437 : a203                     ldx #3
3439 : b518             tora1   lda zpOR,x
343b : 8d0f02                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,$ff
                       >            load_flag $ff
343e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3440 : 48              >            pha         ;use stack to load status
3441 : bd5602          >            lda absORa,x    ;precharge accu
3444 : 28              >            plp
                        
3445 : 200e02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
3448 : 08              >            php         ;save flags
3449 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
344c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
344e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
344f : 0908            >            ora #decmode        ;ignore decimal mode bit
3451 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3453 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3456 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3458 : ca                       dex
3459 : 10de                     bpl tora1
                            
345b : a203                     ldx #3      ;zp
345d : b518             tora2   lda zpOR,x
345f : 850c                     sta zpt
                                set_ax  absORa,0
                       >            load_flag 0
3461 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3463 : 48              >            pha         ;use stack to load status
3464 : bd5602          >            lda absORa,x    ;precharge accu
3467 : 28              >            plp
                        
3468 : 050c                     ora zpt
                                tst_ax  absrlo,absflo,0
346a : 08              >            php         ;save flags
346b : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
346e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3470 : 68              >            pla         ;load status
                       >            eor_flag 0
3471 : 0908            >            ora #decmode        ;ignore decimal mode bit
3473 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3475 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3478 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
347a : ca                       dex
347b : 10e0                     bpl tora2
347d : a203                     ldx #3
347f : b518             tora3   lda zpOR,x
3481 : 850c                     sta zpt
                                set_ax  absORa,$ff
                       >            load_flag $ff
3483 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3485 : 48              >            pha         ;use stack to load status
3486 : bd5602          >            lda absORa,x    ;precharge accu
3489 : 28              >            plp
                        
348a : 050c                     ora zpt
                                tst_ax  absrlo,absflo,$ff-fnz
348c : 08              >            php         ;save flags
348d : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3490 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3492 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3493 : 0908            >            ora #decmode        ;ignore decimal mode bit
3495 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3497 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
349a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
349c : ca                       dex
349d : 10e0                     bpl tora3
                        
349f : a203                     ldx #3      ;abs
34a1 : b518             tora4   lda zpOR,x
34a3 : 8d0302                   sta abst
                                set_ax  absORa,0
                       >            load_flag 0
34a6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
34a8 : 48              >            pha         ;use stack to load status
34a9 : bd5602          >            lda absORa,x    ;precharge accu
34ac : 28              >            plp
                        
34ad : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,0
34b0 : 08              >            php         ;save flags
34b1 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
34b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
34b6 : 68              >            pla         ;load status
                       >            eor_flag 0
34b7 : 0908            >            ora #decmode        ;ignore decimal mode bit
34b9 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
34bb : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
34be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
34c0 : ca                       dex
34c1 : 10de                     bpl tora4
34c3 : a203                     ldx #3
34c5 : b518             tora5   lda zpOR,x
34c7 : 8d0302                   sta abst
                                set_ax  absORa,$ff
                       >            load_flag $ff
34ca : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
34cc : 48              >            pha         ;use stack to load status
34cd : bd5602          >            lda absORa,x    ;precharge accu
34d0 : 28              >            plp
                        
34d1 : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,$ff-fnz
34d4 : 08              >            php         ;save flags
34d5 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
34d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
34da : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
34db : 0908            >            ora #decmode        ;ignore decimal mode bit
34dd : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
34df : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
34e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
34e4 : ca                       dex
34e5 : 1002                     bpl tora6
                        
34e7 : a203                     ldx #3      ;zp,x
34e9 :                  tora6
                                set_ax  absORa,0
                       >            load_flag 0
34e9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
34eb : 48              >            pha         ;use stack to load status
34ec : bd5602          >            lda absORa,x    ;precharge accu
34ef : 28              >            plp
                        
34f0 : 1518                     ora zpOR,x
                                tst_ax  absrlo,absflo,0
34f2 : 08              >            php         ;save flags
34f3 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
34f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
34f8 : 68              >            pla         ;load status
                       >            eor_flag 0
34f9 : 0908            >            ora #decmode        ;ignore decimal mode bit
34fb : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
34fd : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3500 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3502 : ca                       dex
3503 : 10e4                     bpl tora6
3505 : a203                     ldx #3
3507 :                  tora7
                                set_ax  absORa,$ff
                       >            load_flag $ff
3507 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3509 : 48              >            pha         ;use stack to load status
350a : bd5602          >            lda absORa,x    ;precharge accu
350d : 28              >            plp
                        
350e : 1518                     ora zpOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
3510 : 08              >            php         ;save flags
3511 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3514 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3516 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3517 : 0908            >            ora #decmode        ;ignore decimal mode bit
3519 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
351b : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
351e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3520 : ca                       dex
3521 : 10e4                     bpl tora7
                        
3523 : a203                     ldx #3      ;abs,x
3525 :                  tora8
                                set_ax  absORa,0
                       >            load_flag 0
3525 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3527 : 48              >            pha         ;use stack to load status
3528 : bd5602          >            lda absORa,x    ;precharge accu
352b : 28              >            plp
                        
352c : 1d4a02                   ora absOR,x
                                tst_ax  absrlo,absflo,0
352f : 08              >            php         ;save flags
3530 : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3533 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3535 : 68              >            pla         ;load status
                       >            eor_flag 0
3536 : 0908            >            ora #decmode        ;ignore decimal mode bit
3538 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
353a : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
353d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
353f : ca                       dex
3540 : 10e3                     bpl tora8
3542 : a203                     ldx #3
3544 :                  tora9
                                set_ax  absORa,$ff
                       >            load_flag $ff
3544 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3546 : 48              >            pha         ;use stack to load status
3547 : bd5602          >            lda absORa,x    ;precharge accu
354a : 28              >            plp
                        
354b : 1d4a02                   ora absOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
354e : 08              >            php         ;save flags
354f : dd6202          >            cmp absrlo,x    ;test result
                       >            trap_ne
3552 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3554 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3555 : 0908            >            ora #decmode        ;ignore decimal mode bit
3557 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3559 : dd6602          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
355c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
355e : ca                       dex
355f : 10e3                     bpl tora9
                        
3561 : a003                     ldy #3      ;abs,y
3563 :                  tora10
                                set_ay  absORa,0
                       >            load_flag 0
3563 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3565 : 48              >            pha         ;use stack to load status
3566 : b95602          >            lda absORa,y    ;precharge accu
3569 : 28              >            plp
                        
356a : 194a02                   ora absOR,y
                                tst_ay  absrlo,absflo,0
356d : 08              >            php         ;save flags
356e : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3571 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3573 : 68              >            pla         ;load status
                       >            eor_flag 0
3574 : 0908            >            ora #decmode        ;ignore decimal mode bit
3576 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3578 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
357b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
357d : 88                       dey
357e : 10e3                     bpl tora10
3580 : a003                     ldy #3
3582 :                  tora11
                                set_ay  absORa,$ff
                       >            load_flag $ff
3582 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3584 : 48              >            pha         ;use stack to load status
3585 : b95602          >            lda absORa,y    ;precharge accu
3588 : 28              >            plp
                        
3589 : 194a02                   ora absOR,y
                                tst_ay  absrlo,absflo,$ff-fnz
358c : 08              >            php         ;save flags
358d : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3590 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3592 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3593 : 0908            >            ora #decmode        ;ignore decimal mode bit
3595 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3597 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
359a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
359c : 88                       dey
359d : 10e3                     bpl tora11
                        
359f : a206                     ldx #6      ;(zp,x)
35a1 : a003                     ldy #3
35a3 :                  tora12
                                set_ay  absORa,0
                       >            load_flag 0
35a3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
35a5 : 48              >            pha         ;use stack to load status
35a6 : b95602          >            lda absORa,y    ;precharge accu
35a9 : 28              >            plp
                        
35aa : 014a                     ora (indOR,x)
                                tst_ay  absrlo,absflo,0
35ac : 08              >            php         ;save flags
35ad : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
35b0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
35b2 : 68              >            pla         ;load status
                       >            eor_flag 0
35b3 : 0908            >            ora #decmode        ;ignore decimal mode bit
35b5 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
35b7 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
35ba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
35bc : ca                       dex
35bd : ca                       dex
35be : 88                       dey
35bf : 10e2                     bpl tora12
35c1 : a206                     ldx #6
35c3 : a003                     ldy #3
35c5 :                  tora13
                                set_ay  absORa,$ff
                       >            load_flag $ff
35c5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
35c7 : 48              >            pha         ;use stack to load status
35c8 : b95602          >            lda absORa,y    ;precharge accu
35cb : 28              >            plp
                        
35cc : 014a                     ora (indOR,x)
                                tst_ay  absrlo,absflo,$ff-fnz
35ce : 08              >            php         ;save flags
35cf : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
35d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
35d4 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
35d5 : 0908            >            ora #decmode        ;ignore decimal mode bit
35d7 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
35d9 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
35dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
35de : ca                       dex
35df : ca                       dex
35e0 : 88                       dey
35e1 : 10e2                     bpl tora13
                        
35e3 : a003                     ldy #3      ;(zp),y
35e5 :                  tora14
                                set_ay  absORa,0
                       >            load_flag 0
35e5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
35e7 : 48              >            pha         ;use stack to load status
35e8 : b95602          >            lda absORa,y    ;precharge accu
35eb : 28              >            plp
                        
35ec : 114a                     ora (indOR),y
                                tst_ay  absrlo,absflo,0
35ee : 08              >            php         ;save flags
35ef : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
35f2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
35f4 : 68              >            pla         ;load status
                       >            eor_flag 0
35f5 : 0908            >            ora #decmode        ;ignore decimal mode bit
35f7 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
35f9 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
35fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
35fe : 88                       dey
35ff : 10e4                     bpl tora14
3601 : a003                     ldy #3
3603 :                  tora15
                                set_ay  absORa,$ff
                       >            load_flag $ff
3603 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3605 : 48              >            pha         ;use stack to load status
3606 : b95602          >            lda absORa,y    ;precharge accu
3609 : 28              >            plp
                        
360a : 114a                     ora (indOR),y
                                tst_ay  absrlo,absflo,$ff-fnz
360c : 08              >            php         ;save flags
360d : d96202          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3610 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3612 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3613 : 0908            >            ora #decmode        ;ignore decimal mode bit
3615 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3617 : d96602          >            cmp absflo,y    ;test flags
                       >            trap_ne
361a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
361c : 88                       dey
361d : 10e4                     bpl tora15
                            if I_flag = 3
361f : 58                       cli
                            endif                
                                next_test
3620 : ad0002          >            lda test_case   ;previous test
3623 : c928            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3625 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0029 =                 >test_num = test_num + 1
3627 : a929            >            lda #test_num   ;*** next tests' number
3629 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
362c : d8                       cld
362d : a20e                     ldx #ad2        ;for indexed test
362f : a0ff                     ldy #$ff        ;max range
3631 : a900                     lda #0          ;start with adding zeroes & no carry
3633 : 850c                     sta adfc        ;carry in - for diag
3635 : 850d                     sta ad1         ;operand 1 - accumulator
3637 : 850e                     sta ad2         ;operand 2 - memory or immediate
3639 : 8d0302                   sta ada2        ;non zp
363c : 850f                     sta adrl        ;expected result bits 0-7
363e : 8510                     sta adrh        ;expected result bit 8 (carry out)
3640 : a9ff                     lda #$ff        ;complemented operand 2 for subtract
3642 : 8512                     sta sb2
3644 : 8d0402                   sta sba2        ;non zp
3647 : a902                     lda #2          ;expected Z-flag
3649 : 8511                     sta adrf
364b : 18               tadd    clc             ;test with carry clear
364c : 209736                   jsr chkadd
364f : e60c                     inc adfc        ;now with carry
3651 : e60f                     inc adrl        ;result +1
3653 : 08                       php             ;save N & Z from low result
3654 : 08                       php
3655 : 68                       pla             ;accu holds expected flags
3656 : 2982                     and #$82        ;mask N & Z
3658 : 28                       plp
3659 : d002                     bne tadd1
365b : e610                     inc adrh        ;result bit 8 - carry
365d : 0510             tadd1   ora adrh        ;merge C to expected flags
365f : 8511                     sta adrf        ;save expected flags except overflow
3661 : 38                       sec             ;test with carry set
3662 : 209736                   jsr chkadd
3665 : c60c                     dec adfc        ;same for operand +1 but no carry
3667 : e60d                     inc ad1
3669 : d0e0                     bne tadd        ;iterate op1
366b : a900                     lda #0          ;preset result to op2 when op1 = 0
366d : 8510                     sta adrh
366f : ee0302                   inc ada2
3672 : e60e                     inc ad2
3674 : 08                       php             ;save NZ as operand 2 becomes the new result
3675 : 68                       pla
3676 : 2982                     and #$82        ;mask N00000Z0
3678 : 8511                     sta adrf        ;no need to check carry as we are adding to 0
367a : c612                     dec sb2         ;complement subtract operand 2
367c : ce0402                   dec sba2
367f : a50e                     lda ad2         
3681 : 850f                     sta adrl
3683 : d0c6                     bne tadd        ;iterate op2
                            if disable_decimal < 1
                                next_test
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
                                sed 
                                ldx #ad2        ;for indexed test
                                ldy #$ff        ;max range
                                lda #$99        ;start with adding 99 to 99 with carry
                                sta ad1         ;operand 1 - accumulator
                                sta ad2         ;operand 2 - memory or immediate
                                sta ada2        ;non zp
                                sta adrl        ;expected result bits 0-7
                                lda #1          ;set carry in & out
                                sta adfc        ;carry in - for diag
                                sta adrh        ;expected result bit 8 (carry out)
                                lda #0          ;complemented operand 2 for subtract
                                sta sb2
                                sta sba2        ;non zp
                        tdad    sec             ;test with carry set
                                jsr chkdad
                                dec adfc        ;now with carry clear
                                lda adrl        ;decimal adjust result
                                bne tdad1       ;skip clear carry & preset result 99 (9A-1)
                                dec adrh
                                lda #$99
                                sta adrl
                                bne tdad3
                        tdad1   and #$f         ;lower nibble mask
                                bne tdad2       ;no decimal adjust needed
                                dec adrl        ;decimal adjust (?0-6)
                                dec adrl
                                dec adrl
                                dec adrl
                                dec adrl
                                dec adrl
                        tdad2   dec adrl        ;result -1
                        tdad3   clc             ;test with carry clear
                                jsr chkdad
                                inc adfc        ;same for operand -1 but with carry
                                lda ad1         ;decimal adjust operand 1
                                beq tdad5       ;iterate operand 2
                                and #$f         ;lower nibble mask
                                bne tdad4       ;skip decimal adjust
                                dec ad1         ;decimal adjust (?0-6)
                                dec ad1
                                dec ad1
                                dec ad1
                                dec ad1
                                dec ad1
                        tdad4   dec ad1         ;operand 1 -1
                                jmp tdad        ;iterate op1
                        
                        tdad5   lda #$99        ;precharge op1 max
                                sta ad1
                                lda ad2         ;decimal adjust operand 2
                                beq tdad7       ;end of iteration
                                and #$f         ;lower nibble mask
                                bne tdad6       ;skip decimal adjust
                                dec ad2         ;decimal adjust (?0-6)
                                dec ad2
                                dec ad2
                                dec ad2
                                dec ad2
                                dec ad2
                                inc sb2         ;complemented decimal adjust for subtract (?9+6)
                                inc sb2
                                inc sb2
                                inc sb2
                                inc sb2
                                inc sb2
                        tdad6   dec ad2         ;operand 2 -1
                                inc sb2         ;complemented operand for subtract
                                lda sb2
                                sta sba2        ;copy as non zp operand
                                lda ad2
                                sta ada2        ;copy as non zp operand
                                sta adrl        ;new result since op1+carry=00+carry +op2=op2
                                inc adrh        ;result carry
                                bne tdad        ;iterate op2
                        tdad7
                                next_test
                        
                        ; decimal/binary switch test
                        ; tests CLD, SED, PLP, RTI to properly switch between decimal & binary opcode
                        ;   tables
                                clc
                                cld
                                php
                                lda #$55
                                adc #$55
                                cmp #$aa
                                trap_ne         ;expected binary result after cld
                                clc
                                sed
                                php
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after sed
                                cld
                                plp
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after plp D=1
                                plp
                                lda #$55
                                adc #$55
                                cmp #$aa
                                trap_ne         ;expected binary result after plp D=0
                                clc
                                lda #hi bin_rti_ret ;emulated interrupt for rti
                                pha
                                lda #lo bin_rti_ret
                                pha
                                php
                                sed
                                lda #hi dec_rti_ret ;emulated interrupt for rti
                                pha
                                lda #lo dec_rti_ret
                                pha
                                php
                                cld
                                rti
                        dec_rti_ret
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after rti D=1
                                rti
                        bin_rti_ret        
                                lda #$55
                                adc #$55
                                cmp #$aa
                                trap_ne         ;expected binary result after rti D=0
                            endif
                            
3685 : ad0002                   lda test_case
3688 : c929                     cmp #test_num
                                trap_ne         ;previous test is out of sequence
368a : d0fe            >        bne *           ;failed not equal (non zero)
                        
368c : a9f0                     lda #$f0        ;mark opcode testing complete
368e : 8d0002                   sta test_case
                                
                        ; final RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                                check_ram
                       >            ;RAM check disabled - RAM size not set
                        
                        ; *** DEBUG INFO ***
                        ; to debug checksum errors uncomment check_ram in the next_test macro to
                        ; narrow down the responsible opcode.
                        ; may give false errors when monitor, OS or other background activity is
                        ; allowed during previous tests.
                        
                        
                        ; S U C C E S S ************************************************
                        ; -------------       
                                success         ;if you get here everything went well
3691 : 4c9136          >        jmp *           ;test passed, no errors
                        
                        ; -------------       
                        ; S U C C E S S ************************************************
3694 : 4c0004                   jmp start       ;run again      
                        
                            if disable_decimal < 1
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
                        chkdad
                        ; decimal ADC / SBC zp
                                php             ;save carry for subtract
                                lda ad1
                                adc ad2         ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sb2         ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad flags
                                plp
                        ; decimal ADC / SBC abs
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2        ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sba2        ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC #
                                php             ;save carry for subtract
                                lda ad2
                                sta ex_adci+1   ;set ADC # operand
                                lda ad1
                                jsr ex_adci     ;execute ADC # in RAM
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda sb2
                                sta ex_sbci+1   ;set SBC # operand
                                lda ad1
                                jsr ex_sbci     ;execute SBC # in RAM
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC zp,x
                                php             ;save carry for subtract
                                lda ad1
                                adc 0,x         ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sb2-ad2,x   ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC abs,x
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2-ad2,x  ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sba2-ad2,x  ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC abs,y
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2-$ff,y  ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sba2-$ff,y  ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC (zp,x)
                                php             ;save carry for subtract
                                lda ad1
                                adc (lo adi2-ad2,x) ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc (lo sbi2-ad2,x) ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC (abs),y
                                php             ;save carry for subtract
                                lda ad1
                                adc (adiy2),y   ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc (sbiy2),y   ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                rts
                            endif
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
3697 : a511             chkadd  lda adrf        ;add V-flag if overflow
3699 : 2983                     and #$83        ;keep N-----ZC / clear V
369b : 48                       pha
369c : a50d                     lda ad1         ;test sign unequal between operands
369e : 450e                     eor ad2
36a0 : 300a                     bmi ckad1       ;no overflow possible - operands have different sign
36a2 : a50d                     lda ad1         ;test sign equal between operands and result
36a4 : 450f                     eor adrl
36a6 : 1004                     bpl ckad1       ;no overflow occured - operand and result have same sign
36a8 : 68                       pla
36a9 : 0940                     ora #$40        ;set V
36ab : 48                       pha
36ac : 68               ckad1   pla
36ad : 8511                     sta adrf        ;save expected flags
                        ; binary ADC / SBC zp
36af : 08                       php             ;save carry for subtract
36b0 : a50d                     lda ad1
36b2 : 650e                     adc ad2         ;perform add
36b4 : 08                       php          
36b5 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
36b7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
36b9 : 68                       pla             ;check flags
36ba : 29c3                     and #$c3        ;mask NV----ZC
36bc : c511                     cmp adrf
                                trap_ne         ;bad flags
36be : d0fe            >        bne *           ;failed not equal (non zero)
                        
36c0 : 28                       plp
36c1 : 08                       php             ;save carry for next add
36c2 : a50d                     lda ad1
36c4 : e512                     sbc sb2         ;perform subtract
36c6 : 08                       php          
36c7 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
36c9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
36cb : 68                       pla             ;check flags
36cc : 29c3                     and #$c3        ;mask NV----ZC
36ce : c511                     cmp adrf
                                trap_ne         ;bad flags
36d0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
36d2 : 28                       plp
                        ; binary ADC / SBC abs
36d3 : 08                       php             ;save carry for subtract
36d4 : a50d                     lda ad1
36d6 : 6d0302                   adc ada2        ;perform add
36d9 : 08                       php          
36da : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
36dc : d0fe            >        bne *           ;failed not equal (non zero)
                        
36de : 68                       pla             ;check flags
36df : 29c3                     and #$c3        ;mask NV----ZC
36e1 : c511                     cmp adrf
                                trap_ne         ;bad flags
36e3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
36e5 : 28                       plp
36e6 : 08                       php             ;save carry for next add
36e7 : a50d                     lda ad1
36e9 : ed0402                   sbc sba2        ;perform subtract
36ec : 08                       php          
36ed : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
36ef : d0fe            >        bne *           ;failed not equal (non zero)
                        
36f1 : 68                       pla             ;check flags
36f2 : 29c3                     and #$c3        ;mask NV----ZC
36f4 : c511                     cmp adrf
                                trap_ne         ;bad flags
36f6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
36f8 : 28                       plp
                        ; binary ADC / SBC #
36f9 : 08                       php             ;save carry for subtract
36fa : a50e                     lda ad2
36fc : 8d1202                   sta ex_adci+1   ;set ADC # operand
36ff : a50d                     lda ad1
3701 : 201102                   jsr ex_adci     ;execute ADC # in RAM
3704 : 08                       php          
3705 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3707 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3709 : 68                       pla             ;check flags
370a : 29c3                     and #$c3        ;mask NV----ZC
370c : c511                     cmp adrf
                                trap_ne         ;bad flags
370e : d0fe            >        bne *           ;failed not equal (non zero)
                        
3710 : 28                       plp
3711 : 08                       php             ;save carry for next add
3712 : a512                     lda sb2
3714 : 8d1502                   sta ex_sbci+1   ;set SBC # operand
3717 : a50d                     lda ad1
3719 : 201402                   jsr ex_sbci     ;execute SBC # in RAM
371c : 08                       php          
371d : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
371f : d0fe            >        bne *           ;failed not equal (non zero)
                        
3721 : 68                       pla             ;check flags
3722 : 29c3                     and #$c3        ;mask NV----ZC
3724 : c511                     cmp adrf
                                trap_ne         ;bad flags
3726 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3728 : 28                       plp
                        ; binary ADC / SBC zp,x
3729 : 08                       php             ;save carry for subtract
372a : a50d                     lda ad1
372c : 7500                     adc 0,x         ;perform add
372e : 08                       php          
372f : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3731 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3733 : 68                       pla             ;check flags
3734 : 29c3                     and #$c3        ;mask NV----ZC
3736 : c511                     cmp adrf
                                trap_ne         ;bad flags
3738 : d0fe            >        bne *           ;failed not equal (non zero)
                        
373a : 28                       plp
373b : 08                       php             ;save carry for next add
373c : a50d                     lda ad1
373e : f504                     sbc sb2-ad2,x   ;perform subtract
3740 : 08                       php          
3741 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3743 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3745 : 68                       pla             ;check flags
3746 : 29c3                     and #$c3        ;mask NV----ZC
3748 : c511                     cmp adrf
                                trap_ne         ;bad flags
374a : d0fe            >        bne *           ;failed not equal (non zero)
                        
374c : 28                       plp
                        ; binary ADC / SBC abs,x
374d : 08                       php             ;save carry for subtract
374e : a50d                     lda ad1
3750 : 7df501                   adc ada2-ad2,x  ;perform add
3753 : 08                       php          
3754 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3756 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3758 : 68                       pla             ;check flags
3759 : 29c3                     and #$c3        ;mask NV----ZC
375b : c511                     cmp adrf
                                trap_ne         ;bad flags
375d : d0fe            >        bne *           ;failed not equal (non zero)
                        
375f : 28                       plp
3760 : 08                       php             ;save carry for next add
3761 : a50d                     lda ad1
3763 : fdf601                   sbc sba2-ad2,x  ;perform subtract
3766 : 08                       php          
3767 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3769 : d0fe            >        bne *           ;failed not equal (non zero)
                        
376b : 68                       pla             ;check flags
376c : 29c3                     and #$c3        ;mask NV----ZC
376e : c511                     cmp adrf
                                trap_ne         ;bad flags
3770 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3772 : 28                       plp
                        ; binary ADC / SBC abs,y
3773 : 08                       php             ;save carry for subtract
3774 : a50d                     lda ad1
3776 : 790401                   adc ada2-$ff,y  ;perform add
3779 : 08                       php          
377a : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
377c : d0fe            >        bne *           ;failed not equal (non zero)
                        
377e : 68                       pla             ;check flags
377f : 29c3                     and #$c3        ;mask NV----ZC
3781 : c511                     cmp adrf
                                trap_ne         ;bad flags
3783 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3785 : 28                       plp
3786 : 08                       php             ;save carry for next add
3787 : a50d                     lda ad1
3789 : f90501                   sbc sba2-$ff,y  ;perform subtract
378c : 08                       php          
378d : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
378f : d0fe            >        bne *           ;failed not equal (non zero)
                        
3791 : 68                       pla             ;check flags
3792 : 29c3                     and #$c3        ;mask NV----ZC
3794 : c511                     cmp adrf
                                trap_ne         ;bad flags
3796 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3798 : 28                       plp
                        ; binary ADC / SBC (zp,x)
3799 : 08                       php             ;save carry for subtract
379a : a50d                     lda ad1
379c : 6144                     adc (lo adi2-ad2,x) ;perform add
379e : 08                       php          
379f : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
37a1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37a3 : 68                       pla             ;check flags
37a4 : 29c3                     and #$c3        ;mask NV----ZC
37a6 : c511                     cmp adrf
                                trap_ne         ;bad flags
37a8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37aa : 28                       plp
37ab : 08                       php             ;save carry for next add
37ac : a50d                     lda ad1
37ae : e146                     sbc (lo sbi2-ad2,x) ;perform subtract
37b0 : 08                       php          
37b1 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
37b3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37b5 : 68                       pla             ;check flags
37b6 : 29c3                     and #$c3        ;mask NV----ZC
37b8 : c511                     cmp adrf
                                trap_ne         ;bad flags
37ba : d0fe            >        bne *           ;failed not equal (non zero)
                        
37bc : 28                       plp
                        ; binary ADC / SBC (abs),y
37bd : 08                       php             ;save carry for subtract
37be : a50d                     lda ad1
37c0 : 7156                     adc (adiy2),y   ;perform add
37c2 : 08                       php          
37c3 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
37c5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37c7 : 68                       pla             ;check flags
37c8 : 29c3                     and #$c3        ;mask NV----ZC
37ca : c511                     cmp adrf
                                trap_ne         ;bad flags
37cc : d0fe            >        bne *           ;failed not equal (non zero)
                        
37ce : 28                       plp
37cf : 08                       php             ;save carry for next add
37d0 : a50d                     lda ad1
37d2 : f158                     sbc (sbiy2),y   ;perform subtract
37d4 : 08                       php          
37d5 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
37d7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37d9 : 68                       pla             ;check flags
37da : 29c3                     and #$c3        ;mask NV----ZC
37dc : c511                     cmp adrf
                                trap_ne         ;bad flags
37de : d0fe            >        bne *           ;failed not equal (non zero)
                        
37e0 : 28                       plp
37e1 : 60                       rts
                        
                        ; target for the jump absolute test
37e2 : 88                       dey
37e3 : 88                       dey
37e4 :                  test_far
37e4 : 08                       php             ;either SP or Y count will fail, if we do not hit
37e5 : 88                       dey
37e6 : 88                       dey
37e7 : 88                       dey
37e8 : 28                       plp
                                trap_cs         ;flags loaded?
37e9 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
37eb : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
37ed : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
37ef : f0fe            >        beq *           ;failed equal (zero)
                        
37f1 : c946                     cmp #'F'        ;registers loaded?
                                trap_ne
37f3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37f5 : e041                     cpx #'A'
                                trap_ne        
37f7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37f9 : c04f                     cpy #('R'-3)
                                trap_ne
37fb : d0fe            >        bne *           ;failed not equal (non zero)
                        
37fd : 48                       pha             ;save a,x
37fe : 8a                       txa
37ff : 48                       pha
3800 : ba                       tsx
3801 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
3803 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3805 : 68                       pla             ;restore x
3806 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
3807 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3809 : 48              >            pha         ;use stack to load status
380a : 28              >            plp
                        
380b : 68                       pla             ;restore a
380c : e8                       inx             ;return registers with modifications
380d : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
380f : 4c5309                   jmp far_ret
                                
                        ; target for the jump indirect test
                                align
3812 : 1b38             ptr_tst_ind dw test_ind
3814 : a809             ptr_ind_ret dw ind_ret
                                trap            ;runover protection
3816 : 4c1638          >        jmp *           ;failed anyway
                        
3819 : 88                       dey
381a : 88                       dey
381b :                  test_ind
381b : 08                       php             ;either SP or Y count will fail, if we do not hit
381c : 88                       dey
381d : 88                       dey
381e : 88                       dey
381f : 28                       plp
                                trap_cs         ;flags loaded?
3820 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
3822 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
3824 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
3826 : f0fe            >        beq *           ;failed equal (zero)
                        
3828 : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
382a : d0fe            >        bne *           ;failed not equal (non zero)
                        
382c : e04e                     cpx #'N'
                                trap_ne        
382e : d0fe            >        bne *           ;failed not equal (non zero)
                        
3830 : c041                     cpy #('D'-3)
                                trap_ne
3832 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3834 : 48                       pha             ;save a,x
3835 : 8a                       txa
3836 : 48                       pha
3837 : ba                       tsx
3838 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
383a : d0fe            >        bne *           ;failed not equal (non zero)
                        
383c : 68                       pla             ;restore x
383d : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
383e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3840 : 48              >            pha         ;use stack to load status
3841 : 28              >            plp
                        
3842 : 68                       pla             ;restore a
3843 : e8                       inx             ;return registers with modifications
3844 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
3846 : 6c1438                   jmp (ptr_ind_ret)
                                trap            ;runover protection
3849 : 4c4938          >        jmp *           ;failed anyway
                        
                        
                        ; target for the jump subroutine test
384c : 88                       dey
384d : 88                       dey
384e :                  test_jsr
384e : 08                       php             ;either SP or Y count will fail, if we do not hit
384f : 88                       dey
3850 : 88                       dey
3851 : 88                       dey
3852 : 28                       plp
                                trap_cs         ;flags loaded?
3853 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
3855 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
3857 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
3859 : f0fe            >        beq *           ;failed equal (zero)
                        
385b : c94a                     cmp #'J'        ;registers loaded?
                                trap_ne
385d : d0fe            >        bne *           ;failed not equal (non zero)
                        
385f : e053                     cpx #'S'
                                trap_ne        
3861 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3863 : c04f                     cpy #('R'-3)
                                trap_ne
3865 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3867 : 48                       pha             ;save a,x
3868 : 8a                       txa
3869 : 48                       pha       
386a : ba                       tsx             ;sp -4? (return addr,a,x)
386b : e0fb                     cpx #$fb
                                trap_ne
386d : d0fe            >        bne *           ;failed not equal (non zero)
                        
386f : adff01                   lda $1ff        ;propper return on stack
3872 : c909                     cmp #hi(jsr_ret)
                                trap_ne
3874 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3876 : adfe01                   lda $1fe
3879 : c9de                     cmp #lo(jsr_ret)
                                trap_ne
387b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
387d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
387f : 48              >            pha         ;use stack to load status
3880 : 28              >            plp
                        
3881 : 68                       pla             ;pull x,a
3882 : aa                       tax
3883 : 68                       pla
3884 : e8                       inx             ;return registers with modifications
3885 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
3887 : 60                       rts
                                trap            ;runover protection
3888 : 4c8838          >        jmp *           ;failed anyway
                        
                                
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
388b :                  nmi_trap
                                trap            ;check stack for conditions at NMI
388b : 4c8b38          >        jmp *           ;failed anyway
                        
388e :                  res_trap
                                trap            ;unexpected RESET
388e : 4c8e38          >        jmp *           ;failed anyway
                        
                                
3891 : 88                       dey
3892 : 88                       dey
3893 :                  irq_trap                ;BRK test or unextpected BRK or IRQ
3893 : 08                       php             ;either SP or Y count will fail, if we do not hit
3894 : 88                       dey
3895 : 88                       dey
3896 : 88                       dey
                                ;next 4 traps could be caused by unexpected BRK or IRQ
                                ;check stack for BREAK and originating location
                                ;possible jump/branch into weeds (uninitialized space)
3897 : c942                     cmp #'B'        ;registers loaded?
                                trap_ne
3899 : d0fe            >        bne *           ;failed not equal (non zero)
                        
389b : e052                     cpx #'R'
                                trap_ne        
389d : d0fe            >        bne *           ;failed not equal (non zero)
                        
389f : c048                     cpy #('K'-3)
                                trap_ne
38a1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
38a3 : 850a                     sta irq_a       ;save registers during break test
38a5 : 860b                     stx irq_x
38a7 : ba                       tsx             ;test break on stack
38a8 : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1
38ab : 0908            >            ora #decmode        ;ignore decimal mode bit
38ad : c938            >            cmp #(0      |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne         ; - no break flag on stack
38af : d0fe            >        bne *           ;failed not equal (non zero)
                        
38b1 : 68                       pla
38b2 : c934                     cmp #fai        ;should have added interrupt disable
                                trap_ne
38b4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
38b6 : ba                       tsx
38b7 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
38b9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
38bb : adff01                   lda $1ff        ;propper return on stack
38be : c90a                     cmp #hi(brk_ret)
                                trap_ne
38c0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
38c2 : adfe01                   lda $1fe
38c5 : c915                     cmp #lo(brk_ret)
                                trap_ne
38c7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
38c9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
38cb : 48              >            pha         ;use stack to load status
38cc : 28              >            plp
                        
38cd : a60b                     ldx irq_x
38cf : e8                       inx             ;return registers with modifications
38d0 : a50a                     lda irq_a
38d2 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1 but original flags should be restored
38d4 : 40                       rti
                                trap            ;runover protection
38d5 : 4cd538          >        jmp *           ;failed anyway
                        
                                
                            if report = 1
                                include "report.i65"
                            endif
                                
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
38d8 :                  zp_init
38d8 : c3824100         zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
38dc : 7f               zp7f_   db  $7f             ;test pattern for compare
                        ;logical zeropage operands
38dd : 001f7180         zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
38e1 : 0fff7f80         zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
38e5 : ff0f8f8f         zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
38e9 : 1702             ind1_   dw  abs1            ;indirect pointer to pattern in absolute memory
38eb : 1802                     dw  abs1+1
38ed : 1902                     dw  abs1+2
38ef : 1a02                     dw  abs1+3
38f1 : 1b02                     dw  abs7f
38f3 : 1f01             inw1_   dw  abs1-$f8        ;indirect pointer for wrap-test pattern
38f5 : 0302             indt_   dw  abst            ;indirect pointer to store area in absolute memory
38f7 : 0402                     dw  abst+1
38f9 : 0502                     dw  abst+2
38fb : 0602                     dw  abst+3
38fd : 0b01             inwt_   dw  abst-$f8        ;indirect pointer for wrap-test store
38ff : 4e02             indAN_  dw  absAN           ;indirect pointer to AND pattern in absolute memory
3901 : 4f02                     dw  absAN+1
3903 : 5002                     dw  absAN+2
3905 : 5102                     dw  absAN+3
3907 : 5202             indEO_  dw  absEO           ;indirect pointer to EOR pattern in absolute memory
3909 : 5302                     dw  absEO+1
390b : 5402                     dw  absEO+2
390d : 5502                     dw  absEO+3
390f : 4a02             indOR_  dw  absOR           ;indirect pointer to OR pattern in absolute memory
3911 : 4b02                     dw  absOR+1
3913 : 4c02                     dw  absOR+2
3915 : 4d02                     dw  absOR+3
                        ;add/subtract indirect pointers
3917 : 0302             adi2_   dw  ada2            ;indirect pointer to operand 2 in absolute memory
3919 : 0402             sbi2_   dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
391b : 0401             adiy2_  dw  ada2-$ff        ;with offset for indirect indexed
391d : 0501             sbiy2_  dw  sba2-$ff
391f :                  zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)   
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and zeropage data
                            endif 
391f :                  data_init
391f : 2900             ex_and_ and #0              ;execute immediate opcodes
3921 : 60                       rts
3922 : 4900             ex_eor_ eor #0              ;execute immediate opcodes
3924 : 60                       rts
3925 : 0900             ex_ora_ ora #0              ;execute immediate opcodes
3927 : 60                       rts
3928 : 6900             ex_adc_ adc #0              ;execute immediate opcodes
392a : 60                       rts
392b : e900             ex_sbc_ sbc #0              ;execute immediate opcodes
392d : 60                       rts
392e : c3824100         abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
3932 : 7f               abs7f_  db  $7f             ;test pattern for compare
                        ;loads
3933 : 80800002         fLDx_   db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
3937 :                  rASL_                       ;expected result ASL & ROL -carry
3937 : 86048200         rROL_   db  $86,$04,$82,0   ; "
393b : 87058301         rROLc_  db  $87,$05,$83,1   ;expected result ROL +carry
393f :                  rLSR_                       ;expected result LSR & ROR -carry
393f : 61412000         rROR_   db  $61,$41,$20,0   ; "
3943 : e1c1a080         rRORc_  db  $e1,$c1,$a0,$80 ;expected result ROR +carry
3947 :                  fASL_                       ;expected flags for shifts
3947 : 81018002         fROL_   db  fnc,fc,fn,fz    ;no carry in
394b : 81018000         fROLc_  db  fnc,fc,fn,0     ;carry in
394f :                  fLSR_
394f : 01000102         fROR_   db  fc,0,fc,fz      ;no carry in
3953 : 81808180         fRORc_  db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
3957 : 7f80ff0001       rINC_   db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
395c : 0080800200       fINC_   db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        ;logical memory operand
3961 : 001f7180         absOR_  db  0,$1f,$71,$80   ;test pattern for OR
3965 : 0fff7f80         absAN_  db  $0f,$ff,$7f,$80 ;test pattern for AND
3969 : ff0f8f8f         absEO_  db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
396d : 00f11f00         absORa_ db  0,$f1,$1f,0     ;test pattern for OR
3971 : f0ffffff         absANa_ db  $f0,$ff,$ff,$ff ;test pattern for AND
3975 : fff0f00f         absEOa_ db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
3979 : 00ff7f80         absrlo_ db  0,$ff,$7f,$80
397d : 02800080         absflo_ db  fz,fn,0,fn
3981 :                  data_end
                            if (data_end - data_init) != (data_bss_end - data_bss)
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and data
                            endif 
                        
3981 :                  vec_init
3981 : 8b38                     dw  nmi_trap
3983 : 8e38                     dw  res_trap
3985 : 9338                     dw  irq_trap
fffa =                  vec_bss equ $fffa
                            endif                   ;end of RAM init data
                            
                            if (load_data_direct = 1) & (ROM_vectors = 1)  
                                org $fffa       ;vectors
                                dw  nmi_trap
                                dw  res_trap
                                dw  irq_trap
                            endif
                        
fffa =                          end start
                                    
                        
No errors in pass 2.
Wrote binary from address $0400 through $3986.
Total size 13703 bytes.
Program start address is at $0400 (1024).

